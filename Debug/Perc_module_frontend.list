
Perc_module_frontend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08004e7c  08004e7c  00005e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e4  080050e4  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  080050e4  080050e4  000060e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050ec  080050ec  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080050ec  080050ec  000060ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080050f4  080050f4  000060f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080050fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016d8  20000060  0800515c  00007060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001738  0800515c  00007738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fc47  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aed  00000000  00000000  00036cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00018ea8  00000000  00000000  0003b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  00054670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002a3d  00000000  00000000  00055a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c63  00000000  00000000  0005846d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028b28  00000000  00000000  000790d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bea47  00000000  00000000  000a1bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016063f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005330  00000000  00000000  00160684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001659b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000060 	.word	0x20000060
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004e64 	.word	0x08004e64

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000064 	.word	0x20000064
 80001c8:	08004e64 	.word	0x08004e64

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <GFX_DrawChar.part.0>:
uint8_t GFX_GetFontSize(void)
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
 80004bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004c0:	b093      	sub	sp, #76	@ 0x4c
 80004c2:	461f      	mov	r7, r3
{
	if(chr > 0x7E) return; // chr > '~'

	for(uint8_t i=0; i<font[1]; i++ )
 80004c4:	4bb2      	ldr	r3, [pc, #712]	@ (8000790 <GFX_DrawChar.part.0+0x2d4>)
void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
 80004c6:	f89d 4070 	ldrb.w	r4, [sp, #112]	@ 0x70
 80004ca:	940c      	str	r4, [sp, #48]	@ 0x30
	for(uint8_t i=0; i<font[1]; i++ )
 80004cc:	681c      	ldr	r4, [r3, #0]
void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
 80004ce:	9008      	str	r0, [sp, #32]
 80004d0:	468b      	mov	fp, r1
 80004d2:	4611      	mov	r1, r2
	for(uint8_t i=0; i<font[1]; i++ )
 80004d4:	7862      	ldrb	r2, [r4, #1]
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	f000 808b 	beq.w	80005f2 <GFX_DrawChar.part.0+0x136>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2];
 80004dc:	f1a1 0620 	sub.w	r6, r1, #32
	for(uint8_t i=0; i<font[1]; i++ )
 80004e0:	f04f 0800 	mov.w	r8, #0

        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 80004e4:	7823      	ldrb	r3, [r4, #0]
	for(uint8_t i=0; i<font[1]; i++ )
 80004e6:	970d      	str	r7, [sp, #52]	@ 0x34
 80004e8:	9611      	str	r6, [sp, #68]	@ 0x44
 80004ea:	4647      	mov	r7, r8
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2];
 80004ec:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80004ee:	19e1      	adds	r1, r4, r7
 80004f0:	fb00 1202 	mla	r2, r0, r2, r1
 80004f4:	7896      	ldrb	r6, [r2, #2]
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d07b      	beq.n	80005f2 <GFX_DrawChar.part.0+0x136>
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
            }
            else if(background == 0)
            {
            	if(size == 1)
					GFX_DrawPixel(x+i, y+j, background);
 80004fa:	9908      	ldr	r1, [sp, #32]
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 80004fc:	9707      	str	r7, [sp, #28]
					GFX_DrawPixel(x+i, y+j, background);
 80004fe:	1879      	adds	r1, r7, r1
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 8000500:	2200      	movs	r2, #0
					GFX_DrawPixel(x+i, y+j, background);
 8000502:	b209      	sxth	r1, r1
 8000504:	910e      	str	r1, [sp, #56]	@ 0x38
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 8000506:	4615      	mov	r5, r2
 8000508:	465f      	mov	r7, fp
            if(line & 1)
 800050a:	07f1      	lsls	r1, r6, #31
 800050c:	f140 8092 	bpl.w	8000634 <GFX_DrawChar.part.0+0x178>
            	if(size == 1)
 8000510:	49a0      	ldr	r1, [pc, #640]	@ (8000794 <GFX_DrawChar.part.0+0x2d8>)
 8000512:	7808      	ldrb	r0, [r1, #0]
 8000514:	2801      	cmp	r0, #1
 8000516:	f000 8110 	beq.w	800073a <GFX_DrawChar.part.0+0x27e>
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
 800051a:	fb02 7900 	mla	r9, r2, r0, r7
 800051e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8000522:	fb01 2200 	mla	r2, r1, r0, r2
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
    for (int i=x; i<x+w; i++) {
 8000526:	eb00 0c02 	add.w	ip, r0, r2
 800052a:	4562      	cmp	r2, ip
 800052c:	da52      	bge.n	80005d4 <GFX_DrawChar.part.0+0x118>
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800052e:	4448      	add	r0, r9
 8000530:	f100 3bff 	add.w	fp, r0, #4294967295
	    dx = x_end - x_start;
 8000534:	fa1f fe89 	uxth.w	lr, r9
 8000538:	fa1f f08b 	uxth.w	r0, fp
 800053c:	ebae 0100 	sub.w	r1, lr, r0
	    int16_t err = dx / 2;
 8000540:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 8000544:	fa03 f381 	sxtah	r3, r3, r1
 8000548:	105b      	asrs	r3, r3, #1
	    dx = x_end - x_start;
 800054a:	b289      	uxth	r1, r1
	    int16_t err = dx / 2;
 800054c:	9304      	str	r3, [sp, #16]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800054e:	ebab 0309 	sub.w	r3, fp, r9
	    dx = x_end - x_start;
 8000552:	9105      	str	r1, [sp, #20]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000554:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
 8000558:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800055c:	e9cd e00f 	strd	lr, r0, [sp, #60]	@ 0x3c
 8000560:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000564:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 8000568:	9106      	str	r1, [sp, #24]
 800056a:	f8cd c004 	str.w	ip, [sp, #4]
 800056e:	4649      	mov	r1, r9
 8000570:	970b      	str	r7, [sp, #44]	@ 0x2c
 8000572:	4691      	mov	r9, r2
 8000574:	465a      	mov	r2, fp
	    if (steep) {
 8000576:	4291      	cmp	r1, r2
 8000578:	d13e      	bne.n	80005f8 <GFX_DrawChar.part.0+0x13c>
 800057a:	2400      	movs	r4, #0
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800057c:	9e06      	ldr	r6, [sp, #24]
 800057e:	46ca      	mov	sl, r9
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
 8000580:	468b      	mov	fp, r1
 8000582:	464d      	mov	r5, r9
 8000584:	4627      	mov	r7, r4
	    for (; x_start<=x_end; x_start++) {
 8000586:	45aa      	cmp	sl, r5
 8000588:	db19      	blt.n	80005be <GFX_DrawChar.part.0+0x102>
 800058a:	4291      	cmp	r1, r2
 800058c:	e9cd 1202 	strd	r1, r2, [sp, #8]
	        err -= dy;
 8000590:	b2b6      	uxth	r6, r6
 8000592:	d13b      	bne.n	800060c <GFX_DrawChar.part.0+0x150>
	        	GFX_DrawPixel(x_start, y_start, color);
 8000594:	b228      	sxth	r0, r5
 8000596:	4642      	mov	r2, r8
 8000598:	fa0f f18b 	sxth.w	r1, fp
 800059c:	f000 fd90 	bl	80010c0 <SSD1306_DrawPixel>
	        err -= dy;
 80005a0:	1ba2      	subs	r2, r4, r6
 80005a2:	b214      	sxth	r4, r2
	        if (err < 0) {
 80005a4:	2c00      	cmp	r4, #0
	    for (; x_start<=x_end; x_start++) {
 80005a6:	f105 0501 	add.w	r5, r5, #1
	        err -= dy;
 80005aa:	b292      	uxth	r2, r2
	        if (err < 0) {
 80005ac:	da03      	bge.n	80005b6 <GFX_DrawChar.part.0+0xfa>
	            err += dx;
 80005ae:	443a      	add	r2, r7
	            y_start += ystep;
 80005b0:	f10b 3bff 	add.w	fp, fp, #4294967295
	            err += dx;
 80005b4:	b214      	sxth	r4, r2
	    for (; x_start<=x_end; x_start++) {
 80005b6:	45aa      	cmp	sl, r5
 80005b8:	daec      	bge.n	8000594 <GFX_DrawChar.part.0+0xd8>
 80005ba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    for (int i=x; i<x+w; i++) {
 80005be:	9b01      	ldr	r3, [sp, #4]
 80005c0:	f109 0901 	add.w	r9, r9, #1
 80005c4:	4599      	cmp	r9, r3
 80005c6:	d1d6      	bne.n	8000576 <GFX_DrawChar.part.0+0xba>
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 80005c8:	4b71      	ldr	r3, [pc, #452]	@ (8000790 <GFX_DrawChar.part.0+0x2d4>)
 80005ca:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80005cc:	681c      	ldr	r4, [r3, #0]
 80005ce:	e9dd 5609 	ldrd	r5, r6, [sp, #36]	@ 0x24
 80005d2:	7823      	ldrb	r3, [r4, #0]
 80005d4:	3501      	adds	r5, #1
 80005d6:	b26d      	sxtb	r5, r5
 80005d8:	429d      	cmp	r5, r3
 80005da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80005de:	462a      	mov	r2, r5
 80005e0:	db93      	blt.n	800050a <GFX_DrawChar.part.0+0x4e>
	for(uint8_t i=0; i<font[1]; i++ )
 80005e2:	46bb      	mov	fp, r7
 80005e4:	9f07      	ldr	r7, [sp, #28]
 80005e6:	7862      	ldrb	r2, [r4, #1]
 80005e8:	1c79      	adds	r1, r7, #1
 80005ea:	b2cf      	uxtb	r7, r1
 80005ec:	4297      	cmp	r7, r2
 80005ee:	f4ff af7d 	bcc.w	80004ec <GFX_DrawChar.part.0+0x30>
}
 80005f2:	b013      	add	sp, #76	@ 0x4c
 80005f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    if (x_start > x_end) {
 80005f8:	f340 80ad 	ble.w	8000756 <GFX_DrawChar.part.0+0x29a>
	    dx = x_end - x_start;
 80005fc:	e9dd 4704 	ldrd	r4, r7, [sp, #16]
	        err -= dy;
 8000600:	e9cd 1202 	strd	r1, r2, [sp, #8]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000604:	4615      	mov	r5, r2
	    if (x_start > x_end) {
 8000606:	46cb      	mov	fp, r9
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
 8000608:	468a      	mov	sl, r1
	        err -= dy;
 800060a:	2600      	movs	r6, #0
	        	GFX_DrawPixel(y_start, x_start, color);
 800060c:	b229      	sxth	r1, r5
 800060e:	4642      	mov	r2, r8
 8000610:	fa0f f08b 	sxth.w	r0, fp
 8000614:	f000 fd54 	bl	80010c0 <SSD1306_DrawPixel>
	        err -= dy;
 8000618:	1ba2      	subs	r2, r4, r6
 800061a:	b214      	sxth	r4, r2
	        if (err < 0) {
 800061c:	2c00      	cmp	r4, #0
	    for (; x_start<=x_end; x_start++) {
 800061e:	f105 0501 	add.w	r5, r5, #1
	        err -= dy;
 8000622:	b292      	uxth	r2, r2
	        if (err < 0) {
 8000624:	da03      	bge.n	800062e <GFX_DrawChar.part.0+0x172>
	            err += dx;
 8000626:	443a      	add	r2, r7
	            y_start += ystep;
 8000628:	f10b 3bff 	add.w	fp, fp, #4294967295
	            err += dx;
 800062c:	b214      	sxth	r4, r2
	    for (; x_start<=x_end; x_start++) {
 800062e:	4555      	cmp	r5, sl
 8000630:	ddec      	ble.n	800060c <GFX_DrawChar.part.0+0x150>
 8000632:	e7c2      	b.n	80005ba <GFX_DrawChar.part.0+0xfe>
            else if(background == 0)
 8000634:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000636:	2800      	cmp	r0, #0
 8000638:	d1cc      	bne.n	80005d4 <GFX_DrawChar.part.0+0x118>
            	if(size == 1)
 800063a:	4956      	ldr	r1, [pc, #344]	@ (8000794 <GFX_DrawChar.part.0+0x2d8>)
 800063c:	f891 c000 	ldrb.w	ip, [r1]
 8000640:	f1bc 0f01 	cmp.w	ip, #1
 8000644:	f000 8083 	beq.w	800074e <GFX_DrawChar.part.0+0x292>
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background);
 8000648:	fb02 7b0c 	mla	fp, r2, ip, r7
 800064c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8000650:	fb01 220c 	mla	r2, r1, ip, r2
    for (int i=x; i<x+w; i++) {
 8000654:	eb0c 0002 	add.w	r0, ip, r2
 8000658:	4282      	cmp	r2, r0
 800065a:	dabb      	bge.n	80005d4 <GFX_DrawChar.part.0+0x118>
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800065c:	eb0c 010b 	add.w	r1, ip, fp
 8000660:	f101 39ff 	add.w	r9, r1, #4294967295
	    dx = x_end - x_start;
 8000664:	fa1f fc8b 	uxth.w	ip, fp
 8000668:	fa1f fe89 	uxth.w	lr, r9
 800066c:	ebac 040e 	sub.w	r4, ip, lr
	    int16_t err = dx / 2;
 8000670:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 8000674:	fa03 f384 	sxtah	r3, r3, r4
 8000678:	105b      	asrs	r3, r3, #1
	    dx = x_end - x_start;
 800067a:	b2a1      	uxth	r1, r4
	    int16_t err = dx / 2;
 800067c:	9303      	str	r3, [sp, #12]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800067e:	eba9 030b 	sub.w	r3, r9, fp
	    dx = x_end - x_start;
 8000682:	9104      	str	r1, [sp, #16]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000684:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000688:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800068c:	4692      	mov	sl, r2
 800068e:	970a      	str	r7, [sp, #40]	@ 0x28
 8000690:	9105      	str	r1, [sp, #20]
 8000692:	464a      	mov	r2, r9
 8000694:	9506      	str	r5, [sp, #24]
 8000696:	9609      	str	r6, [sp, #36]	@ 0x24
 8000698:	9001      	str	r0, [sp, #4]
 800069a:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800069e:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
 80006a2:	465f      	mov	r7, fp
	    if (steep) {
 80006a4:	4297      	cmp	r7, r2
 80006a6:	d12b      	bne.n	8000700 <GFX_DrawChar.part.0+0x244>
 80006a8:	2400      	movs	r4, #0
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80006aa:	9e05      	ldr	r6, [sp, #20]
 80006ac:	46d1      	mov	r9, sl
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background);
 80006ae:	46bb      	mov	fp, r7
 80006b0:	4655      	mov	r5, sl
 80006b2:	46a0      	mov	r8, r4
	    for (; x_start<=x_end; x_start++) {
 80006b4:	45a9      	cmp	r9, r5
 80006b6:	db17      	blt.n	80006e8 <GFX_DrawChar.part.0+0x22c>
 80006b8:	4297      	cmp	r7, r2
	        err -= dy;
 80006ba:	b2b6      	uxth	r6, r6
 80006bc:	9202      	str	r2, [sp, #8]
 80006be:	d128      	bne.n	8000712 <GFX_DrawChar.part.0+0x256>
	        	GFX_DrawPixel(x_start, y_start, color);
 80006c0:	b228      	sxth	r0, r5
 80006c2:	2200      	movs	r2, #0
 80006c4:	fa0f f18b 	sxth.w	r1, fp
 80006c8:	f000 fcfa 	bl	80010c0 <SSD1306_DrawPixel>
	        err -= dy;
 80006cc:	1ba2      	subs	r2, r4, r6
 80006ce:	b214      	sxth	r4, r2
	        if (err < 0) {
 80006d0:	2c00      	cmp	r4, #0
	    for (; x_start<=x_end; x_start++) {
 80006d2:	f105 0501 	add.w	r5, r5, #1
	        err -= dy;
 80006d6:	b292      	uxth	r2, r2
	        if (err < 0) {
 80006d8:	da03      	bge.n	80006e2 <GFX_DrawChar.part.0+0x226>
	            err += dx;
 80006da:	4442      	add	r2, r8
	            y_start += ystep;
 80006dc:	f10b 3bff 	add.w	fp, fp, #4294967295
	            err += dx;
 80006e0:	b214      	sxth	r4, r2
	    for (; x_start<=x_end; x_start++) {
 80006e2:	45a9      	cmp	r9, r5
 80006e4:	daec      	bge.n	80006c0 <GFX_DrawChar.part.0+0x204>
 80006e6:	9a02      	ldr	r2, [sp, #8]
    for (int i=x; i<x+w; i++) {
 80006e8:	9b01      	ldr	r3, [sp, #4]
 80006ea:	f10a 0a01 	add.w	sl, sl, #1
 80006ee:	459a      	cmp	sl, r3
 80006f0:	d1d8      	bne.n	80006a4 <GFX_DrawChar.part.0+0x1e8>
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 80006f2:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <GFX_DrawChar.part.0+0x2d4>)
 80006f4:	9d06      	ldr	r5, [sp, #24]
 80006f6:	681c      	ldr	r4, [r3, #0]
 80006f8:	e9dd 6709 	ldrd	r6, r7, [sp, #36]	@ 0x24
 80006fc:	7823      	ldrb	r3, [r4, #0]
 80006fe:	e769      	b.n	80005d4 <GFX_DrawChar.part.0+0x118>
	    if (x_start > x_end) {
 8000700:	dd37      	ble.n	8000772 <GFX_DrawChar.part.0+0x2b6>
	    int16_t err = dx / 2;
 8000702:	9c03      	ldr	r4, [sp, #12]
	    dx = x_end - x_start;
 8000704:	f8dd 8010 	ldr.w	r8, [sp, #16]
	        err -= dy;
 8000708:	9202      	str	r2, [sp, #8]
	    if (x_start > x_end) {
 800070a:	46d3      	mov	fp, sl
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800070c:	4615      	mov	r5, r2
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background);
 800070e:	46b9      	mov	r9, r7
	        err -= dy;
 8000710:	2600      	movs	r6, #0
	        	GFX_DrawPixel(y_start, x_start, color);
 8000712:	b229      	sxth	r1, r5
 8000714:	2200      	movs	r2, #0
 8000716:	fa0f f08b 	sxth.w	r0, fp
 800071a:	f000 fcd1 	bl	80010c0 <SSD1306_DrawPixel>
	        err -= dy;
 800071e:	1ba2      	subs	r2, r4, r6
 8000720:	b214      	sxth	r4, r2
	        if (err < 0) {
 8000722:	2c00      	cmp	r4, #0
	    for (; x_start<=x_end; x_start++) {
 8000724:	f105 0501 	add.w	r5, r5, #1
	        err -= dy;
 8000728:	b292      	uxth	r2, r2
	        if (err < 0) {
 800072a:	da03      	bge.n	8000734 <GFX_DrawChar.part.0+0x278>
	            err += dx;
 800072c:	4442      	add	r2, r8
	            y_start += ystep;
 800072e:	f10b 3bff 	add.w	fp, fp, #4294967295
	            err += dx;
 8000732:	b214      	sxth	r4, r2
	    for (; x_start<=x_end; x_start++) {
 8000734:	454d      	cmp	r5, r9
 8000736:	ddec      	ble.n	8000712 <GFX_DrawChar.part.0+0x256>
 8000738:	e7d5      	b.n	80006e6 <GFX_DrawChar.part.0+0x22a>
            		GFX_DrawPixel(x+i, y+j, color);
 800073a:	19e9      	adds	r1, r5, r7
 800073c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800073e:	b209      	sxth	r1, r1
					GFX_DrawPixel(x+i, y+j, background);
 8000740:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000742:	f000 fcbd 	bl	80010c0 <SSD1306_DrawPixel>
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <GFX_DrawChar.part.0+0x2d4>)
 8000748:	681c      	ldr	r4, [r3, #0]
 800074a:	7823      	ldrb	r3, [r4, #0]
 800074c:	e742      	b.n	80005d4 <GFX_DrawChar.part.0+0x118>
					GFX_DrawPixel(x+i, y+j, background);
 800074e:	19e9      	adds	r1, r5, r7
 8000750:	b209      	sxth	r1, r1
 8000752:	4602      	mov	r2, r0
 8000754:	e7f4      	b.n	8000740 <GFX_DrawChar.part.0+0x284>
	    dx = x_end - x_start;
 8000756:	e9dd 030f 	ldrd	r0, r3, [sp, #60]	@ 0x3c
 800075a:	1a18      	subs	r0, r3, r0
	    int16_t err = dx / 2;
 800075c:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 8000760:	fa04 f480 	sxtah	r4, r4, r0
	    dx = x_end - x_start;
 8000764:	b287      	uxth	r7, r0
	    int16_t err = dx / 2;
 8000766:	1064      	asrs	r4, r4, #1
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000768:	4692      	mov	sl, r2
	    int16_t err = dx / 2;
 800076a:	46cb      	mov	fp, r9
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
 800076c:	460d      	mov	r5, r1
	    int16_t err = dx / 2;
 800076e:	2600      	movs	r6, #0
 8000770:	e709      	b.n	8000586 <GFX_DrawChar.part.0+0xca>
	    dx = x_end - x_start;
 8000772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000774:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8000776:	1a58      	subs	r0, r3, r1
	    int16_t err = dx / 2;
 8000778:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 800077c:	fa04 f480 	sxtah	r4, r4, r0
	    dx = x_end - x_start;
 8000780:	fa1f f880 	uxth.w	r8, r0
	    int16_t err = dx / 2;
 8000784:	1064      	asrs	r4, r4, #1
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000786:	4691      	mov	r9, r2
	    int16_t err = dx / 2;
 8000788:	46d3      	mov	fp, sl
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background);
 800078a:	463d      	mov	r5, r7
	    int16_t err = dx / 2;
 800078c:	2600      	movs	r6, #0
 800078e:	e791      	b.n	80006b4 <GFX_DrawChar.part.0+0x1f8>
 8000790:	2000007c 	.word	0x2000007c
 8000794:	20000000 	.word	0x20000000

08000798 <GFX_SetFont>:
	font = font_t;
 8000798:	4b01      	ldr	r3, [pc, #4]	@ (80007a0 <GFX_SetFont+0x8>)
 800079a:	6018      	str	r0, [r3, #0]
}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	2000007c 	.word	0x2000007c

080007a4 <GFX_SetFontSize>:
	if(size_t != 0)
 80007a4:	b108      	cbz	r0, 80007aa <GFX_SetFontSize+0x6>
		size = size_t;
 80007a6:	4b01      	ldr	r3, [pc, #4]	@ (80007ac <GFX_SetFontSize+0x8>)
 80007a8:	7018      	strb	r0, [r3, #0]
}
 80007aa:	4770      	bx	lr
 80007ac:	20000000 	.word	0x20000000

080007b0 <GFX_DrawString>:
{
 80007b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	znak = *str;
 80007b4:	4690      	mov	r8, r2
{
 80007b6:	b085      	sub	sp, #20
	znak = *str;
 80007b8:	f818 2b01 	ldrb.w	r2, [r8], #1
{
 80007bc:	f89d a038 	ldrb.w	sl, [sp, #56]	@ 0x38
	while(*str++)
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	d03b      	beq.n	800083c <GFX_DrawString+0x8c>
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80007c4:	4657      	mov	r7, sl
 80007c6:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80007ca:	4e1e      	ldr	r6, [pc, #120]	@ (8000844 <GFX_DrawString+0x94>)
 80007cc:	4d1e      	ldr	r5, [pc, #120]	@ (8000848 <GFX_DrawString+0x98>)
 80007ce:	fa1f f981 	uxth.w	r9, r1
 80007d2:	4682      	mov	sl, r0
 80007d4:	e002      	b.n	80007dc <GFX_DrawString+0x2c>
		znak = *str;
 80007d6:	f818 2b01 	ldrb.w	r2, [r8], #1
	while(*str++)
 80007da:	b37a      	cbz	r2, 800083c <GFX_DrawString+0x8c>
	if(chr > 0x7E) return; // chr > '~'
 80007dc:	2a7e      	cmp	r2, #126	@ 0x7e
 80007de:	d805      	bhi.n	80007ec <GFX_DrawString+0x3c>
 80007e0:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80007e4:	9700      	str	r7, [sp, #0]
 80007e6:	4650      	mov	r0, sl
 80007e8:	f7ff fe68 	bl	80004bc <GFX_DrawChar.part.0>
		x_tmp += ((uint8_t)font[1] * size) + 1;
 80007ec:	6831      	ldr	r1, [r6, #0]
 80007ee:	782a      	ldrb	r2, [r5, #0]
 80007f0:	784b      	ldrb	r3, [r1, #1]
 80007f2:	fb03 a302 	mla	r3, r3, r2, sl
 80007f6:	f103 0a01 	add.w	sl, r3, #1
		if(background == 0)
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	d1eb      	bne.n	80007d6 <GFX_DrawString+0x26>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80007fe:	780b      	ldrb	r3, [r1, #0]
 8000800:	fb13 f302 	smulbb	r3, r3, r2
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0e6      	beq.n	80007d6 <GFX_DrawString+0x26>
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8000808:	f10a 34ff 	add.w	r4, sl, #4294967295
 800080c:	b224      	sxth	r4, r4
			for(uint8_t i=0; i<(font[0]*size); i++)
 800080e:	46bb      	mov	fp, r7
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8000810:	eb0b 0109 	add.w	r1, fp, r9
 8000814:	2200      	movs	r2, #0
 8000816:	b209      	sxth	r1, r1
 8000818:	4620      	mov	r0, r4
 800081a:	f000 fc51 	bl	80010c0 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800081e:	6833      	ldr	r3, [r6, #0]
 8000820:	782a      	ldrb	r2, [r5, #0]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	f10b 0b01 	add.w	fp, fp, #1
 8000828:	fa5f fb8b 	uxtb.w	fp, fp
 800082c:	fb13 f302 	smulbb	r3, r3, r2
 8000830:	459b      	cmp	fp, r3
 8000832:	dbed      	blt.n	8000810 <GFX_DrawString+0x60>
		znak = *str;
 8000834:	f818 2b01 	ldrb.w	r2, [r8], #1
	while(*str++)
 8000838:	2a00      	cmp	r2, #0
 800083a:	d1cf      	bne.n	80007dc <GFX_DrawString+0x2c>
}
 800083c:	b005      	add	sp, #20
 800083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000842:	bf00      	nop
 8000844:	2000007c 	.word	0x2000007c
 8000848:	20000000 	.word	0x20000000

0800084c <SSD1306_SetOLED>:
#endif

struct OLEDdefinition *currentOLED;

void SSD1306_SetOLED(struct OLEDdefinition *in){
	currentOLED = in;
 800084c:	4b01      	ldr	r3, [pc, #4]	@ (8000854 <SSD1306_SetOLED+0x8>)
 800084e:	6018      	str	r0, [r3, #0]
}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000080 	.word	0x20000080

08000858 <SSD1306_ResetOLEDS>:
	HAL_Delay(5);
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_SET);
}

void SSD1306_ResetOLEDS(void)
{
 8000858:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000862:	f001 fdc7 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000866:	2005      	movs	r0, #5
 8000868:	f001 fb08 	bl	8001e7c <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_SET);
}
 800086c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2120      	movs	r1, #32
 8000874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000878:	f001 bdbc 	b.w	80023f4 <HAL_GPIO_WritePin>

0800087c <SSD1306_RotateDisplay>:
{
	SSD1306_Command(Invert ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
}

void SSD1306_RotateDisplay(uint8_t Rotate)
{
 800087c:	b570      	push	{r4, r5, r6, lr}
	if(Rotate > 1) Rotate = 1;
 800087e:	2801      	cmp	r0, #1
 8000880:	bf28      	it	cs
 8000882:	2001      	movcs	r0, #1
{
 8000884:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000886:	4d24      	ldr	r5, [pc, #144]	@ (8000918 <SSD1306_RotateDisplay+0x9c>)
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000888:	4e24      	ldr	r6, [pc, #144]	@ (800091c <SSD1306_RotateDisplay+0xa0>)
	if(Rotate > 1) Rotate = 1;
 800088a:	4604      	mov	r4, r0

	SSD1306_Command(0xA0 | (0x01 & Rotate));  // Set Segment Re-Map Default
 800088c:	f064 035f 	orn	r3, r4, #95	@ 0x5f
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2110      	movs	r1, #16
 8000894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000898:	f88d 3007 	strb.w	r3, [sp, #7]
 800089c:	f001 fdaa 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80008a0:	682b      	ldr	r3, [r5, #0]
 80008a2:	2200      	movs	r2, #0
 80008a4:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80008a8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80008ac:	f001 fda2 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 80008b0:	f10d 0107 	add.w	r1, sp, #7
 80008b4:	6830      	ldr	r0, [r6, #0]
 80008b6:	230a      	movs	r3, #10
 80008b8:	2201      	movs	r2, #1
 80008ba:	f002 fdf1 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	2201      	movs	r2, #1
 80008c2:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80008c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
							// 0xA0 (0x00) => column Address 0 mapped to 127
                			// 0xA1 (0x01) => Column Address 127 mapped to 0

	SSD1306_Command(0xC0 | (0x08 & (Rotate<<3)));  // Set COM Output Scan Direction
 80008ca:	00e4      	lsls	r4, r4, #3
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 80008cc:	f001 fd92 	bl	80023f4 <HAL_GPIO_WritePin>
	SSD1306_Command(0xC0 | (0x08 & (Rotate<<3)));  // Set COM Output Scan Direction
 80008d0:	f064 043f 	orn	r4, r4, #63	@ 0x3f
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2110      	movs	r1, #16
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008dc:	f88d 4007 	strb.w	r4, [sp, #7]
 80008e0:	f001 fd88 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80008e4:	682b      	ldr	r3, [r5, #0]
 80008e6:	2200      	movs	r2, #0
 80008e8:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80008ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80008f0:	f001 fd80 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 80008f4:	f10d 0107 	add.w	r1, sp, #7
 80008f8:	6830      	ldr	r0, [r6, #0]
 80008fa:	2201      	movs	r2, #1
 80008fc:	230a      	movs	r3, #10
 80008fe:	f002 fdcf 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	2201      	movs	r2, #1
 8000906:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800090a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800090e:	f001 fd71 	bl	80023f4 <HAL_GPIO_WritePin>
							// 0xC0	(0x00) => normal mode (RESET) Scan from COM0 to COM[N-1];Where N is the Multiplex ratio.
							// 0xC8	(0xC8) => remapped mode. Scan from COM[N-1] to COM0;;Where N is the Multiplex ratio.
}
 8000912:	b002      	add	sp, #8
 8000914:	bd70      	pop	{r4, r5, r6, pc}
 8000916:	bf00      	nop
 8000918:	20000080 	.word	0x20000080
 800091c:	20000084 	.word	0x20000084

08000920 <SSD1306_Init>:

//
// Initialization
//
void SSD1306_Init(void)
{
 8000920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000924:	4de6      	ldr	r5, [pc, #920]	@ (8000cc0 <SSD1306_Init+0x3a0>)
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000926:	4ee7      	ldr	r6, [pc, #924]	@ (8000cc4 <SSD1306_Init+0x3a4>)
{
 8000928:	b082      	sub	sp, #8
 800092a:	23ae      	movs	r3, #174	@ 0xae
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2110      	movs	r1, #16
 8000930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000934:	f88d 3007 	strb.w	r3, [sp, #7]
 8000938:	f001 fd5c 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 800093c:	682b      	ldr	r3, [r5, #0]
 800093e:	2200      	movs	r2, #0
 8000940:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000944:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000948:	f001 fd54 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 800094c:	f10d 0107 	add.w	r1, sp, #7
 8000950:	6830      	ldr	r0, [r6, #0]
 8000952:	230a      	movs	r3, #10
 8000954:	2201      	movs	r2, #1
 8000956:	f002 fda3 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 800095a:	682b      	ldr	r3, [r5, #0]
 800095c:	2400      	movs	r4, #0
 800095e:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000962:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000966:	2201      	movs	r2, #1
 8000968:	f001 fd44 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 800096c:	4622      	mov	r2, r4
 800096e:	2110      	movs	r1, #16
 8000970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000974:	f88d 4007 	strb.w	r4, [sp, #7]
 8000978:	f001 fd3c 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 800097c:	682b      	ldr	r3, [r5, #0]
 800097e:	4622      	mov	r2, r4
 8000980:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000984:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000988:	f001 fd34 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 800098c:	f10d 0107 	add.w	r1, sp, #7
 8000990:	6830      	ldr	r0, [r6, #0]
 8000992:	230a      	movs	r3, #10
 8000994:	2201      	movs	r2, #1
 8000996:	f002 fd83 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 800099a:	682b      	ldr	r3, [r5, #0]
 800099c:	2710      	movs	r7, #16
 800099e:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80009a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80009a6:	2201      	movs	r2, #1
 80009a8:	f001 fd24 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 80009ac:	4622      	mov	r2, r4
 80009ae:	4639      	mov	r1, r7
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b4:	f88d 7007 	strb.w	r7, [sp, #7]
 80009b8:	f001 fd1c 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	4622      	mov	r2, r4
 80009c0:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80009c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80009c8:	f001 fd14 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 80009cc:	f10d 0107 	add.w	r1, sp, #7
 80009d0:	6830      	ldr	r0, [r6, #0]
 80009d2:	230a      	movs	r3, #10
 80009d4:	2201      	movs	r2, #1
 80009d6:	f002 fd63 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 80009da:	682b      	ldr	r3, [r5, #0]
 80009dc:	2201      	movs	r2, #1
 80009de:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80009e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80009e6:	f001 fd05 	bl	80023f4 <HAL_GPIO_WritePin>
	SSD1306_Command(0xAE);  // Display Off

	SSD1306_Command(0x00);
	SSD1306_Command(0x10);
	SSD1306_Command(0x40);
 80009ea:	f04f 0840 	mov.w	r8, #64	@ 0x40
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 80009ee:	4622      	mov	r2, r4
 80009f0:	4639      	mov	r1, r7
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f6:	f88d 8007 	strb.w	r8, [sp, #7]
 80009fa:	f001 fcfb 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80009fe:	682b      	ldr	r3, [r5, #0]
 8000a00:	4622      	mov	r2, r4
 8000a02:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000a06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000a0a:	f001 fcf3 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000a0e:	f10d 0107 	add.w	r1, sp, #7
 8000a12:	6830      	ldr	r0, [r6, #0]
 8000a14:	230a      	movs	r3, #10
 8000a16:	2201      	movs	r2, #1
 8000a18:	f002 fd42 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000a24:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000a28:	f001 fce4 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000a2c:	4622      	mov	r2, r4
 8000a2e:	4639      	mov	r1, r7
 8000a30:	2320      	movs	r3, #32
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a36:	f88d 3007 	strb.w	r3, [sp, #7]
 8000a3a:	f001 fcdb 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000a3e:	682b      	ldr	r3, [r5, #0]
 8000a40:	4622      	mov	r2, r4
 8000a42:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000a46:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000a4a:	f001 fcd3 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000a4e:	f10d 0107 	add.w	r1, sp, #7
 8000a52:	6830      	ldr	r0, [r6, #0]
 8000a54:	230a      	movs	r3, #10
 8000a56:	2201      	movs	r2, #1
 8000a58:	f002 fd22 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000a64:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000a68:	f001 fcc4 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000a6c:	4622      	mov	r2, r4
 8000a6e:	4639      	mov	r1, r7
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a74:	f88d 4007 	strb.w	r4, [sp, #7]
 8000a78:	f001 fcbc 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	4622      	mov	r2, r4
 8000a80:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000a84:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000a88:	f001 fcb4 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000a8c:	f10d 0107 	add.w	r1, sp, #7
 8000a90:	6830      	ldr	r0, [r6, #0]
 8000a92:	230a      	movs	r3, #10
 8000a94:	2201      	movs	r2, #1
 8000a96:	f002 fd03 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000a9a:	682b      	ldr	r3, [r5, #0]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000aa2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000aa6:	f001 fca5 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000aaa:	4622      	mov	r2, r4
 8000aac:	4639      	mov	r1, r7
 8000aae:	2381      	movs	r3, #129	@ 0x81
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab4:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ab8:	f001 fc9c 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000abc:	682b      	ldr	r3, [r5, #0]
 8000abe:	4622      	mov	r2, r4
 8000ac0:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ac4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000ac8:	f001 fc94 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000acc:	f10d 0107 	add.w	r1, sp, #7
 8000ad0:	6830      	ldr	r0, [r6, #0]
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f002 fce3 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000ada:	682b      	ldr	r3, [r5, #0]
 8000adc:	2201      	movs	r2, #1
 8000ade:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ae2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000ae6:	f001 fc85 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000aea:	4622      	mov	r2, r4
 8000aec:	4639      	mov	r1, r7
 8000aee:	23ff      	movs	r3, #255	@ 0xff
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f88d 3007 	strb.w	r3, [sp, #7]
 8000af8:	f001 fc7c 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000afc:	682b      	ldr	r3, [r5, #0]
 8000afe:	4622      	mov	r2, r4
 8000b00:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000b04:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000b08:	f001 fc74 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000b0c:	f10d 0107 	add.w	r1, sp, #7
 8000b10:	6830      	ldr	r0, [r6, #0]
 8000b12:	230a      	movs	r3, #10
 8000b14:	2201      	movs	r2, #1
 8000b16:	f002 fcc3 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000b1a:	682b      	ldr	r3, [r5, #0]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000b22:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000b26:	f001 fc65 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000b2a:	4622      	mov	r2, r4
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	23a1      	movs	r3, #161	@ 0xa1
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b34:	f88d 3007 	strb.w	r3, [sp, #7]
 8000b38:	f001 fc5c 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000b3c:	682b      	ldr	r3, [r5, #0]
 8000b3e:	4622      	mov	r2, r4
 8000b40:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000b44:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000b48:	f001 fc54 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000b4c:	f10d 0107 	add.w	r1, sp, #7
 8000b50:	6830      	ldr	r0, [r6, #0]
 8000b52:	230a      	movs	r3, #10
 8000b54:	2201      	movs	r2, #1
 8000b56:	f002 fca3 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000b5a:	682b      	ldr	r3, [r5, #0]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000b62:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000b66:	f001 fc45 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000b6a:	4622      	mov	r2, r4
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	23c8      	movs	r3, #200	@ 0xc8
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b74:	f88d 3007 	strb.w	r3, [sp, #7]
 8000b78:	f001 fc3c 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000b7c:	682b      	ldr	r3, [r5, #0]
 8000b7e:	4622      	mov	r2, r4
 8000b80:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000b84:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000b88:	f001 fc34 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000b8c:	f10d 0107 	add.w	r1, sp, #7
 8000b90:	6830      	ldr	r0, [r6, #0]
 8000b92:	230a      	movs	r3, #10
 8000b94:	2201      	movs	r2, #1
 8000b96:	f002 fc83 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000b9a:	682b      	ldr	r3, [r5, #0]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ba2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000ba6:	f001 fc25 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000baa:	4622      	mov	r2, r4
 8000bac:	4639      	mov	r1, r7
 8000bae:	23a6      	movs	r3, #166	@ 0xa6
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb4:	f88d 3007 	strb.w	r3, [sp, #7]
 8000bb8:	f001 fc1c 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000bbc:	682b      	ldr	r3, [r5, #0]
 8000bbe:	4622      	mov	r2, r4
 8000bc0:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000bc4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000bc8:	f001 fc14 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000bcc:	f10d 0107 	add.w	r1, sp, #7
 8000bd0:	6830      	ldr	r0, [r6, #0]
 8000bd2:	230a      	movs	r3, #10
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f002 fc63 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000bda:	682b      	ldr	r3, [r5, #0]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000be2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000be6:	f001 fc05 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000bea:	4622      	mov	r2, r4
 8000bec:	4639      	mov	r1, r7
 8000bee:	23a8      	movs	r3, #168	@ 0xa8
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf4:	f88d 3007 	strb.w	r3, [sp, #7]
 8000bf8:	f001 fbfc 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	4622      	mov	r2, r4
 8000c00:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000c04:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000c08:	f001 fbf4 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000c0c:	f10d 0107 	add.w	r1, sp, #7
 8000c10:	6830      	ldr	r0, [r6, #0]
 8000c12:	230a      	movs	r3, #10
 8000c14:	2201      	movs	r2, #1
 8000c16:	f002 fc43 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000c1a:	682b      	ldr	r3, [r5, #0]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000c22:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000c26:	f001 fbe5 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000c2a:	4622      	mov	r2, r4
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	233f      	movs	r3, #63	@ 0x3f
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c34:	f88d 3007 	strb.w	r3, [sp, #7]
 8000c38:	f001 fbdc 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000c3c:	682b      	ldr	r3, [r5, #0]
 8000c3e:	4622      	mov	r2, r4
 8000c40:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000c44:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000c48:	f001 fbd4 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000c4c:	f10d 0107 	add.w	r1, sp, #7
 8000c50:	6830      	ldr	r0, [r6, #0]
 8000c52:	230a      	movs	r3, #10
 8000c54:	2201      	movs	r2, #1
 8000c56:	f002 fc23 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000c62:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000c66:	f001 fbc5 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000c6a:	4622      	mov	r2, r4
 8000c6c:	4639      	mov	r1, r7
 8000c6e:	23d3      	movs	r3, #211	@ 0xd3
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c74:	f88d 3007 	strb.w	r3, [sp, #7]
 8000c78:	f001 fbbc 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000c7c:	682b      	ldr	r3, [r5, #0]
 8000c7e:	4622      	mov	r2, r4
 8000c80:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000c84:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000c88:	f001 fbb4 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000c8c:	f10d 0107 	add.w	r1, sp, #7
 8000c90:	6830      	ldr	r0, [r6, #0]
 8000c92:	230a      	movs	r3, #10
 8000c94:	2201      	movs	r2, #1
 8000c96:	f002 fc03 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000c9a:	682b      	ldr	r3, [r5, #0]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ca2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000ca6:	f001 fba5 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000caa:	4622      	mov	r2, r4
 8000cac:	4639      	mov	r1, r7
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb2:	f88d 4007 	strb.w	r4, [sp, #7]
 8000cb6:	f001 fb9d 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000cba:	682b      	ldr	r3, [r5, #0]
 8000cbc:	4622      	mov	r2, r4
 8000cbe:	e003      	b.n	8000cc8 <SSD1306_Init+0x3a8>
 8000cc0:	20000080 	.word	0x20000080
 8000cc4:	20000084 	.word	0x20000084
 8000cc8:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ccc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000cd0:	f001 fb90 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000cd4:	f10d 0107 	add.w	r1, sp, #7
 8000cd8:	6830      	ldr	r0, [r6, #0]
 8000cda:	230a      	movs	r3, #10
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f002 fbdf 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000ce2:	682b      	ldr	r3, [r5, #0]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000cea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000cee:	f001 fb81 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	23d5      	movs	r3, #213	@ 0xd5
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfc:	f88d 3007 	strb.w	r3, [sp, #7]
 8000d00:	f001 fb78 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000d04:	682b      	ldr	r3, [r5, #0]
 8000d06:	4622      	mov	r2, r4
 8000d08:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000d0c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000d10:	f001 fb70 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000d14:	f10d 0107 	add.w	r1, sp, #7
 8000d18:	6830      	ldr	r0, [r6, #0]
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f002 fbbf 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000d22:	682b      	ldr	r3, [r5, #0]
 8000d24:	2201      	movs	r2, #1
 8000d26:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000d2a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000d2e:	f001 fb61 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000d32:	4622      	mov	r2, r4
 8000d34:	4639      	mov	r1, r7
 8000d36:	2380      	movs	r3, #128	@ 0x80
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8000d40:	f001 fb58 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000d44:	682b      	ldr	r3, [r5, #0]
 8000d46:	4622      	mov	r2, r4
 8000d48:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000d4c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000d50:	f001 fb50 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000d54:	f10d 0107 	add.w	r1, sp, #7
 8000d58:	6830      	ldr	r0, [r6, #0]
 8000d5a:	230a      	movs	r3, #10
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f002 fb9f 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000d62:	682b      	ldr	r3, [r5, #0]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000d6a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000d6e:	f001 fb41 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000d72:	4622      	mov	r2, r4
 8000d74:	4639      	mov	r1, r7
 8000d76:	23d9      	movs	r3, #217	@ 0xd9
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8000d80:	f001 fb38 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	4622      	mov	r2, r4
 8000d88:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000d8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000d90:	f001 fb30 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000d94:	f10d 0107 	add.w	r1, sp, #7
 8000d98:	6830      	ldr	r0, [r6, #0]
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f002 fb7f 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000da2:	682b      	ldr	r3, [r5, #0]
 8000da4:	2201      	movs	r2, #1
 8000da6:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000daa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000dae:	f001 fb21 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000db2:	4622      	mov	r2, r4
 8000db4:	4639      	mov	r1, r7
 8000db6:	2322      	movs	r3, #34	@ 0x22
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbc:	f88d 3007 	strb.w	r3, [sp, #7]
 8000dc0:	f001 fb18 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	4622      	mov	r2, r4
 8000dc8:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000dcc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000dd0:	f001 fb10 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000dd4:	f10d 0107 	add.w	r1, sp, #7
 8000dd8:	6830      	ldr	r0, [r6, #0]
 8000dda:	230a      	movs	r3, #10
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f002 fb5f 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000de2:	682b      	ldr	r3, [r5, #0]
 8000de4:	2201      	movs	r2, #1
 8000de6:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000dea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000dee:	f001 fb01 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000df2:	4622      	mov	r2, r4
 8000df4:	4639      	mov	r1, r7
 8000df6:	23da      	movs	r3, #218	@ 0xda
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfc:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e00:	f001 faf8 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000e04:	682b      	ldr	r3, [r5, #0]
 8000e06:	4622      	mov	r2, r4
 8000e08:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000e0c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000e10:	f001 faf0 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000e14:	f10d 0107 	add.w	r1, sp, #7
 8000e18:	6830      	ldr	r0, [r6, #0]
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f002 fb3f 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000e22:	682b      	ldr	r3, [r5, #0]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000e2a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000e2e:	f001 fae1 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000e32:	4622      	mov	r2, r4
 8000e34:	4639      	mov	r1, r7
 8000e36:	2312      	movs	r3, #18
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e40:	f001 fad8 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	4622      	mov	r2, r4
 8000e48:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000e4c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000e50:	f001 fad0 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000e54:	f10d 0107 	add.w	r1, sp, #7
 8000e58:	6830      	ldr	r0, [r6, #0]
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f002 fb1f 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000e62:	682b      	ldr	r3, [r5, #0]
 8000e64:	2201      	movs	r2, #1
 8000e66:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000e6a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000e6e:	f001 fac1 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000e72:	4622      	mov	r2, r4
 8000e74:	4639      	mov	r1, r7
 8000e76:	23db      	movs	r3, #219	@ 0xdb
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e80:	f001 fab8 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000e84:	682b      	ldr	r3, [r5, #0]
 8000e86:	4622      	mov	r2, r4
 8000e88:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000e8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000e90:	f001 fab0 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000e94:	f10d 0107 	add.w	r1, sp, #7
 8000e98:	6830      	ldr	r0, [r6, #0]
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f002 faff 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000ea2:	682b      	ldr	r3, [r5, #0]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000eaa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000eae:	f001 faa1 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000eb2:	4622      	mov	r2, r4
 8000eb4:	4639      	mov	r1, r7
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eba:	f88d 8007 	strb.w	r8, [sp, #7]
 8000ebe:	f001 fa99 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000ec2:	682b      	ldr	r3, [r5, #0]
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000eca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000ece:	f001 fa91 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000ed2:	f10d 0107 	add.w	r1, sp, #7
 8000ed6:	6830      	ldr	r0, [r6, #0]
 8000ed8:	230a      	movs	r3, #10
 8000eda:	2201      	movs	r2, #1
 8000edc:	f002 fae0 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ee8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000eec:	f001 fa82 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000ef0:	4622      	mov	r2, r4
 8000ef2:	4639      	mov	r1, r7
 8000ef4:	238d      	movs	r3, #141	@ 0x8d
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efa:	f88d 3007 	strb.w	r3, [sp, #7]
 8000efe:	f001 fa79 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000f02:	682b      	ldr	r3, [r5, #0]
 8000f04:	4622      	mov	r2, r4
 8000f06:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000f0a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000f0e:	f001 fa71 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000f12:	f10d 0107 	add.w	r1, sp, #7
 8000f16:	6830      	ldr	r0, [r6, #0]
 8000f18:	230a      	movs	r3, #10
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f002 fac0 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000f28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000f2c:	f001 fa62 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000f30:	4622      	mov	r2, r4
 8000f32:	4639      	mov	r1, r7
 8000f34:	2314      	movs	r3, #20
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3a:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f3e:	f001 fa59 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000f42:	682b      	ldr	r3, [r5, #0]
 8000f44:	4622      	mov	r2, r4
 8000f46:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000f4a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000f4e:	f001 fa51 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000f52:	f10d 0107 	add.w	r1, sp, #7
 8000f56:	6830      	ldr	r0, [r6, #0]
 8000f58:	230a      	movs	r3, #10
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f002 faa0 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000f68:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000f6c:	f001 fa42 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000f70:	4622      	mov	r2, r4
 8000f72:	4639      	mov	r1, r7
 8000f74:	23a4      	movs	r3, #164	@ 0xa4
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7a:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f7e:	f001 fa39 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000f82:	682b      	ldr	r3, [r5, #0]
 8000f84:	4622      	mov	r2, r4
 8000f86:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000f8a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000f8e:	f001 fa31 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000f92:	f10d 0107 	add.w	r1, sp, #7
 8000f96:	6830      	ldr	r0, [r6, #0]
 8000f98:	230a      	movs	r3, #10
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f002 fa80 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000fa8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000fac:	f001 fa22 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000fb0:	4622      	mov	r2, r4
 8000fb2:	4639      	mov	r1, r7
 8000fb4:	232e      	movs	r3, #46	@ 0x2e
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fba:	f88d 3007 	strb.w	r3, [sp, #7]
 8000fbe:	f001 fa19 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000fc2:	682b      	ldr	r3, [r5, #0]
 8000fc4:	4622      	mov	r2, r4
 8000fc6:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000fca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000fce:	f001 fa11 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000fd2:	f10d 0107 	add.w	r1, sp, #7
 8000fd6:	6830      	ldr	r0, [r6, #0]
 8000fd8:	230a      	movs	r3, #10
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f002 fa60 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000fe0:	682b      	ldr	r3, [r5, #0]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000fe8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000fec:	f001 fa02 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	4639      	mov	r1, r7
 8000ff4:	2323      	movs	r3, #35	@ 0x23
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffa:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ffe:	f001 f9f9 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8001002:	682b      	ldr	r3, [r5, #0]
 8001004:	4622      	mov	r2, r4
 8001006:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800100a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800100e:	f001 f9f1 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8001012:	f10d 0107 	add.w	r1, sp, #7
 8001016:	6830      	ldr	r0, [r6, #0]
 8001018:	230a      	movs	r3, #10
 800101a:	2201      	movs	r2, #1
 800101c:	f002 fa40 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8001020:	682b      	ldr	r3, [r5, #0]
 8001022:	2201      	movs	r2, #1
 8001024:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001028:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800102c:	f001 f9e2 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8001030:	4622      	mov	r2, r4
 8001032:	4639      	mov	r1, r7
 8001034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001038:	f88d 4007 	strb.w	r4, [sp, #7]
 800103c:	f001 f9da 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	4622      	mov	r2, r4
 8001044:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001048:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800104c:	f001 f9d2 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8001050:	f10d 0107 	add.w	r1, sp, #7
 8001054:	6830      	ldr	r0, [r6, #0]
 8001056:	230a      	movs	r3, #10
 8001058:	2201      	movs	r2, #1
 800105a:	f002 fa21 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 800105e:	682b      	ldr	r3, [r5, #0]
 8001060:	2201      	movs	r2, #1
 8001062:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001066:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800106a:	f001 f9c3 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 800106e:	4639      	mov	r1, r7
 8001070:	4622      	mov	r2, r4
 8001072:	23af      	movs	r3, #175	@ 0xaf
 8001074:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001078:	f88d 3007 	strb.w	r3, [sp, #7]
 800107c:	f001 f9ba 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8001080:	682b      	ldr	r3, [r5, #0]
 8001082:	4622      	mov	r2, r4
 8001084:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001088:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800108c:	f001 f9b2 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8001090:	f10d 0107 	add.w	r1, sp, #7
 8001094:	6830      	ldr	r0, [r6, #0]
 8001096:	2201      	movs	r2, #1
 8001098:	230a      	movs	r3, #10
 800109a:	f002 fa01 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 800109e:	682b      	ldr	r3, [r5, #0]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80010a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80010aa:	f001 f9a3 	bl	80023f4 <HAL_GPIO_WritePin>
#if ADVANCED_GRAPHIC_COMMANDS == 1
	SSD1306_StopFadeOutOrBlinking();
#endif

	SSD1306_DisplayON(1);
}
 80010ae:	b002      	add	sp, #8
 80010b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010b4 <SSD1306_SpiInit>:
#endif

#ifdef SSD1306_SPI_CONTROL
void SSD1306_SpiInit(SPI_HandleTypeDef *spi)
{
	ssd1306_spi = spi;
 80010b4:	4b01      	ldr	r3, [pc, #4]	@ (80010bc <SSD1306_SpiInit+0x8>)
 80010b6:	6018      	str	r0, [r3, #0]

#if defined(SSD1306_RESET_USE)
	//SSD1306_Reset();
#endif
	SSD1306_Init();
 80010b8:	f7ff bc32 	b.w	8000920 <SSD1306_Init>
 80010bc:	20000084 	.word	0x20000084

080010c0 <SSD1306_DrawPixel>:
//
// Draw pixel in the buffer
//
void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
	if (currentOLED->rotation_90)
 80010c0:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <SSD1306_DrawPixel+0x84>)
{
 80010c2:	b430      	push	{r4, r5}
	if (currentOLED->rotation_90)
 80010c4:	681d      	ldr	r5, [r3, #0]
 80010c6:	f895 4400 	ldrb.w	r4, [r5, #1024]	@ 0x400
	{
		if ((x < 0) || (x >= SSD1306_LCDHEIGHT) || (y < 0) || (y >= SSD1306_LCDWIDTH))
 80010ca:	b283      	uxth	r3, r0
	if (currentOLED->rotation_90)
 80010cc:	b14c      	cbz	r4, 80010e2 <SSD1306_DrawPixel+0x22>
		if ((x < 0) || (x >= SSD1306_LCDHEIGHT) || (y < 0) || (y >= SSD1306_LCDWIDTH))
 80010ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80010d0:	d811      	bhi.n	80010f6 <SSD1306_DrawPixel+0x36>
 80010d2:	b28b      	uxth	r3, r1
 80010d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80010d6:	d80e      	bhi.n	80010f6 <SSD1306_DrawPixel+0x36>
				 return;
		int16_t new_x = 127-y;
 80010d8:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
		int16_t new_y = x;
		x = new_x;
		y = new_y;
 80010dc:	4601      	mov	r1, r0
		x = new_x;
 80010de:	b218      	sxth	r0, r3
 80010e0:	e004      	b.n	80010ec <SSD1306_DrawPixel+0x2c>
	}
	else{
		 if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80010e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80010e4:	d807      	bhi.n	80010f6 <SSD1306_DrawPixel+0x36>
 80010e6:	b28b      	uxth	r3, r1
 80010e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80010ea:	d804      	bhi.n	80010f6 <SSD1306_DrawPixel+0x36>
			 return;
	}

	 switch(Color)
 80010ec:	2a01      	cmp	r2, #1
 80010ee:	d01d      	beq.n	800112c <SSD1306_DrawPixel+0x6c>
 80010f0:	2a02      	cmp	r2, #2
 80010f2:	d00f      	beq.n	8001114 <SSD1306_DrawPixel+0x54>
 80010f4:	b10a      	cbz	r2, 80010fa <SSD1306_DrawPixel+0x3a>
	 {
		 case WHITE:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] |=  (1 << (y&7)); break;
		 case BLACK:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); break;
		 case INVERSE: currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] ^=  (1 << (y&7)); break;
	 }
}
 80010f6:	bc30      	pop	{r4, r5}
 80010f8:	4770      	bx	lr
		 case BLACK:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); break;
 80010fa:	10cb      	asrs	r3, r1, #3
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	fb13 0302 	smlabb	r3, r3, r2, r0
 8001102:	f001 0007 	and.w	r0, r1, #7
 8001106:	5cea      	ldrb	r2, [r5, r3]
 8001108:	2101      	movs	r1, #1
 800110a:	4081      	lsls	r1, r0
 800110c:	ea22 0201 	bic.w	r2, r2, r1
 8001110:	54ea      	strb	r2, [r5, r3]
 8001112:	e7f0      	b.n	80010f6 <SSD1306_DrawPixel+0x36>
		 case INVERSE: currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] ^=  (1 << (y&7)); break;
 8001114:	10ca      	asrs	r2, r1, #3
 8001116:	2380      	movs	r3, #128	@ 0x80
 8001118:	fb12 0203 	smlabb	r2, r2, r3, r0
 800111c:	f001 0107 	and.w	r1, r1, #7
 8001120:	5ca8      	ldrb	r0, [r5, r2]
 8001122:	2301      	movs	r3, #1
 8001124:	408b      	lsls	r3, r1
 8001126:	4043      	eors	r3, r0
 8001128:	54ab      	strb	r3, [r5, r2]
 800112a:	e7e4      	b.n	80010f6 <SSD1306_DrawPixel+0x36>
		 case WHITE:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] |=  (1 << (y&7)); break;
 800112c:	10cb      	asrs	r3, r1, #3
 800112e:	f001 0107 	and.w	r1, r1, #7
 8001132:	408a      	lsls	r2, r1
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	fb13 0301 	smlabb	r3, r3, r1, r0
 800113a:	5ce9      	ldrb	r1, [r5, r3]
 800113c:	430a      	orrs	r2, r1
 800113e:	54ea      	strb	r2, [r5, r3]
 8001140:	e7d9      	b.n	80010f6 <SSD1306_DrawPixel+0x36>
 8001142:	bf00      	nop
 8001144:	20000080 	.word	0x20000080

08001148 <SSD1306_Clear>:
//
// Clear the buffer
//
void SSD1306_Clear(uint8_t Color)
{
	switch (Color)
 8001148:	4601      	mov	r1, r0
 800114a:	b140      	cbz	r0, 800115e <SSD1306_Clear+0x16>
 800114c:	2801      	cmp	r0, #1
 800114e:	d10c      	bne.n	800116a <SSD1306_Clear+0x22>
	{
		case WHITE:
			memset(currentOLED->buffer, 0xFF, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <SSD1306_Clear+0x24>)
 8001152:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	21ff      	movs	r1, #255	@ 0xff
 800115a:	f003 bd9b 	b.w	8004c94 <memset>
			break;
		case BLACK:
			memset(currentOLED->buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 800115e:	4b03      	ldr	r3, [pc, #12]	@ (800116c <SSD1306_Clear+0x24>)
 8001160:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	f003 bd95 	b.w	8004c94 <memset>
			break;
	}
}
 800116a:	4770      	bx	lr
 800116c:	20000080 	.word	0x20000080

08001170 <SSD1306_Display>:

//
// Send buffer to OLDE GCRAM
//
void SSD1306_Display(void)
{
 8001170:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8001172:	4c42      	ldr	r4, [pc, #264]	@ (800127c <SSD1306_Display+0x10c>)
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8001174:	4e42      	ldr	r6, [pc, #264]	@ (8001280 <SSD1306_Display+0x110>)
{
 8001176:	b082      	sub	sp, #8
 8001178:	2322      	movs	r3, #34	@ 0x22
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2110      	movs	r1, #16
 800117e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001182:	f88d 3007 	strb.w	r3, [sp, #7]
 8001186:	f001 f935 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	2200      	movs	r2, #0
 800118e:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001192:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001196:	f001 f92d 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 800119a:	230a      	movs	r3, #10
 800119c:	2201      	movs	r2, #1
 800119e:	f10d 0107 	add.w	r1, sp, #7
 80011a2:	6830      	ldr	r0, [r6, #0]
 80011a4:	f002 f97c 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	2500      	movs	r5, #0
 80011ac:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80011b0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80011b4:	2201      	movs	r2, #1
 80011b6:	f001 f91d 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 80011ba:	462a      	mov	r2, r5
 80011bc:	2110      	movs	r1, #16
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f88d 5007 	strb.w	r5, [sp, #7]
 80011c6:	f001 f915 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	462a      	mov	r2, r5
 80011ce:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80011d2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80011d6:	f001 f90d 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 80011da:	230a      	movs	r3, #10
 80011dc:	2201      	movs	r2, #1
 80011de:	f10d 0107 	add.w	r1, sp, #7
 80011e2:	6830      	ldr	r0, [r6, #0]
 80011e4:	f002 f95c 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80011f0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80011f4:	f001 f8fe 	bl	80023f4 <HAL_GPIO_WritePin>
	SSD1306_Command(0x22);
	SSD1306_Command(0x00);
	SSD1306_Command(0x07);
 80011f8:	2307      	movs	r3, #7
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 80011fa:	462a      	mov	r2, r5
 80011fc:	2110      	movs	r1, #16
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001202:	f88d 3007 	strb.w	r3, [sp, #7]
 8001206:	f001 f8f5 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	462a      	mov	r2, r5
 800120e:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001212:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001216:	f001 f8ed 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 800121a:	230a      	movs	r3, #10
 800121c:	f10d 0107 	add.w	r1, sp, #7
 8001220:	2201      	movs	r2, #1
 8001222:	6830      	ldr	r0, [r6, #0]
 8001224:	f002 f93c 	bl	80034a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	2201      	movs	r2, #1
 800122c:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001230:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001234:	f001 f8de 	bl	80023f4 <HAL_GPIO_WritePin>
	HAL_I2C_Mem_Write(ssd1306_i2c, SSD1306_I2C_ADDRESS, 0x40, 1, (uint8_t*)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
#endif
#endif
#ifdef SSD1306_SPI_CONTROL
#ifdef SSD1306_SPI_DMA_ENABLE
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2110      	movs	r1, #16
 800123c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001240:	f001 f8d8 	bl	80023f4 <HAL_GPIO_WritePin>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	462a      	mov	r2, r5
 8001248:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800124c:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001250:	f001 f8d0 	bl	80023f4 <HAL_GPIO_WritePin>
#endif
	while (ssd1306_spi->hdmatx->State != HAL_DMA_STATE_READY){};
 8001254:	6830      	ldr	r0, [r6, #0]
 8001256:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8001258:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 800125c:	2b01      	cmp	r3, #1
 800125e:	d1fb      	bne.n	8001258 <SSD1306_Display+0xe8>
	if(ssd1306_spi->hdmatx->State == HAL_DMA_STATE_READY)
 8001260:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8001264:	2b01      	cmp	r3, #1
 8001266:	d001      	beq.n	800126c <SSD1306_Display+0xfc>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED.PortCS, currentOLED.PinCS, GPIO_PIN_SET);
#endif
#endif
#endif
}
 8001268:	b002      	add	sp, #8
 800126a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_SPI_Transmit_DMA(ssd1306_spi, (uint8_t*)&currentOLED->buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 800126c:	6821      	ldr	r1, [r4, #0]
 800126e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
}
 8001272:	b002      	add	sp, #8
 8001274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_SPI_Transmit_DMA(ssd1306_spi, (uint8_t*)&currentOLED->buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8001278:	f002 ba36 	b.w	80036e8 <HAL_SPI_Transmit_DMA>
 800127c:	20000080 	.word	0x20000080
 8001280:	20000084 	.word	0x20000084

08001284 <SSD1306_DmaEndCallback>:
}

#if defined(SSD1306_SPI_CONTROL) && defined(SSD1306_SPI_DMA_ENABLE) && !defined(SPI_CS_HARDWARE_CONTROL)
void SSD1306_DmaEndCallback(SPI_HandleTypeDef *hspi)
{
	if(hspi == ssd1306_spi)
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <SSD1306_DmaEndCallback+0x1c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4283      	cmp	r3, r0
 800128a:	d000      	beq.n	800128e <SSD1306_DmaEndCallback+0xa>
	{
		HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
	}
}
 800128c:	4770      	bx	lr
		HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <SSD1306_DmaEndCallback+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2201      	movs	r2, #1
 8001294:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001298:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800129c:	f001 b8aa 	b.w	80023f4 <HAL_GPIO_WritePin>
 80012a0:	20000084 	.word	0x20000084
 80012a4:	20000080 	.word	0x20000080

080012a8 <_Z10drawScreenh.part.0>:
	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}

	SSD1306_SetOLED(&oled[0]);
}

void drawScreen(uint8_t screenNumber){
 80012a8:	b570      	push	{r4, r5, r6, lr}
	while (hspi1.hdmatx->State != HAL_DMA_STATE_READY) {}
	if(hspi1.hdmatx->State == HAL_DMA_STATE_READY)
	{
		SSD1306_SetOLED(&oled[screenNumber]);
 80012aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <_Z10drawScreenh.part.0+0x80>)
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX20_CONSTEXPR
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
 80012ac:	4d1f      	ldr	r5, [pc, #124]	@ (800132c <_Z10drawScreenh.part.0+0x84>)
void drawScreen(uint8_t screenNumber){
 80012ae:	4604      	mov	r4, r0
		SSD1306_SetOLED(&oled[screenNumber]);
 80012b0:	f240 400c 	movw	r0, #1036	@ 0x40c
void drawScreen(uint8_t screenNumber){
 80012b4:	b082      	sub	sp, #8
		SSD1306_SetOLED(&oled[screenNumber]);
 80012b6:	fb00 3004 	mla	r0, r0, r4, r3
 80012ba:	f7ff fac7 	bl	800084c <SSD1306_SetOLED>
		SSD1306_Clear(BLACK);
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff ff42 	bl	8001148 <SSD1306_Clear>
 80012c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
		GFX_SetFontSize(2);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f7ff fa6b 	bl	80007a4 <GFX_SetFontSize>
 80012ce:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80012d2:	00e4      	lsls	r4, r4, #3
		char* cstr = new char [caption[screenNumber].length()+1];
 80012d4:	6858      	ldr	r0, [r3, #4]
 80012d6:	3001      	adds	r0, #1
 80012d8:	f003 fa8e 	bl	80047f8 <_Znaj>
		strcpy(cstr, caption[screenNumber].c_str());
 80012dc:	5929      	ldr	r1, [r5, r4]
		char* cstr = new char [caption[screenNumber].length()+1];
 80012de:	4606      	mov	r6, r0
		GFX_DrawString(0,0, cstr, WHITE, BLACK);
 80012e0:	2500      	movs	r5, #0
		strcpy(cstr, caption[screenNumber].c_str());
 80012e2:	f003 fd5f 	bl	8004da4 <strcpy>
		GFX_DrawString(0,0, cstr, WHITE, BLACK);
 80012e6:	4632      	mov	r2, r6
 80012e8:	4629      	mov	r1, r5
 80012ea:	4e11      	ldr	r6, [pc, #68]	@ (8001330 <_Z10drawScreenh.part.0+0x88>)
 80012ec:	9500      	str	r5, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	4628      	mov	r0, r5
 80012f2:	f7ff fa5d 	bl	80007b0 <GFX_DrawString>
		GFX_SetFontSize(3);
 80012f6:	2003      	movs	r0, #3
 80012f8:	f7ff fa54 	bl	80007a4 <GFX_SetFontSize>
 80012fc:	1933      	adds	r3, r6, r4
		cstr = new char [value[screenNumber].length()+1];
 80012fe:	6858      	ldr	r0, [r3, #4]
 8001300:	3001      	adds	r0, #1
 8001302:	f003 fa79 	bl	80047f8 <_Znaj>
		strcpy(cstr, value[screenNumber].c_str());
 8001306:	5931      	ldr	r1, [r6, r4]
		cstr = new char [value[screenNumber].length()+1];
 8001308:	4604      	mov	r4, r0
		strcpy(cstr, value[screenNumber].c_str());
 800130a:	f003 fd4b 	bl	8004da4 <strcpy>
		GFX_DrawString(0, 20, cstr, WHITE, BLACK);
 800130e:	9500      	str	r5, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	4622      	mov	r2, r4
 8001314:	2114      	movs	r1, #20
 8001316:	4628      	mov	r0, r5
 8001318:	f7ff fa4a 	bl	80007b0 <GFX_DrawString>
		SSD1306_Display();
		cstr = NULL;
		delete cstr;
	}
}
 800131c:	b002      	add	sp, #8
 800131e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		SSD1306_Display();
 8001322:	f7ff bf25 	b.w	8001170 <SSD1306_Display>
 8001326:	bf00      	nop
 8001328:	20000218 	.word	0x20000218
 800132c:	200000e8 	.word	0x200000e8
 8001330:	20000088 	.word	0x20000088

08001334 <_Z15initializeOLEDsv>:
	oled[0].PortCS = SSD1306_CS_GPIO_Port;
 8001334:	4b4f      	ldr	r3, [pc, #316]	@ (8001474 <_Z15initializeOLEDsv+0x140>)
	oled[1].PortCS = SSD1306_CS2_GPIO_Port;
 8001336:	4850      	ldr	r0, [pc, #320]	@ (8001478 <_Z15initializeOLEDsv+0x144>)
void initializeOLEDs(){
 8001338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	oled[3].PortCS = SSD1306_CS4_GPIO_Port;
 800133c:	f503 5180 	add.w	r1, r3, #4096	@ 0x1000
	oled[0].rotation_90 = false;
 8001340:	2200      	movs	r2, #0
	oled[0].PortCS = SSD1306_CS_GPIO_Port;
 8001342:	f04f 4590 	mov.w	r5, #1207959552	@ 0x48000000
 8001346:	4c4d      	ldr	r4, [pc, #308]	@ (800147c <_Z15initializeOLEDsv+0x148>)
	oled[0].rotation_90 = false;
 8001348:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
	oled[1].PortCS = SSD1306_CS2_GPIO_Port;
 800134c:	f8c3 0810 	str.w	r0, [r3, #2064]	@ 0x810
	oled[2].PortCS = SSD1306_CS3_GPIO_Port;
 8001350:	f8c3 0c1c 	str.w	r0, [r3, #3100]	@ 0xc1c
	oled[1].rotation_90 = false;
 8001354:	f883 280c 	strb.w	r2, [r3, #2060]	@ 0x80c
	oled[2].PinCS = SSD1306_CS3_Pin;
 8001358:	2002      	movs	r0, #2
	oled[2].rotation_90 = false;
 800135a:	f883 2c18 	strb.w	r2, [r3, #3096]	@ 0xc18
	oled[3].rotation_90 = false;
 800135e:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
	oled[0].PinCS = SSD1306_CS_Pin;
 8001362:	2240      	movs	r2, #64	@ 0x40
	oled[0].PortCS = SSD1306_CS_GPIO_Port;
 8001364:	f8c3 5404 	str.w	r5, [r3, #1028]	@ 0x404
	oled[3].PortCS = SSD1306_CS4_GPIO_Port;
 8001368:	628d      	str	r5, [r1, #40]	@ 0x28
	oled[2].PinCS = SSD1306_CS3_Pin;
 800136a:	f8a3 0c20 	strh.w	r0, [r3, #3104]	@ 0xc20
	oled[0].PinCS = SSD1306_CS_Pin;
 800136e:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
	oled[3].PinCS = SSD1306_CS4_Pin;
 8001372:	f44f 7080 	mov.w	r0, #256	@ 0x100
	oled[1].PinCS = SSD1306_CS2_Pin;
 8001376:	2201      	movs	r2, #1
 8001378:	4d41      	ldr	r5, [pc, #260]	@ (8001480 <_Z15initializeOLEDsv+0x14c>)
      _GLIBCXX20_CONSTEXPR
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
 800137a:	f8df 911c 	ldr.w	r9, [pc, #284]	@ 8001498 <_Z15initializeOLEDsv+0x164>
 800137e:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800149c <_Z15initializeOLEDsv+0x168>
	oled[3].PinCS = SSD1306_CS4_Pin;
 8001382:	8588      	strh	r0, [r1, #44]	@ 0x2c
void initializeOLEDs(){
 8001384:	b083      	sub	sp, #12
 8001386:	f104 0760 	add.w	r7, r4, #96	@ 0x60
	oled[1].PinCS = SSD1306_CS2_Pin;
 800138a:	f8a3 2814 	strh.w	r2, [r3, #2068]	@ 0x814
 800138e:	2605      	movs	r6, #5
 8001390:	6862      	ldr	r2, [r4, #4]
 8001392:	9600      	str	r6, [sp, #0]
 8001394:	464b      	mov	r3, r9
 8001396:	2100      	movs	r1, #0
 8001398:	4620      	mov	r0, r4
 800139a:	f003 fafd 	bl	8004998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800139e:	2303      	movs	r3, #3
 80013a0:	686a      	ldr	r2, [r5, #4]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4628      	mov	r0, r5
 80013a6:	4643      	mov	r3, r8
 80013a8:	2100      	movs	r1, #0
	for (uint8_t i = 0; i < 4; i++){
 80013aa:	3418      	adds	r4, #24
 80013ac:	f003 faf4 	bl	8004998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80013b0:	42bc      	cmp	r4, r7
 80013b2:	f105 0518 	add.w	r5, r5, #24
 80013b6:	d1ea      	bne.n	800138e <_Z15initializeOLEDsv+0x5a>
	GFX_SetFont(font_8x5);
 80013b8:	4832      	ldr	r0, [pc, #200]	@ (8001484 <_Z15initializeOLEDsv+0x150>)
	SSD1306_SpiInit(&hspi1);
 80013ba:	4d33      	ldr	r5, [pc, #204]	@ (8001488 <_Z15initializeOLEDsv+0x154>)
	GFX_SetFont(font_8x5);
 80013bc:	f7ff f9ec 	bl	8000798 <GFX_SetFont>
	GFX_SetFontSize(1);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f7ff f9ef 	bl	80007a4 <GFX_SetFontSize>
	SSD1306_ResetOLEDS();
 80013c6:	f7ff fa47 	bl	8000858 <SSD1306_ResetOLEDS>
	SSD1306_SetOLED(&oled[0]);
 80013ca:	482a      	ldr	r0, [pc, #168]	@ (8001474 <_Z15initializeOLEDsv+0x140>)
 80013cc:	f7ff fa3e 	bl	800084c <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 80013d0:	4628      	mov	r0, r5
 80013d2:	f7ff fe6f 	bl	80010b4 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f7ff fa50 	bl	800087c <SSD1306_RotateDisplay>
	SSD1306_Clear(BLACK);
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff feb3 	bl	8001148 <SSD1306_Clear>
	SSD1306_Display();
 80013e2:	f7ff fec5 	bl	8001170 <SSD1306_Display>
	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 80013e6:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80013e8:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	b2dc      	uxtb	r4, r3
 80013f0:	d1fa      	bne.n	80013e8 <_Z15initializeOLEDsv+0xb4>
	SSD1306_SetOLED(&oled[1]);
 80013f2:	4826      	ldr	r0, [pc, #152]	@ (800148c <_Z15initializeOLEDsv+0x158>)
 80013f4:	f7ff fa2a 	bl	800084c <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 80013f8:	4823      	ldr	r0, [pc, #140]	@ (8001488 <_Z15initializeOLEDsv+0x154>)
 80013fa:	f7ff fe5b 	bl	80010b4 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff fa3c 	bl	800087c <SSD1306_RotateDisplay>
	SSD1306_Clear(BLACK);
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff fe9f 	bl	8001148 <SSD1306_Clear>
	SSD1306_Display();
 800140a:	f7ff feb1 	bl	8001170 <SSD1306_Display>
	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 800140e:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8001410:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8001414:	2b01      	cmp	r3, #1
 8001416:	b2dc      	uxtb	r4, r3
 8001418:	d1fa      	bne.n	8001410 <_Z15initializeOLEDsv+0xdc>
	SSD1306_SetOLED(&oled[2]);
 800141a:	481d      	ldr	r0, [pc, #116]	@ (8001490 <_Z15initializeOLEDsv+0x15c>)
 800141c:	f7ff fa16 	bl	800084c <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 8001420:	4819      	ldr	r0, [pc, #100]	@ (8001488 <_Z15initializeOLEDsv+0x154>)
 8001422:	f7ff fe47 	bl	80010b4 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 8001426:	4620      	mov	r0, r4
 8001428:	f7ff fa28 	bl	800087c <SSD1306_RotateDisplay>
	SSD1306_Clear(BLACK);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fe8b 	bl	8001148 <SSD1306_Clear>
	SSD1306_Display();
 8001432:	f7ff fe9d 	bl	8001170 <SSD1306_Display>
	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 8001436:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8001438:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 800143c:	2b01      	cmp	r3, #1
 800143e:	b2dc      	uxtb	r4, r3
 8001440:	d1fa      	bne.n	8001438 <_Z15initializeOLEDsv+0x104>
	SSD1306_SetOLED(&oled[3]);
 8001442:	4814      	ldr	r0, [pc, #80]	@ (8001494 <_Z15initializeOLEDsv+0x160>)
 8001444:	f7ff fa02 	bl	800084c <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 8001448:	480f      	ldr	r0, [pc, #60]	@ (8001488 <_Z15initializeOLEDsv+0x154>)
 800144a:	f7ff fe33 	bl	80010b4 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff fa14 	bl	800087c <SSD1306_RotateDisplay>
	SSD1306_Clear(BLACK);
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fe77 	bl	8001148 <SSD1306_Clear>
	SSD1306_Display();
 800145a:	f7ff fe89 	bl	8001170 <SSD1306_Display>
	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 800145e:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8001460:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8001464:	2b01      	cmp	r3, #1
 8001466:	d1fb      	bne.n	8001460 <_Z15initializeOLEDsv+0x12c>
	SSD1306_SetOLED(&oled[0]);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <_Z15initializeOLEDsv+0x140>)
}
 800146a:	b003      	add	sp, #12
 800146c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SSD1306_SetOLED(&oled[0]);
 8001470:	f7ff b9ec 	b.w	800084c <SSD1306_SetOLED>
 8001474:	20000218 	.word	0x20000218
 8001478:	48000400 	.word	0x48000400
 800147c:	200000e8 	.word	0x200000e8
 8001480:	20000088 	.word	0x20000088
 8001484:	08004e88 	.word	0x08004e88
 8001488:	20001390 	.word	0x20001390
 800148c:	20000624 	.word	0x20000624
 8001490:	20000a30 	.word	0x20000a30
 8001494:	20000e3c 	.word	0x20000e3c
 8001498:	08004e7c 	.word	0x08004e7c
 800149c:	08004e84 	.word	0x08004e84

080014a0 <setup>:
	enc[1].setMaximumVelocityIncrement(32);
	enc[2].setMaximumVelocityIncrement(16);
	enc[3].setMaximumVelocityIncrement(8);
}

void setup(){
 80014a0:	b538      	push	{r3, r4, r5, lr}
	initializeOLEDs();
 80014a2:	f7ff ff47 	bl	8001334 <_Z15initializeOLEDsv>
	//initializeEncoders();
	for (uint8_t i = 0; i < 4; i++){
 80014a6:	4d0c      	ldr	r5, [pc, #48]	@ (80014d8 <setup+0x38>)
 80014a8:	2400      	movs	r4, #0
		while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 80014aa:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80014ac:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80014b0:	2a01      	cmp	r2, #1
 80014b2:	d1fb      	bne.n	80014ac <setup+0xc>
	while (hspi1.hdmatx->State != HAL_DMA_STATE_READY) {}
 80014b4:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80014b8:	2a01      	cmp	r2, #1
 80014ba:	d1fb      	bne.n	80014b4 <setup+0x14>
	if(hspi1.hdmatx->State == HAL_DMA_STATE_READY)
 80014bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d004      	beq.n	80014ce <setup+0x2e>
	for (uint8_t i = 0; i < 4; i++){
 80014c4:	3401      	adds	r4, #1
 80014c6:	b2e4      	uxtb	r4, r4
 80014c8:	2c04      	cmp	r4, #4
 80014ca:	d1ee      	bne.n	80014aa <setup+0xa>
		drawScreen(i);
	}
}
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7ff feea 	bl	80012a8 <_Z10drawScreenh.part.0>
 80014d4:	e7f6      	b.n	80014c4 <setup+0x24>
 80014d6:	bf00      	nop
 80014d8:	20001390 	.word	0x20001390

080014dc <Timer6Interrupt>:
		if (currentReadChannel == 4){
			currentReadChannel = 0;
		}
		readState = false;
	}
}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop

080014e0 <UART_received>:

void UART_received(char* buf, uint16_t size){
 80014e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t selectedDisplay = 0;
	bool valuenotcaption = (buf[0] == 'V');

	if(buf[1] == '0') selectedDisplay = 0;
 80014e4:	7843      	ldrb	r3, [r0, #1]
	bool valuenotcaption = (buf[0] == 'V');
 80014e6:	7804      	ldrb	r4, [r0, #0]
	if(buf[1] == '1') selectedDisplay = 1;
 80014e8:	2b31      	cmp	r3, #49	@ 0x31
void UART_received(char* buf, uint16_t size){
 80014ea:	b08d      	sub	sp, #52	@ 0x34
	if(buf[1] == '1') selectedDisplay = 1;
 80014ec:	d05f      	beq.n	80015ae <UART_received+0xce>
	if(buf[1] == '2') selectedDisplay = 2;
 80014ee:	2b32      	cmp	r3, #50	@ 0x32
 80014f0:	d138      	bne.n	8001564 <UART_received+0x84>
 80014f2:	2230      	movs	r2, #48	@ 0x30
 80014f4:	f04f 0a02 	mov.w	sl, #2
      { _M_string_length = __length; }
 80014f8:	2300      	movs	r3, #0
	: allocator_type(__a), _M_p(__dat) { }
 80014fa:	f10d 0820 	add.w	r8, sp, #32
	if(buf[1] == '3') selectedDisplay = 3;

	std::string received = "";

	for (int i = 2; i < size - 1; i++) received += buf[i];
 80014fe:	2903      	cmp	r1, #3
      { _M_string_length = __length; }
 8001500:	9307      	str	r3, [sp, #28]
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8001502:	f88d 3020 	strb.w	r3, [sp, #32]
	: allocator_type(__a), _M_p(__dat) { }
 8001506:	f8cd 8018 	str.w	r8, [sp, #24]
 800150a:	bf98      	it	ls
 800150c:	ae06      	addls	r6, sp, #24
 800150e:	d932      	bls.n	8001576 <UART_received+0x96>
 8001510:	469b      	mov	fp, r3
 8001512:	3902      	subs	r1, #2
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
 8001514:	e9cd 4a03 	strd	r4, sl, [sp, #12]
 8001518:	1847      	adds	r7, r0, r1
 800151a:	1c45      	adds	r5, r0, #1
 800151c:	4643      	mov	r3, r8
 800151e:	ae06      	add	r6, sp, #24
 8001520:	46d9      	mov	r9, fp
 8001522:	9205      	str	r2, [sp, #20]
 8001524:	e009      	b.n	800153a <UART_received+0x5a>
 8001526:	f803 a00b 	strb.w	sl, [r3, fp]
 800152a:	9b06      	ldr	r3, [sp, #24]
      { _M_string_length = __length; }
 800152c:	9407      	str	r4, [sp, #28]
 800152e:	42af      	cmp	r7, r5
 8001530:	f803 9004 	strb.w	r9, [r3, r4]
 8001534:	d01c      	beq.n	8001570 <UART_received+0x90>
      { return _M_dataplus._M_p; }
 8001536:	e9dd 3b06 	ldrd	r3, fp, [sp, #24]
	if (_M_data() == _M_local_data())
 800153a:	4543      	cmp	r3, r8
	return _M_is_local() ? size_type(_S_local_capacity)
 800153c:	bf18      	it	ne
 800153e:	9a08      	ldrne	r2, [sp, #32]
 8001540:	f815 af01 	ldrb.w	sl, [r5, #1]!
	if (__size + 1 > this->capacity())
 8001544:	f10b 0401 	add.w	r4, fp, #1
	return _M_is_local() ? size_type(_S_local_capacity)
 8001548:	bf08      	it	eq
 800154a:	220f      	moveq	r2, #15
	if (__size + 1 > this->capacity())
 800154c:	4294      	cmp	r4, r2
 800154e:	d9ea      	bls.n	8001526 <UART_received+0x46>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
 8001550:	2300      	movs	r3, #0
 8001552:	2001      	movs	r0, #1
 8001554:	461a      	mov	r2, r3
 8001556:	9000      	str	r0, [sp, #0]
 8001558:	4659      	mov	r1, fp
 800155a:	4630      	mov	r0, r6
 800155c:	f003 f9e3 	bl	8004926 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8001560:	9b06      	ldr	r3, [sp, #24]
 8001562:	e7e0      	b.n	8001526 <UART_received+0x46>
	if(buf[1] == '3') selectedDisplay = 3;
 8001564:	2b33      	cmp	r3, #51	@ 0x33
 8001566:	d12a      	bne.n	80015be <UART_received+0xde>
 8001568:	2248      	movs	r2, #72	@ 0x48
 800156a:	f04f 0a03 	mov.w	sl, #3
 800156e:	e7c3      	b.n	80014f8 <UART_received+0x18>
 8001570:	e9dd 4a03 	ldrd	r4, sl, [sp, #12]
 8001574:	9a05      	ldr	r2, [sp, #20]

	if (valuenotcaption){
 8001576:	2c56      	cmp	r4, #86	@ 0x56
		value[selectedDisplay] = received;
 8001578:	bf0c      	ite	eq
 800157a:	4812      	ldreq	r0, [pc, #72]	@ (80015c4 <UART_received+0xe4>)
	}
	else{
		caption[selectedDisplay] = received;
 800157c:	4812      	ldrne	r0, [pc, #72]	@ (80015c8 <UART_received+0xe8>)
	this->_M_assign(__str);
 800157e:	4631      	mov	r1, r6
 8001580:	4410      	add	r0, r2
 8001582:	f003 f9ab 	bl	80048dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	while (hspi1.hdmatx->State != HAL_DMA_STATE_READY) {}
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <UART_received+0xec>)
 8001588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800158a:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 800158e:	2b01      	cmp	r3, #1
 8001590:	d1fb      	bne.n	800158a <UART_received+0xaa>
	if(hspi1.hdmatx->State == HAL_DMA_STATE_READY)
 8001592:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8001596:	2b01      	cmp	r3, #1
 8001598:	d00d      	beq.n	80015b6 <UART_received+0xd6>
      { return _M_dataplus._M_p; }
 800159a:	9806      	ldr	r0, [sp, #24]
	if (_M_data() == _M_local_data())
 800159c:	4540      	cmp	r0, r8
 800159e:	d003      	beq.n	80015a8 <UART_received+0xc8>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 80015a0:	9908      	ldr	r1, [sp, #32]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80015a2:	3101      	adds	r1, #1
 80015a4:	f003 f926 	bl	80047f4 <_ZdlPvj>
	}
	drawScreen(selectedDisplay);
}
 80015a8:	b00d      	add	sp, #52	@ 0x34
 80015aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015ae:	2218      	movs	r2, #24
	if(buf[1] == '1') selectedDisplay = 1;
 80015b0:	f04f 0a01 	mov.w	sl, #1
 80015b4:	e7a0      	b.n	80014f8 <UART_received+0x18>
 80015b6:	4650      	mov	r0, sl
 80015b8:	f7ff fe76 	bl	80012a8 <_Z10drawScreenh.part.0>
 80015bc:	e7ed      	b.n	800159a <UART_received+0xba>
	if(buf[1] == '3') selectedDisplay = 3;
 80015be:	2200      	movs	r2, #0
 80015c0:	4692      	mov	sl, r2
 80015c2:	e799      	b.n	80014f8 <UART_received+0x18>
 80015c4:	20000088 	.word	0x20000088
 80015c8:	200000e8 	.word	0x200000e8
 80015cc:	20001390 	.word	0x20001390

080015d0 <loop>:

void loop(){
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop

080015d4 <_GLOBAL__sub_I_oled>:
	DataRising = 2,
	ClkFalling = 4,
	DataFalling = 6
};

class Encoder{
 80015d4:	4a37      	ldr	r2, [pc, #220]	@ (80016b4 <_GLOBAL__sub_I_oled+0xe0>)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80015d6:	4838      	ldr	r0, [pc, #224]	@ (80016b8 <_GLOBAL__sub_I_oled+0xe4>)
 80015d8:	2300      	movs	r3, #0

}
 80015da:	b430      	push	{r4, r5}
 80015dc:	f04f 0c20 	mov.w	ip, #32
 80015e0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80015e4:	2501      	movs	r5, #1
 80015e6:	24ff      	movs	r4, #255	@ 0xff
 80015e8:	e9c2 3103 	strd	r3, r1, [r2, #12]
 80015ec:	e9c2 3506 	strd	r3, r5, [r2, #24]
 80015f0:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80015f4:	e9c2 3110 	strd	r3, r1, [r2, #64]	@ 0x40
 80015f8:	e9c2 3513 	strd	r3, r5, [r2, #76]	@ 0x4c
 80015fc:	e9c2 3415 	strd	r3, r4, [r2, #84]	@ 0x54
 8001600:	e9c2 311d 	strd	r3, r1, [r2, #116]	@ 0x74
 8001604:	e9c2 3520 	strd	r3, r5, [r2, #128]	@ 0x80
 8001608:	e9c2 3422 	strd	r3, r4, [r2, #136]	@ 0x88
 800160c:	f8c2 10ac 	str.w	r1, [r2, #172]	@ 0xac
 8001610:	e9c2 330a 	strd	r3, r3, [r2, #40]	@ 0x28
 8001614:	4929      	ldr	r1, [pc, #164]	@ (80016bc <_GLOBAL__sub_I_oled+0xe8>)
 8001616:	7513      	strb	r3, [r2, #20]
 8001618:	e9c2 3317 	strd	r3, r3, [r2, #92]	@ 0x5c
 800161c:	e9c2 3324 	strd	r3, r3, [r2, #144]	@ 0x90
 8001620:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
 8001624:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
 8001628:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800162c:	f882 c030 	strb.w	ip, [r2, #48]	@ 0x30
 8001630:	f882 c064 	strb.w	ip, [r2, #100]	@ 0x64
 8001634:	f882 c098 	strb.w	ip, [r2, #152]	@ 0x98
 8001638:	f8c2 40c0 	str.w	r4, [r2, #192]	@ 0xc0
 800163c:	e9c2 3331 	strd	r3, r3, [r2, #196]	@ 0xc4
 8001640:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
 8001644:	f8c2 50b8 	str.w	r5, [r2, #184]	@ 0xb8
 8001648:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
 800164c:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
 8001650:	f882 c0cc 	strb.w	ip, [r2, #204]	@ 0xcc
 8001654:	eb00 020c 	add.w	r2, r0, ip
 8001658:	f100 0408 	add.w	r4, r0, #8
 800165c:	6182      	str	r2, [r0, #24]
 800165e:	f100 0250 	add.w	r2, r0, #80	@ 0x50
      { _M_string_length = __length; }
 8001662:	e9c0 4300 	strd	r4, r3, [r0]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8001666:	6482      	str	r2, [r0, #72]	@ 0x48
 8001668:	f100 0438 	add.w	r4, r0, #56	@ 0x38
 800166c:	f101 0208 	add.w	r2, r1, #8
      { _M_string_length = __length; }
 8001670:	e9c0 430c 	strd	r4, r3, [r0, #48]	@ 0x30
 8001674:	7203      	strb	r3, [r0, #8]
 8001676:	61c3      	str	r3, [r0, #28]
 8001678:	f880 3020 	strb.w	r3, [r0, #32]
 800167c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8001680:	eb01 040c 	add.w	r4, r1, ip
      { _M_string_length = __length; }
 8001684:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8001686:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 800168a:	600a      	str	r2, [r1, #0]
 800168c:	f101 0038 	add.w	r0, r1, #56	@ 0x38
 8001690:	f101 0250 	add.w	r2, r1, #80	@ 0x50
 8001694:	720b      	strb	r3, [r1, #8]
 8001696:	f881 3020 	strb.w	r3, [r1, #32]
 800169a:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800169e:	f881 3050 	strb.w	r3, [r1, #80]	@ 0x50
      { _M_string_length = __length; }
 80016a2:	e9c1 4306 	strd	r4, r3, [r1, #24]
 80016a6:	e9c1 030c 	strd	r0, r3, [r1, #48]	@ 0x30
 80016aa:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 80016ae:	604b      	str	r3, [r1, #4]
 80016b0:	bc30      	pop	{r4, r5}
 80016b2:	4770      	bx	lr
 80016b4:	20000148 	.word	0x20000148
 80016b8:	200000e8 	.word	0x200000e8
 80016bc:	20000088 	.word	0x20000088

080016c0 <_GLOBAL__sub_D_oled>:
 80016c0:	b538      	push	{r3, r4, r5, lr}
std::string value[4];
 80016c2:	4c09      	ldr	r4, [pc, #36]	@ (80016e8 <_GLOBAL__sub_D_oled+0x28>)
 80016c4:	f1a4 0560 	sub.w	r5, r4, #96	@ 0x60
 80016c8:	3c18      	subs	r4, #24
      { _M_dispose(); }
 80016ca:	4620      	mov	r0, r4
 80016cc:	f003 f8c2 	bl	8004854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80016d0:	42ac      	cmp	r4, r5
 80016d2:	d1f9      	bne.n	80016c8 <_GLOBAL__sub_D_oled+0x8>
std::string caption[4];
 80016d4:	4c05      	ldr	r4, [pc, #20]	@ (80016ec <_GLOBAL__sub_D_oled+0x2c>)
 80016d6:	f1a4 0560 	sub.w	r5, r4, #96	@ 0x60
 80016da:	3c18      	subs	r4, #24
 80016dc:	4620      	mov	r0, r4
 80016de:	f003 f8b9 	bl	8004854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80016e2:	42ac      	cmp	r4, r5
 80016e4:	d1f9      	bne.n	80016da <_GLOBAL__sub_D_oled+0x1a>
}
 80016e6:	bd38      	pop	{r3, r4, r5, pc}
 80016e8:	200000e8 	.word	0x200000e8
 80016ec:	20000148 	.word	0x20000148

080016f0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016f0:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <MX_DMA_Init+0x50>)
{
 80016f2:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016f4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80016f6:	f040 0001 	orr.w	r0, r0, #1
 80016fa:	6498      	str	r0, [r3, #72]	@ 0x48
 80016fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 80016fe:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001702:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001706:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001708:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800170a:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800170e:	f000 fbd9 	bl	8001ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001712:	200d      	movs	r0, #13
 8001714:	f000 fc12 	bl	8001f3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	4611      	mov	r1, r2
 800171c:	2010      	movs	r0, #16
 800171e:	f000 fbd1 	bl	8001ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001722:	2010      	movs	r0, #16
 8001724:	f000 fc0a 	bl	8001f3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2011      	movs	r0, #17
 800172c:	4611      	mov	r1, r2
 800172e:	f000 fbc9 	bl	8001ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001732:	2011      	movs	r0, #17

}
 8001734:	b003      	add	sp, #12
 8001736:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800173a:	f000 bbff 	b.w	8001f3c <HAL_NVIC_EnableIRQ>
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000

08001744 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001744:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	2400      	movs	r4, #0
{
 8001748:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800174e:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <MX_GPIO_Init+0x90>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
                          |MUX_A_Pin|MUX_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SSD1306_CS2_Pin|SSD1306_CS3_Pin|GPIO_PIN_3|MUX_C_Pin
 8001758:	4d1f      	ldr	r5, [pc, #124]	@ (80017d8 <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	f041 0101 	orr.w	r1, r1, #1
 800175e:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8001760:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001762:	f001 0101 	and.w	r1, r1, #1
 8001766:	9100      	str	r1, [sp, #0]
 8001768:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800176c:	f041 0102 	orr.w	r1, r1, #2
 8001770:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8001772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001774:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
 8001778:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
 800177c:	f641 1170 	movw	r1, #6512	@ 0x1970
 8001780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001784:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
 8001786:	f000 fe35 	bl	80023f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SSD1306_CS2_Pin|SSD1306_CS3_Pin|GPIO_PIN_3|MUX_C_Pin
 800178a:	4622      	mov	r2, r4
 800178c:	4628      	mov	r0, r5
 800178e:	216b      	movs	r1, #107	@ 0x6b
 8001790:	f000 fe30 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
                          |MUX_A_Pin|MUX_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
 8001798:	f641 1370 	movw	r3, #6512	@ 0x1970
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	e9cd 3602 	strd	r3, r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f000 fd38 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB3 PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SSD1306_CS2_Pin|SSD1306_CS3_Pin|GPIO_PIN_3|MUX_C_Pin
 80017ac:	236b      	movs	r3, #107	@ 0x6b
                          |MUX_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	a902      	add	r1, sp, #8
 80017b0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = SSD1306_CS2_Pin|SSD1306_CS3_Pin|GPIO_PIN_3|MUX_C_Pin
 80017b2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	e9cd 6403 	strd	r6, r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f000 fd2f 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MUX_Common2_Pin|MUX_Common_Pin;
 80017be:	2290      	movs	r2, #144	@ 0x90
 80017c0:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	a902      	add	r1, sp, #8
 80017c4:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = MUX_Common2_Pin|MUX_Common_Pin;
 80017c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f000 fd26 	bl	800221c <HAL_GPIO_Init>

}
 80017d0:	b008      	add	sp, #32
 80017d2:	bd70      	pop	{r4, r5, r6, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	48000400 	.word	0x48000400

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b510      	push	{r4, lr}
 80017de:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e0:	2244      	movs	r2, #68	@ 0x44
 80017e2:	2100      	movs	r1, #0
 80017e4:	a806      	add	r0, sp, #24
 80017e6:	f003 fa55 	bl	8004c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ea:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017ec:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80017f4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80017f8:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017fa:	f000 fe09 	bl	8002410 <HAL_PWREx_ControlVoltageScaling>
 80017fe:	b108      	cbz	r0, 8001804 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001802:	e7fe      	b.n	8001802 <SystemClock_Config+0x26>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001804:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001808:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800180a:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180c:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001812:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001814:	220a      	movs	r2, #10
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001816:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800181a:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800181e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001820:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f000 fed4 	bl	80025d0 <HAL_RCC_OscConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	b108      	cbz	r0, 8001830 <SystemClock_Config+0x54>
 800182c:	b672      	cpsid	i
  while (1)
 800182e:	e7fe      	b.n	800182e <SystemClock_Config+0x52>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001830:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001832:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001834:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001836:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183a:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800183e:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001842:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001844:	f001 f9f2 	bl	8002c2c <HAL_RCC_ClockConfig>
 8001848:	b108      	cbz	r0, 800184e <SystemClock_Config+0x72>
 800184a:	b672      	cpsid	i
  while (1)
 800184c:	e7fe      	b.n	800184c <SystemClock_Config+0x70>
}
 800184e:	b018      	add	sp, #96	@ 0x60
 8001850:	bd10      	pop	{r4, pc}
 8001852:	bf00      	nop

08001854 <main>:
{
 8001854:	b508      	push	{r3, lr}
  HAL_Init();
 8001856:	f000 faef 	bl	8001e38 <HAL_Init>
  SystemClock_Config();
 800185a:	f7ff ffbf 	bl	80017dc <SystemClock_Config>
  MX_GPIO_Init();
 800185e:	f7ff ff71 	bl	8001744 <MX_GPIO_Init>
  MX_DMA_Init();
 8001862:	f7ff ff45 	bl	80016f0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001866:	f000 f847 	bl	80018f8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800186a:	f000 f98b 	bl	8001b84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800186e:	f000 f9a7 	bl	8001bc0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001872:	f000 f93d 	bl	8001af0 <MX_TIM6_Init>
  setup();
 8001876:	f7ff fe13 	bl	80014a0 <setup>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uartbuffer, buffersize);
 800187a:	4908      	ldr	r1, [pc, #32]	@ (800189c <main+0x48>)
 800187c:	4808      	ldr	r0, [pc, #32]	@ (80018a0 <main+0x4c>)
 800187e:	22ff      	movs	r2, #255	@ 0xff
 8001880:	f002 ff94 	bl	80047ac <HAL_UARTEx_ReceiveToIdle_DMA>
  if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 8001884:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <main+0x50>)
 8001886:	f002 f883 	bl	8003990 <HAL_TIM_Base_Start_IT>
 800188a:	b108      	cbz	r0, 8001890 <main+0x3c>
 800188c:	b672      	cpsid	i
  while (1)
 800188e:	e7fe      	b.n	800188e <main+0x3a>
	 loop();
 8001890:	f7ff fe9e 	bl	80015d0 <loop>
 8001894:	f7ff fe9c 	bl	80015d0 <loop>
  while (1)
 8001898:	e7fa      	b.n	8001890 <main+0x3c>
 800189a:	bf00      	nop
 800189c:	20001248 	.word	0x20001248
 80018a0:	200014d8 	.word	0x200014d8
 80018a4:	200013f8 	.word	0x200013f8

080018a8 <HAL_SPI_TxCpltCallback>:
	SSD1306_DmaEndCallback(hspi);
 80018a8:	f7ff bcec 	b.w	8001284 <SSD1306_DmaEndCallback>

080018ac <HAL_TIM_PeriodElapsedCallback>:
	if (htim == &htim6){
 80018ac:	4b02      	ldr	r3, [pc, #8]	@ (80018b8 <HAL_TIM_PeriodElapsedCallback+0xc>)
 80018ae:	4283      	cmp	r3, r0
 80018b0:	d000      	beq.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0x8>
}
 80018b2:	4770      	bx	lr
		Timer6Interrupt();
 80018b4:	f7ff be12 	b.w	80014dc <Timer6Interrupt>
 80018b8:	200013f8 	.word	0x200013f8

080018bc <HAL_UARTEx_RxEventCallback>:
    if(huart->Instance == USART2)
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_UARTEx_RxEventCallback+0x2c>)
 80018be:	6802      	ldr	r2, [r0, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d000      	beq.n	80018c6 <HAL_UARTEx_RxEventCallback+0xa>
 80018c4:	4770      	bx	lr
{
 80018c6:	b510      	push	{r4, lr}
    	UART_received(&uartbuffer, Size);
 80018c8:	4808      	ldr	r0, [pc, #32]	@ (80018ec <HAL_UARTEx_RxEventCallback+0x30>)
 80018ca:	460c      	mov	r4, r1
 80018cc:	f7ff fe08 	bl	80014e0 <UART_received>
    	HAL_UART_Transmit_DMA(&huart2, uartbuffer, Size);
 80018d0:	4622      	mov	r2, r4
 80018d2:	4906      	ldr	r1, [pc, #24]	@ (80018ec <HAL_UARTEx_RxEventCallback+0x30>)
 80018d4:	4806      	ldr	r0, [pc, #24]	@ (80018f0 <HAL_UARTEx_RxEventCallback+0x34>)
 80018d6:	f002 f977 	bl	8003bc8 <HAL_UART_Transmit_DMA>
}
 80018da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uartbuffer, buffersize);
 80018de:	4903      	ldr	r1, [pc, #12]	@ (80018ec <HAL_UARTEx_RxEventCallback+0x30>)
 80018e0:	4803      	ldr	r0, [pc, #12]	@ (80018f0 <HAL_UARTEx_RxEventCallback+0x34>)
 80018e2:	22ff      	movs	r2, #255	@ 0xff
 80018e4:	f002 bf62 	b.w	80047ac <HAL_UARTEx_ReceiveToIdle_DMA>
 80018e8:	40004400 	.word	0x40004400
 80018ec:	20001248 	.word	0x20001248
 80018f0:	200014d8 	.word	0x200014d8

080018f4 <Error_Handler>:
 80018f4:	b672      	cpsid	i
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <Error_Handler+0x2>

080018f8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018f8:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018fa:	4811      	ldr	r0, [pc, #68]	@ (8001940 <MX_SPI1_Init+0x48>)
 80018fc:	4c11      	ldr	r4, [pc, #68]	@ (8001944 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018fe:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001902:	2300      	movs	r3, #0
 8001904:	e9c0 4200 	strd	r4, r2, [r0]
 8001908:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800190c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001910:	e9c0 3102 	strd	r3, r1, [r0, #8]
 8001914:	2428      	movs	r4, #40	@ 0x28
 8001916:	6182      	str	r2, [r0, #24]
 8001918:	2107      	movs	r1, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800191a:	2208      	movs	r2, #8
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800191c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001920:	e9c0 4307 	strd	r4, r3, [r0, #28]
 8001924:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 8001928:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800192c:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800192e:	f001 fd3b 	bl	80033a8 <HAL_SPI_Init>
 8001932:	b900      	cbnz	r0, 8001936 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001934:	bd10      	pop	{r4, pc}
 8001936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800193a:	f7ff bfdb 	b.w	80018f4 <Error_Handler>
 800193e:	bf00      	nop
 8001940:	20001390 	.word	0x20001390
 8001944:	40013000 	.word	0x40013000

08001948 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001948:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800194a:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <HAL_SPI_MspInit+0x94>)
 800194c:	6802      	ldr	r2, [r0, #0]
{
 800194e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8001952:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001958:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800195c:	9406      	str	r4, [sp, #24]
  if(spiHandle->Instance==SPI1)
 800195e:	d001      	beq.n	8001964 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001960:	b008      	add	sp, #32
 8001962:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001964:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8001968:	4605      	mov	r5, r0
 800196a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800196c:	4e1c      	ldr	r6, [pc, #112]	@ (80019e0 <HAL_SPI_MspInit+0x98>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800196e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001972:	661a      	str	r2, [r3, #96]	@ 0x60
 8001974:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001976:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800197a:	9200      	str	r2, [sp, #0]
 800197c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800198e:	2282      	movs	r2, #130	@ 0x82
 8001990:	2302      	movs	r3, #2
 8001992:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2305      	movs	r3, #5
 80019a4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f000 fc39 	bl	800221c <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80019aa:	4a0e      	ldr	r2, [pc, #56]	@ (80019e4 <HAL_SPI_MspInit+0x9c>)
 80019ac:	2301      	movs	r3, #1
 80019ae:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019b2:	4630      	mov	r0, r6
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b4:	2210      	movs	r2, #16
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019b6:	2380      	movs	r3, #128	@ 0x80
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b8:	e9c6 2402 	strd	r2, r4, [r6, #8]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019bc:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019c0:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019c4:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019c6:	f000 fae1 	bl	8001f8c <HAL_DMA_Init>
 80019ca:	b918      	cbnz	r0, 80019d4 <HAL_SPI_MspInit+0x8c>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80019cc:	656e      	str	r6, [r5, #84]	@ 0x54
 80019ce:	62b5      	str	r5, [r6, #40]	@ 0x28
}
 80019d0:	b008      	add	sp, #32
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80019d4:	f7ff ff8e 	bl	80018f4 <Error_Handler>
 80019d8:	e7f8      	b.n	80019cc <HAL_SPI_MspInit+0x84>
 80019da:	bf00      	nop
 80019dc:	40013000 	.word	0x40013000
 80019e0:	20001348 	.word	0x20001348
 80019e4:	40020030 	.word	0x40020030

080019e8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <HAL_MspInit+0x2c>)
 80019ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019ec:	f042 0201 	orr.w	r2, r2, #1
 80019f0:	661a      	str	r2, [r3, #96]	@ 0x60
 80019f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 80019f4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	f002 0201 	and.w	r2, r2, #1
 80019fa:	9200      	str	r2, [sp, #0]
 80019fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a00:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001a04:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a10:	b002      	add	sp, #8
 8001a12:	4770      	bx	lr
 8001a14:	40021000 	.word	0x40021000

08001a18 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a18:	e7fe      	b.n	8001a18 <NMI_Handler>
 8001a1a:	bf00      	nop

08001a1c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <HardFault_Handler>
 8001a1e:	bf00      	nop

08001a20 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler>
 8001a22:	bf00      	nop

08001a24 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <BusFault_Handler>
 8001a26:	bf00      	nop

08001a28 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler>
 8001a2a:	bf00      	nop

08001a2c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop

08001a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop

08001a34 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a38:	f000 ba0e 	b.w	8001e58 <HAL_IncTick>

08001a3c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a3c:	4801      	ldr	r0, [pc, #4]	@ (8001a44 <DMA1_Channel3_IRQHandler+0x8>)
 8001a3e:	f000 bb9f 	b.w	8002180 <HAL_DMA_IRQHandler>
 8001a42:	bf00      	nop
 8001a44:	20001348 	.word	0x20001348

08001a48 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a48:	4801      	ldr	r0, [pc, #4]	@ (8001a50 <DMA1_Channel6_IRQHandler+0x8>)
 8001a4a:	f000 bb99 	b.w	8002180 <HAL_DMA_IRQHandler>
 8001a4e:	bf00      	nop
 8001a50:	20001490 	.word	0x20001490

08001a54 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a54:	4801      	ldr	r0, [pc, #4]	@ (8001a5c <DMA1_Channel7_IRQHandler+0x8>)
 8001a56:	f000 bb93 	b.w	8002180 <HAL_DMA_IRQHandler>
 8001a5a:	bf00      	nop
 8001a5c:	20001448 	.word	0x20001448

08001a60 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a60:	4801      	ldr	r0, [pc, #4]	@ (8001a68 <USART2_IRQHandler+0x8>)
 8001a62:	f002 b987 	b.w	8003d74 <HAL_UART_IRQHandler>
 8001a66:	bf00      	nop
 8001a68:	200014d8 	.word	0x200014d8

08001a6c <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a6c:	4801      	ldr	r0, [pc, #4]	@ (8001a74 <TIM6_IRQHandler+0x8>)
 8001a6e:	f001 bfc3 	b.w	80039f8 <HAL_TIM_IRQHandler>
 8001a72:	bf00      	nop
 8001a74:	200013f8 	.word	0x200013f8

08001a78 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001a78:	2001      	movs	r0, #1
 8001a7a:	4770      	bx	lr

08001a7c <_kill>:

int _kill(int pid, int sig)
{
 8001a7c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7e:	f003 f965 	bl	8004d4c <__errno>
 8001a82:	2316      	movs	r3, #22
 8001a84:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001a86:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8a:	bd08      	pop	{r3, pc}

08001a8c <_exit>:

void _exit (int status)
{
 8001a8c:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001a8e:	f003 f95d 	bl	8004d4c <__errno>
 8001a92:	2316      	movs	r3, #22
 8001a94:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001a96:	e7fe      	b.n	8001a96 <_exit+0xa>

08001a98 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	490c      	ldr	r1, [pc, #48]	@ (8001acc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001a9c:	680b      	ldr	r3, [r1, #0]
{
 8001a9e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4c0c      	ldr	r4, [pc, #48]	@ (8001ad4 <_sbrk+0x3c>)
 8001aa2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001aa4:	b12b      	cbz	r3, 8001ab2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4418      	add	r0, r3
 8001aa8:	4290      	cmp	r0, r2
 8001aaa:	d807      	bhi.n	8001abc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001aac:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <_sbrk+0x40>)
 8001ab4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4418      	add	r0, r3
 8001ab8:	4290      	cmp	r0, r2
 8001aba:	d9f7      	bls.n	8001aac <_sbrk+0x14>
    errno = ENOMEM;
 8001abc:	f003 f946 	bl	8004d4c <__errno>
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd10      	pop	{r4, pc}
 8001acc:	200013f4 	.word	0x200013f4
 8001ad0:	20008000 	.word	0x20008000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	20001738 	.word	0x20001738

08001adc <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001adc:	4a03      	ldr	r2, [pc, #12]	@ (8001aec <SystemInit+0x10>)
 8001ade:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001ae2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001af0:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001af2:	4812      	ldr	r0, [pc, #72]	@ (8001b3c <MX_TIM6_Init+0x4c>)
 8001af4:	4912      	ldr	r1, [pc, #72]	@ (8001b40 <MX_TIM6_Init+0x50>)
{
 8001af6:	b085      	sub	sp, #20
  htim6.Init.Prescaler = 80;
 8001af8:	2250      	movs	r2, #80	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afa:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 80;
 8001afc:	e9c0 1200 	strd	r1, r2, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 100;
 8001b00:	2264      	movs	r2, #100	@ 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b02:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim6.Init.Period = 100;
 8001b06:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0a:	9303      	str	r3, [sp, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b0e:	f001 fec5 	bl	800389c <HAL_TIM_Base_Init>
 8001b12:	b950      	cbnz	r0, 8001b2a <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b14:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b16:	4809      	ldr	r0, [pc, #36]	@ (8001b3c <MX_TIM6_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b18:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b1a:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b1e:	f002 f817 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001b22:	b928      	cbnz	r0, 8001b30 <MX_TIM6_Init+0x40>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b24:	b005      	add	sp, #20
 8001b26:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001b2a:	f7ff fee3 	bl	80018f4 <Error_Handler>
 8001b2e:	e7f1      	b.n	8001b14 <MX_TIM6_Init+0x24>
    Error_Handler();
 8001b30:	f7ff fee0 	bl	80018f4 <Error_Handler>
}
 8001b34:	b005      	add	sp, #20
 8001b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b3a:	bf00      	nop
 8001b3c:	200013f8 	.word	0x200013f8
 8001b40:	40001000 	.word	0x40001000

08001b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8001b44:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <HAL_TIM_Base_MspInit+0x3c>)
 8001b46:	6802      	ldr	r2, [r0, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d000      	beq.n	8001b4e <HAL_TIM_Base_MspInit+0xa>
 8001b4c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b4e:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 8001b52:	b500      	push	{lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b54:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8001b56:	f041 0110 	orr.w	r1, r1, #16
 8001b5a:	6599      	str	r1, [r3, #88]	@ 0x58
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
{
 8001b5e:	b083      	sub	sp, #12

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001b60:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001b68:	2036      	movs	r0, #54	@ 0x36
 8001b6a:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b6c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001b6e:	f000 f9a9 	bl	8001ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001b72:	2036      	movs	r0, #54	@ 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b74:	b003      	add	sp, #12
 8001b76:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001b7a:	f000 b9df 	b.w	8001f3c <HAL_NVIC_EnableIRQ>
 8001b7e:	bf00      	nop
 8001b80:	40001000 	.word	0x40001000

08001b84 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b84:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b86:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <MX_USART1_UART_Init+0x34>)
 8001b88:	4c0c      	ldr	r4, [pc, #48]	@ (8001bbc <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 115200;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001b90:	220c      	movs	r2, #12
 8001b92:	e9c0 4100 	strd	r4, r1, [r0]
 8001b96:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8001b9a:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8001b9e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba6:	f002 fc79 	bl	800449c <HAL_UART_Init>
 8001baa:	b900      	cbnz	r0, 8001bae <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bac:	bd10      	pop	{r4, pc}
 8001bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001bb2:	f7ff be9f 	b.w	80018f4 <Error_Handler>
 8001bb6:	bf00      	nop
 8001bb8:	20001560 	.word	0x20001560
 8001bbc:	40013800 	.word	0x40013800

08001bc0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc0:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc2:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <MX_USART2_UART_Init+0x34>)
 8001bc4:	4c0c      	ldr	r4, [pc, #48]	@ (8001bf8 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001bcc:	220c      	movs	r2, #12
 8001bce:	e9c0 4100 	strd	r4, r1, [r0]
 8001bd2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8001bd6:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8001bda:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bde:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001be2:	f002 fc5b 	bl	800449c <HAL_UART_Init>
 8001be6:	b900      	cbnz	r0, 8001bea <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001be8:	bd10      	pop	{r4, pc}
 8001bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001bee:	f7ff be81 	b.w	80018f4 <Error_Handler>
 8001bf2:	bf00      	nop
 8001bf4:	200014d8 	.word	0x200014d8
 8001bf8:	40004400 	.word	0x40004400

08001bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bfc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8001c00:	4604      	mov	r4, r0
 8001c02:	b096      	sub	sp, #88	@ 0x58

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c06:	2234      	movs	r2, #52	@ 0x34
 8001c08:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001c0e:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001c12:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c14:	f003 f83e 	bl	8004c94 <memset>
  if(uartHandle->Instance==USART1)
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	4a58      	ldr	r2, [pc, #352]	@ (8001d7c <HAL_UART_MspInit+0x180>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d005      	beq.n	8001c2c <HAL_UART_MspInit+0x30>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001c20:	4a57      	ldr	r2, [pc, #348]	@ (8001d80 <HAL_UART_MspInit+0x184>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d030      	beq.n	8001c88 <HAL_UART_MspInit+0x8c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c26:	b016      	add	sp, #88	@ 0x58
 8001c28:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c2c:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2e:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c30:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c32:	f001 f8d5 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	2800      	cmp	r0, #0
 8001c38:	f040 8093 	bne.w	8001d62 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c3c:	4b51      	ldr	r3, [pc, #324]	@ (8001d84 <HAL_UART_MspInit+0x188>)
 8001c3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c44:	661a      	str	r2, [r3, #96]	@ 0x60
 8001c46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c48:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001c4c:	9200      	str	r2, [sp, #0]
 8001c4e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c5a:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 8001c5e:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c64:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c6c:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c6e:	2400      	movs	r4, #0
 8001c70:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c76:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c7c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f000 facd 	bl	800221c <HAL_GPIO_Init>
}
 8001c82:	b016      	add	sp, #88	@ 0x58
 8001c84:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c88:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8a:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c8c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8e:	f001 f8a7 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d168      	bne.n	8001d68 <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c96:	4b3b      	ldr	r3, [pc, #236]	@ (8001d84 <HAL_UART_MspInit+0x188>)
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001c98:	4e3b      	ldr	r6, [pc, #236]	@ (8001d88 <HAL_UART_MspInit+0x18c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c9c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001ca0:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ca2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ca4:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001ca8:	9202      	str	r2, [sp, #8]
 8001caa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cb6:	2004      	movs	r0, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cc4:	f04f 0800 	mov.w	r8, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cc8:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cca:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	a904      	add	r1, sp, #16
 8001cd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cd8:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f000 fa9e 	bl	800221c <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001ce0:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ce2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	a904      	add	r1, sp, #16
 8001ce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001cec:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cf4:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f000 fa90 	bl	800221c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001cfc:	4923      	ldr	r1, [pc, #140]	@ (8001d8c <HAL_UART_MspInit+0x190>)
 8001cfe:	2202      	movs	r2, #2
 8001d00:	2300      	movs	r3, #0
 8001d02:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d06:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001d08:	2280      	movs	r2, #128	@ 0x80
 8001d0a:	e9c6 3302 	strd	r3, r3, [r6, #8]
 8001d0e:	e9c6 2304 	strd	r2, r3, [r6, #16]
 8001d12:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8001d16:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d18:	f000 f938 	bl	8001f8c <HAL_DMA_Init>
 8001d1c:	bb50      	cbnz	r0, 8001d74 <HAL_UART_MspInit+0x178>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001d1e:	4d1c      	ldr	r5, [pc, #112]	@ (8001d90 <HAL_UART_MspInit+0x194>)
 8001d20:	491c      	ldr	r1, [pc, #112]	@ (8001d94 <HAL_UART_MspInit+0x198>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001d22:	6766      	str	r6, [r4, #116]	@ 0x74
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001d24:	2202      	movs	r2, #2
 8001d26:	2300      	movs	r3, #0
 8001d28:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d2c:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001d2e:	2110      	movs	r1, #16
 8001d30:	2280      	movs	r2, #128	@ 0x80
 8001d32:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8001d36:	e9c5 3305 	strd	r3, r3, [r5, #20]
 8001d3a:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001d3e:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001d40:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d42:	f000 f923 	bl	8001f8c <HAL_DMA_Init>
 8001d46:	b990      	cbnz	r0, 8001d6e <HAL_UART_MspInit+0x172>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	2026      	movs	r0, #38	@ 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001d4e:	6725      	str	r5, [r4, #112]	@ 0x70
 8001d50:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d52:	f000 f8b7 	bl	8001ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d56:	2026      	movs	r0, #38	@ 0x26
 8001d58:	f000 f8f0 	bl	8001f3c <HAL_NVIC_EnableIRQ>
}
 8001d5c:	b016      	add	sp, #88	@ 0x58
 8001d5e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 8001d62:	f7ff fdc7 	bl	80018f4 <Error_Handler>
 8001d66:	e769      	b.n	8001c3c <HAL_UART_MspInit+0x40>
      Error_Handler();
 8001d68:	f7ff fdc4 	bl	80018f4 <Error_Handler>
 8001d6c:	e793      	b.n	8001c96 <HAL_UART_MspInit+0x9a>
      Error_Handler();
 8001d6e:	f7ff fdc1 	bl	80018f4 <Error_Handler>
 8001d72:	e7e9      	b.n	8001d48 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8001d74:	f7ff fdbe 	bl	80018f4 <Error_Handler>
 8001d78:	e7d1      	b.n	8001d1e <HAL_UART_MspInit+0x122>
 8001d7a:	bf00      	nop
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	40004400 	.word	0x40004400
 8001d84:	40021000 	.word	0x40021000
 8001d88:	20001490 	.word	0x20001490
 8001d8c:	4002006c 	.word	0x4002006c
 8001d90:	20001448 	.word	0x20001448
 8001d94:	40020080 	.word	0x40020080

08001d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d9c:	f7ff fe9e 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da0:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001da2:	490d      	ldr	r1, [pc, #52]	@ (8001dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001da4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <LoopForever+0xe>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db8:	4c0a      	ldr	r4, [pc, #40]	@ (8001de4 <LoopForever+0x16>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f002 ffc7 	bl	8004d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dca:	f7ff fd43 	bl	8001854 <main>

08001dce <LoopForever>:

LoopForever:
    b LoopForever
 8001dce:	e7fe      	b.n	8001dce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dd0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ddc:	080050fc 	.word	0x080050fc
  ldr r2, =_sbss
 8001de0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001de4:	20001738 	.word	0x20001738

08001de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC1_2_IRQHandler>
	...

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dee:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <HAL_InitTick+0x40>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	b90b      	cbnz	r3, 8001df8 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001df4:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001df6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001df8:	490d      	ldr	r1, [pc, #52]	@ (8001e30 <HAL_InitTick+0x44>)
 8001dfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dfe:	4605      	mov	r5, r0
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	6808      	ldr	r0, [r1, #0]
 8001e06:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e0a:	f000 f8a5 	bl	8001f58 <HAL_SYSTICK_Config>
 8001e0e:	4604      	mov	r4, r0
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d1ef      	bne.n	8001df4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e14:	2d0f      	cmp	r5, #15
 8001e16:	d8ed      	bhi.n	8001df4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f000 f850 	bl	8001ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_InitTick+0x48>)
 8001e26:	4620      	mov	r0, r4
 8001e28:	601d      	str	r5, [r3, #0]
}
 8001e2a:	bd38      	pop	{r3, r4, r5, pc}
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	20000004 	.word	0x20000004
 8001e34:	2000000c 	.word	0x2000000c

08001e38 <HAL_Init>:
{
 8001e38:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	f000 f830 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e40:	200f      	movs	r0, #15
 8001e42:	f7ff ffd3 	bl	8001dec <HAL_InitTick>
 8001e46:	b110      	cbz	r0, 8001e4e <HAL_Init+0x16>
    status = HAL_ERROR;
 8001e48:	2401      	movs	r4, #1
}
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	bd10      	pop	{r4, pc}
 8001e4e:	4604      	mov	r4, r0
    HAL_MspInit();
 8001e50:	f7ff fdca 	bl	80019e8 <HAL_MspInit>
}
 8001e54:	4620      	mov	r0, r4
 8001e56:	bd10      	pop	{r4, pc}

08001e58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001e58:	4a03      	ldr	r2, [pc, #12]	@ (8001e68 <HAL_IncTick+0x10>)
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <HAL_IncTick+0x14>)
 8001e5c:	6811      	ldr	r1, [r2, #0]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	440b      	add	r3, r1
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200015e8 	.word	0x200015e8
 8001e6c:	20000008 	.word	0x20000008

08001e70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e70:	4b01      	ldr	r3, [pc, #4]	@ (8001e78 <HAL_GetTick+0x8>)
 8001e72:	6818      	ldr	r0, [r3, #0]
}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200015e8 	.word	0x200015e8

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b538      	push	{r3, r4, r5, lr}
 8001e7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff fff6 	bl	8001e70 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e84:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001e86:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001e88:	d002      	beq.n	8001e90 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <HAL_Delay+0x20>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e90:	f7ff ffee 	bl	8001e70 <HAL_GetTick>
 8001e94:	1b40      	subs	r0, r0, r5
 8001e96:	42a0      	cmp	r0, r4
 8001e98:	d3fa      	bcc.n	8001e90 <HAL_Delay+0x14>
  {
  }
}
 8001e9a:	bd38      	pop	{r3, r4, r5, pc}
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4907      	ldr	r1, [pc, #28]	@ (8001ec0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ea2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eaa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb2:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001eba:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <HAL_NVIC_SetPriority+0x70>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ece:	f1c3 0e07 	rsb	lr, r3, #7
 8001ed2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eda:	bf28      	it	cs
 8001edc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee0:	f1bc 0f06 	cmp.w	ip, #6
 8001ee4:	d91c      	bls.n	8001f20 <HAL_NVIC_SetPriority+0x5c>
 8001ee6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	fa03 f30c 	lsl.w	r3, r3, ip
 8001ef2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	fa03 f30e 	lsl.w	r3, r3, lr
 8001efe:	ea21 0303 	bic.w	r3, r1, r3
 8001f02:	fa03 f30c 	lsl.w	r3, r3, ip
 8001f06:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	db0a      	blt.n	8001f26 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f10:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001f14:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001f18:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f20:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f22:	4694      	mov	ip, r2
 8001f24:	e7e7      	b.n	8001ef6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <HAL_NVIC_SetPriority+0x74>)
 8001f28:	f000 000f 	and.w	r0, r0, #15
 8001f2c:	4402      	add	r2, r0
 8001f2e:	7613      	strb	r3, [r2, #24]
 8001f30:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f34:	e000ed00 	.word	0xe000ed00
 8001f38:	e000ecfc 	.word	0xe000ecfc

08001f3c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	db07      	blt.n	8001f50 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f40:	4a04      	ldr	r2, [pc, #16]	@ (8001f54 <HAL_NVIC_EnableIRQ+0x18>)
 8001f42:	0941      	lsrs	r1, r0, #5
 8001f44:	2301      	movs	r3, #1
 8001f46:	f000 001f 	and.w	r0, r0, #31
 8001f4a:	4083      	lsls	r3, r0
 8001f4c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	3801      	subs	r0, #1
 8001f5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001f5e:	d301      	bcc.n	8001f64 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f60:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f62:	4770      	bx	lr
{
 8001f64:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	4c07      	ldr	r4, [pc, #28]	@ (8001f88 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8001f72:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f76:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f78:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f7a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	6119      	str	r1, [r3, #16]
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d050      	beq.n	8002032 <HAL_DMA_Init+0xa6>
{
 8001f90:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f92:	4a2e      	ldr	r2, [pc, #184]	@ (800204c <HAL_DMA_Init+0xc0>)
 8001f94:	6804      	ldr	r4, [r0, #0]
 8001f96:	4294      	cmp	r4, r2
 8001f98:	4603      	mov	r3, r0
 8001f9a:	d941      	bls.n	8002020 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f9c:	492c      	ldr	r1, [pc, #176]	@ (8002050 <HAL_DMA_Init+0xc4>)
 8001f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8002054 <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA2;
 8001fa0:	4d2d      	ldr	r5, [pc, #180]	@ (8002058 <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fa2:	4421      	add	r1, r4
 8001fa4:	fba2 2101 	umull	r2, r1, r2, r1
 8001fa8:	0909      	lsrs	r1, r1, #4
 8001faa:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fac:	2202      	movs	r2, #2
 8001fae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fb2:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb6:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 8001fb8:	6820      	ldr	r0, [r4, #0]
 8001fba:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp |=  hdma->Init.Direction        |
 8001fbc:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbe:	433a      	orrs	r2, r7
 8001fc0:	695f      	ldr	r7, [r3, #20]
 8001fc2:	6459      	str	r1, [r3, #68]	@ 0x44
 8001fc4:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc6:	699f      	ldr	r7, [r3, #24]
 8001fc8:	433a      	orrs	r2, r7
 8001fca:	69df      	ldr	r7, [r3, #28]
 8001fcc:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fce:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fd0:	f420 40ff 	bic.w	r0, r0, #32640	@ 0x7f80
 8001fd4:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd8:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 8001fda:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001fdc:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 8001fe0:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001fe2:	d014      	beq.n	800200e <HAL_DMA_Init+0x82>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fe4:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001fe6:	f001 011c 	and.w	r1, r1, #28
 8001fea:	220f      	movs	r2, #15
 8001fec:	408a      	lsls	r2, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fee:	4088      	lsls	r0, r1
    if (DMA1 == hdma->DmaBaseAddress)
 8001ff0:	491a      	ldr	r1, [pc, #104]	@ (800205c <HAL_DMA_Init+0xd0>)
 8001ff2:	428d      	cmp	r5, r1
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ff4:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8001ff8:	d01d      	beq.n	8002036 <HAL_DMA_Init+0xaa>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ffa:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 8001ffe:	4022      	ands	r2, r4
 8002000:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002004:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 8002008:	4302      	orrs	r2, r0
 800200a:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002010:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002012:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002014:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8002018:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 800201c:	bcf0      	pop	{r4, r5, r6, r7}
 800201e:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002020:	490f      	ldr	r1, [pc, #60]	@ (8002060 <HAL_DMA_Init+0xd4>)
 8002022:	4a0c      	ldr	r2, [pc, #48]	@ (8002054 <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA1;
 8002024:	4d0d      	ldr	r5, [pc, #52]	@ (800205c <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002026:	4421      	add	r1, r4
 8002028:	fba2 2101 	umull	r2, r1, r2, r1
 800202c:	0909      	lsrs	r1, r1, #4
 800202e:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8002030:	e7bc      	b.n	8001fac <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
}
 8002034:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002036:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800203a:	400a      	ands	r2, r1
 800203c:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002040:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 8002044:	4302      	orrs	r2, r0
 8002046:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
 800204a:	e7e0      	b.n	800200e <HAL_DMA_Init+0x82>
 800204c:	40020407 	.word	0x40020407
 8002050:	bffdfbf8 	.word	0xbffdfbf8
 8002054:	cccccccd 	.word	0xcccccccd
 8002058:	40020400 	.word	0x40020400
 800205c:	40020000 	.word	0x40020000
 8002060:	bffdfff8 	.word	0xbffdfff8

08002064 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002064:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002066:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 800206a:	2c01      	cmp	r4, #1
 800206c:	d00b      	beq.n	8002086 <HAL_DMA_Start_IT+0x22>
 800206e:	2401      	movs	r4, #1
 8002070:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002074:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8002078:	2c01      	cmp	r4, #1
 800207a:	fa5f fc84 	uxtb.w	ip, r4
 800207e:	d005      	beq.n	800208c <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002080:	2300      	movs	r3, #0
 8002082:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8002086:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8002088:	bc70      	pop	{r4, r5, r6}
 800208a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800208c:	2502      	movs	r5, #2
 800208e:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 8002092:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002094:	2500      	movs	r5, #0
 8002096:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002098:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800209a:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 800209c:	f026 0601 	bic.w	r6, r6, #1
 80020a0:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020a2:	f005 051c 	and.w	r5, r5, #28
 80020a6:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 80020a8:	fa0c f505 	lsl.w	r5, ip, r5
 80020ac:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020ae:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b0:	6883      	ldr	r3, [r0, #8]
 80020b2:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 80020b4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020b6:	bf0b      	itete	eq
 80020b8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80020ba:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80020bc:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80020be:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80020c0:	b153      	cbz	r3, 80020d8 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	f043 030e 	orr.w	r3, r3, #14
 80020c8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80020d0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80020d2:	6023      	str	r3, [r4, #0]
}
 80020d4:	bc70      	pop	{r4, r5, r6}
 80020d6:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	f023 0304 	bic.w	r3, r3, #4
 80020de:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	f043 030a 	orr.w	r3, r3, #10
 80020e6:	6023      	str	r3, [r4, #0]
 80020e8:	e7ef      	b.n	80020ca <HAL_DMA_Start_IT+0x66>
 80020ea:	bf00      	nop

080020ec <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020ec:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80020f0:	2a02      	cmp	r2, #2
{
 80020f2:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020f4:	d006      	beq.n	8002104 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f6:	2204      	movs	r2, #4
 80020f8:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80020fa:	2200      	movs	r2, #0
    return HAL_ERROR;
 80020fc:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80020fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002102:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002104:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002106:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002108:	6808      	ldr	r0, [r1, #0]
 800210a:	f020 000e 	bic.w	r0, r0, #14
 800210e:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002110:	6808      	ldr	r0, [r1, #0]
 8002112:	f020 0001 	bic.w	r0, r0, #1
 8002116:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002118:	f04f 0c01 	mov.w	ip, #1
 800211c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800211e:	f002 021c 	and.w	r2, r2, #28
 8002122:	fa0c f202 	lsl.w	r2, ip, r2
 8002126:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002128:	2200      	movs	r2, #0
    return status;
 800212a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800212c:	f883 c025 	strb.w	ip, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop

08002138 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002138:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800213c:	2a02      	cmp	r2, #2
 800213e:	d003      	beq.n	8002148 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002140:	2204      	movs	r2, #4
 8002142:	63c2      	str	r2, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8002144:	2001      	movs	r0, #1
}
 8002146:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002148:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800214a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
{
 800214c:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214e:	680c      	ldr	r4, [r1, #0]
 8002150:	f024 040e 	bic.w	r4, r4, #14
 8002154:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002156:	680c      	ldr	r4, [r1, #0]
 8002158:	f024 0401 	bic.w	r4, r4, #1
 800215c:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800215e:	f002 021c 	and.w	r2, r2, #28
 8002162:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f202 	lsl.w	r2, r1, r2
 800216a:	6062      	str	r2, [r4, #4]
    if (hdma->XferAbortCallback != NULL)
 800216c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800216e:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002172:	2400      	movs	r4, #0
 8002174:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8002178:	b102      	cbz	r2, 800217c <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 800217a:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800217c:	2000      	movs	r0, #0
}
 800217e:	bd10      	pop	{r4, pc}

08002180 <HAL_DMA_IRQHandler>:
{
 8002180:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002182:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002184:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8002186:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002188:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800218a:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800218c:	f003 031c 	and.w	r3, r3, #28
 8002190:	2204      	movs	r2, #4
 8002192:	409a      	lsls	r2, r3
 8002194:	420a      	tst	r2, r1
 8002196:	d00e      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x36>
 8002198:	f014 0f04 	tst.w	r4, #4
 800219c:	d00b      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800219e:	682b      	ldr	r3, [r5, #0]
 80021a0:	069b      	lsls	r3, r3, #26
 80021a2:	d403      	bmi.n	80021ac <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021a4:	682b      	ldr	r3, [r5, #0]
 80021a6:	f023 0304 	bic.w	r3, r3, #4
 80021aa:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80021ac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80021ae:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80021b0:	b1cb      	cbz	r3, 80021e6 <HAL_DMA_IRQHandler+0x66>
}
 80021b2:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80021b4:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80021b6:	2202      	movs	r2, #2
 80021b8:	409a      	lsls	r2, r3
 80021ba:	420a      	tst	r2, r1
 80021bc:	d015      	beq.n	80021ea <HAL_DMA_IRQHandler+0x6a>
 80021be:	f014 0f02 	tst.w	r4, #2
 80021c2:	d012      	beq.n	80021ea <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021c4:	682b      	ldr	r3, [r5, #0]
 80021c6:	0699      	lsls	r1, r3, #26
 80021c8:	d406      	bmi.n	80021d8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021ca:	682b      	ldr	r3, [r5, #0]
 80021cc:	f023 030a 	bic.w	r3, r3, #10
 80021d0:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 80021d8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80021da:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80021dc:	2100      	movs	r1, #0
 80021de:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1e5      	bne.n	80021b2 <HAL_DMA_IRQHandler+0x32>
}
 80021e6:	bc70      	pop	{r4, r5, r6}
 80021e8:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80021ea:	2208      	movs	r2, #8
 80021ec:	409a      	lsls	r2, r3
 80021ee:	420a      	tst	r2, r1
 80021f0:	d0f9      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x66>
 80021f2:	0722      	lsls	r2, r4, #28
 80021f4:	d5f7      	bpl.n	80021e6 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f6:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 80021f8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021fa:	f022 020e 	bic.w	r2, r2, #14
 80021fe:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002200:	2201      	movs	r2, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8002206:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002208:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800220a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800220c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8002210:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8002214:	2900      	cmp	r1, #0
 8002216:	d0e6      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x66>
}
 8002218:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800221a:	4708      	bx	r1

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002220:	680c      	ldr	r4, [r1, #0]
{
 8002222:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002224:	2c00      	cmp	r4, #0
 8002226:	f000 80bd 	beq.w	80023a4 <HAL_GPIO_Init+0x188>
  uint32_t position = 0x00u;
 800222a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800222c:	f04f 0b01 	mov.w	fp, #1
 8002230:	e066      	b.n	8002300 <HAL_GPIO_Init+0xe4>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002232:	2a03      	cmp	r2, #3
 8002234:	f040 80b9 	bne.w	80023aa <HAL_GPIO_Init+0x18e>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002238:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 800223c:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002240:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002244:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002246:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800224a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800224c:	d054      	beq.n	80022f8 <HAL_GPIO_Init+0xdc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	4f64      	ldr	r7, [pc, #400]	@ (80023e0 <HAL_GPIO_Init+0x1c4>)
 8002250:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	663a      	str	r2, [r7, #96]	@ 0x60
 8002258:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800225a:	f002 0201 	and.w	r2, r2, #1
 800225e:	9203      	str	r2, [sp, #12]
 8002260:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800226a:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800226e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8002272:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002274:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002278:	260f      	movs	r6, #15
 800227a:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800227e:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002282:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002286:	d013      	beq.n	80022b0 <HAL_GPIO_Init+0x94>
 8002288:	4e56      	ldr	r6, [pc, #344]	@ (80023e4 <HAL_GPIO_Init+0x1c8>)
 800228a:	42b0      	cmp	r0, r6
 800228c:	f000 8099 	beq.w	80023c2 <HAL_GPIO_Init+0x1a6>
 8002290:	4e55      	ldr	r6, [pc, #340]	@ (80023e8 <HAL_GPIO_Init+0x1cc>)
 8002292:	42b0      	cmp	r0, r6
 8002294:	f000 809c 	beq.w	80023d0 <HAL_GPIO_Init+0x1b4>
 8002298:	f8df e154 	ldr.w	lr, [pc, #340]	@ 80023f0 <HAL_GPIO_Init+0x1d4>
 800229c:	4570      	cmp	r0, lr
 800229e:	bf0c      	ite	eq
 80022a0:	f04f 0e03 	moveq.w	lr, #3
 80022a4:	f04f 0e07 	movne.w	lr, #7
 80022a8:	fa0e fc0c 	lsl.w	ip, lr, ip
 80022ac:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022b0:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022b2:	4a4e      	ldr	r2, [pc, #312]	@ (80023ec <HAL_GPIO_Init+0x1d0>)
 80022b4:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022b6:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 80022b8:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80022bc:	4e4b      	ldr	r6, [pc, #300]	@ (80023ec <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 80022be:	bf54      	ite	pl
 80022c0:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80022c2:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 80022c6:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 80022c8:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ca:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80022cc:	4e47      	ldr	r6, [pc, #284]	@ (80023ec <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 80022ce:	bf54      	ite	pl
 80022d0:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80022d2:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 80022d6:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022d8:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022da:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80022dc:	4e43      	ldr	r6, [pc, #268]	@ (80023ec <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 80022de:	bf54      	ite	pl
 80022e0:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80022e2:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 80022e6:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 80022e8:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022ea:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80022ec:	4d3f      	ldr	r5, [pc, #252]	@ (80023ec <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 80022ee:	bf54      	ite	pl
 80022f0:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80022f2:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 80022f6:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 80022f8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fa:	fa34 f203 	lsrs.w	r2, r4, r3
 80022fe:	d051      	beq.n	80023a4 <HAL_GPIO_Init+0x188>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002300:	fa0b fe03 	lsl.w	lr, fp, r3
    if (iocurrent != 0x00u)
 8002304:	ea1e 0a04 	ands.w	sl, lr, r4
 8002308:	d0f6      	beq.n	80022f8 <HAL_GPIO_Init+0xdc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800230a:	684d      	ldr	r5, [r1, #4]
 800230c:	f005 0203 	and.w	r2, r5, #3
 8002310:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002314:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002316:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800231a:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800231e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002322:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002326:	d884      	bhi.n	8002232 <HAL_GPIO_Init+0x16>
        temp = GPIOx->OSPEEDR;
 8002328:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800232c:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800232e:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002332:	fa06 f80c 	lsl.w	r8, r6, ip
 8002336:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800233a:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800233e:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002342:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002344:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002348:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800234c:	fa0e fe03 	lsl.w	lr, lr, r3
 8002350:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8002354:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8002358:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235c:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002360:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002364:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002368:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800236a:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236e:	f47f af63 	bne.w	8002238 <HAL_GPIO_Init+0x1c>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002372:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8002374:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002378:	f003 0e07 	and.w	lr, r3, #7
 800237c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002380:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002384:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 8002388:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800238c:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800238e:	260f      	movs	r6, #15
 8002390:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002394:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002396:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800239a:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 800239e:	f8c8 e020 	str.w	lr, [r8, #32]
 80023a2:	e749      	b.n	8002238 <HAL_GPIO_Init+0x1c>
  }
}
 80023a4:	b005      	add	sp, #20
 80023a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->PUPDR;
 80023aa:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ae:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b0:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b4:	fa06 fe0c 	lsl.w	lr, r6, ip
 80023b8:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 80023bc:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c0:	e73a      	b.n	8002238 <HAL_GPIO_Init+0x1c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c2:	f04f 0e01 	mov.w	lr, #1
 80023c6:	fa0e fc0c 	lsl.w	ip, lr, ip
 80023ca:	ea47 070c 	orr.w	r7, r7, ip
 80023ce:	e76f      	b.n	80022b0 <HAL_GPIO_Init+0x94>
 80023d0:	f04f 0e02 	mov.w	lr, #2
 80023d4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80023d8:	ea47 070c 	orr.w	r7, r7, ip
 80023dc:	e768      	b.n	80022b0 <HAL_GPIO_Init+0x94>
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48000400 	.word	0x48000400
 80023e8:	48000800 	.word	0x48000800
 80023ec:	40010400 	.word	0x40010400
 80023f0:	48000c00 	.word	0x48000c00

080023f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f4:	b10a      	cbz	r2, 80023fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023f6:	6181      	str	r1, [r0, #24]
 80023f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023fa:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop

08002400 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002400:	4b02      	ldr	r3, [pc, #8]	@ (800240c <HAL_PWREx_GetVoltageRange+0xc>)
 8002402:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002404:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40007000 	.word	0x40007000

08002410 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002410:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002414:	d00e      	beq.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002416:	4a1b      	ldr	r2, [pc, #108]	@ (8002484 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002418:	6813      	ldr	r3, [r2, #0]
 800241a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002422:	d005      	beq.n	8002430 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002424:	6813      	ldr	r3, [r2, #0]
 8002426:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800242a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800242e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002430:	2000      	movs	r0, #0
 8002432:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002434:	4913      	ldr	r1, [pc, #76]	@ (8002484 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002436:	680b      	ldr	r3, [r1, #0]
 8002438:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800243c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002440:	d0f6      	beq.n	8002430 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002442:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002444:	4a10      	ldr	r2, [pc, #64]	@ (8002488 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002446:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800244a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800244e:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002450:	6813      	ldr	r3, [r2, #0]
 8002452:	4a0e      	ldr	r2, [pc, #56]	@ (800248c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002454:	2032      	movs	r0, #50	@ 0x32
 8002456:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245a:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002462:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002464:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002468:	d506      	bpl.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x68>
 800246a:	e000      	b.n	800246e <HAL_PWREx_ControlVoltageScaling+0x5e>
 800246c:	b123      	cbz	r3, 8002478 <HAL_PWREx_ControlVoltageScaling+0x68>
 800246e:	694a      	ldr	r2, [r1, #20]
 8002470:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8002472:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002476:	d4f9      	bmi.n	800246c <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002478:	4b02      	ldr	r3, [pc, #8]	@ (8002484 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	055b      	lsls	r3, r3, #21
 800247e:	d5d7      	bpl.n	8002430 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8002480:	2003      	movs	r0, #3
}
 8002482:	4770      	bx	lr
 8002484:	40007000 	.word	0x40007000
 8002488:	20000004 	.word	0x20000004
 800248c:	431bde83 	.word	0x431bde83

08002490 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002490:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002492:	4d20      	ldr	r5, [pc, #128]	@ (8002514 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002494:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002496:	00db      	lsls	r3, r3, #3
{
 8002498:	b083      	sub	sp, #12
 800249a:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800249c:	d51a      	bpl.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800249e:	f7ff ffaf 	bl	8002400 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024a2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80024a6:	d027      	beq.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024a8:	2c80      	cmp	r4, #128	@ 0x80
 80024aa:	d82c      	bhi.n	8002506 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024ac:	d02f      	beq.n	800250e <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024ae:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 80024b2:	fab4 f484 	clz	r4, r4
 80024b6:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024b8:	4917      	ldr	r1, [pc, #92]	@ (8002518 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80024ba:	680b      	ldr	r3, [r1, #0]
 80024bc:	f023 0307 	bic.w	r3, r3, #7
 80024c0:	4323      	orrs	r3, r4
 80024c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024c4:	6808      	ldr	r0, [r1, #0]
 80024c6:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80024ca:	1b00      	subs	r0, r0, r4
 80024cc:	bf18      	it	ne
 80024ce:	2001      	movne	r0, #1
 80024d0:	b003      	add	sp, #12
 80024d2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80024d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024da:	65ab      	str	r3, [r5, #88]	@ 0x58
 80024dc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80024de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80024e6:	f7ff ff8b 	bl	8002400 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80024ea:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ec:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80024f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f4:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f6:	d1d7      	bne.n	80024a8 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80024f8:	2c80      	cmp	r4, #128	@ 0x80
 80024fa:	d906      	bls.n	800250a <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80024fc:	2ca1      	cmp	r4, #161	@ 0xa1
 80024fe:	bf34      	ite	cc
 8002500:	2401      	movcc	r4, #1
 8002502:	2402      	movcs	r4, #2
 8002504:	e7d8      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002506:	2403      	movs	r4, #3
 8002508:	e7d6      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800250a:	2400      	movs	r4, #0
 800250c:	e7d4      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 800250e:	2402      	movs	r4, #2
 8002510:	e7d2      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x28>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	40022000 	.word	0x40022000

0800251c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251c:	4a28      	ldr	r2, [pc, #160]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800251e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002520:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002522:	f013 030c 	ands.w	r3, r3, #12
 8002526:	d005      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x18>
 8002528:	2b0c      	cmp	r3, #12
 800252a:	d035      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800252c:	2b04      	cmp	r3, #4
 800252e:	d141      	bne.n	80025b4 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8002530:	4824      	ldr	r0, [pc, #144]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002532:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002534:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002536:	6811      	ldr	r1, [r2, #0]
 8002538:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800253a:	bf54      	ite	pl
 800253c:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002540:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002542:	4921      	ldr	r1, [pc, #132]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002544:	bf54      	ite	pl
 8002546:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800254a:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800254e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002552:	b303      	cbz	r3, 8002596 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002554:	2b0c      	cmp	r3, #12
 8002556:	d11d      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002558:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002560:	2b02      	cmp	r3, #2
 8002562:	d025      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x94>
 8002564:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002566:	2b03      	cmp	r3, #3
 8002568:	bf08      	it	eq
 800256a:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800256c:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800256e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002570:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002578:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800257c:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002580:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002582:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002586:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002588:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800258a:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800258e:	fbb2 f0f3 	udiv	r0, r2, r3
 8002592:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002594:	2000      	movs	r0, #0
}
 8002596:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002598:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800259c:	2a01      	cmp	r2, #1
 800259e:	d0c9      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80025a8:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025aa:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 80025ae:	d1d9      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 80025b0:	4804      	ldr	r0, [pc, #16]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 80025b2:	e7db      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	4805      	ldr	r0, [pc, #20]	@ (80025cc <HAL_RCC_GetSysClockFreq+0xb0>)
 80025b8:	bf18      	it	ne
 80025ba:	2000      	movne	r0, #0
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	08005068 	.word	0x08005068
 80025cc:	007a1200 	.word	0x007a1200

080025d0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80025d0:	2800      	cmp	r0, #0
 80025d2:	f000 821c 	beq.w	8002a0e <HAL_RCC_OscConfig+0x43e>
{
 80025d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025da:	4aa3      	ldr	r2, [pc, #652]	@ (8002868 <HAL_RCC_OscConfig+0x298>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025dc:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025de:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e0:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025e2:	06df      	lsls	r7, r3, #27
{
 80025e4:	b083      	sub	sp, #12
 80025e6:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ec:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025f0:	d52e      	bpl.n	8002650 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025f2:	2d00      	cmp	r5, #0
 80025f4:	f000 813f 	beq.w	8002876 <HAL_RCC_OscConfig+0x2a6>
 80025f8:	2d0c      	cmp	r5, #12
 80025fa:	f000 8139 	beq.w	8002870 <HAL_RCC_OscConfig+0x2a0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025fe:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8002600:	4f99      	ldr	r7, [pc, #612]	@ (8002868 <HAL_RCC_OscConfig+0x298>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 81af 	beq.w	8002966 <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_MSI_ENABLE();
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002610:	f7ff fc2e 	bl	8001e70 <HAL_GetTick>
 8002614:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002616:	e006      	b.n	8002626 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002618:	f7ff fc2a 	bl	8001e70 <HAL_GetTick>
 800261c:	eba0 0008 	sub.w	r0, r0, r8
 8002620:	2802      	cmp	r0, #2
 8002622:	f200 81b0 	bhi.w	8002986 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	079a      	lsls	r2, r3, #30
 800262a:	d5f5      	bpl.n	8002618 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f043 0308 	orr.w	r3, r3, #8
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002638:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800263c:	4313      	orrs	r3, r2
 800263e:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a22      	ldr	r2, [r4, #32]
 8002644:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002648:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800264c:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	07d8      	lsls	r0, r3, #31
 8002652:	f100 80e0 	bmi.w	8002816 <HAL_RCC_OscConfig+0x246>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	0798      	lsls	r0, r3, #30
 8002658:	d523      	bpl.n	80026a2 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800265a:	2d04      	cmp	r5, #4
 800265c:	f000 815f 	beq.w	800291e <HAL_RCC_OscConfig+0x34e>
 8002660:	2d0c      	cmp	r5, #12
 8002662:	f000 8159 	beq.w	8002918 <HAL_RCC_OscConfig+0x348>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002666:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002668:	4e7f      	ldr	r6, [pc, #508]	@ (8002868 <HAL_RCC_OscConfig+0x298>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 81a6 	beq.w	80029bc <HAL_RCC_OscConfig+0x3ec>
        __HAL_RCC_HSI_ENABLE();
 8002670:	6833      	ldr	r3, [r6, #0]
 8002672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002676:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002678:	f7ff fbfa 	bl	8001e70 <HAL_GetTick>
 800267c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800267e:	e005      	b.n	800268c <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002680:	f7ff fbf6 	bl	8001e70 <HAL_GetTick>
 8002684:	1bc0      	subs	r0, r0, r7
 8002686:	2802      	cmp	r0, #2
 8002688:	f200 817d 	bhi.w	8002986 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800268c:	6833      	ldr	r3, [r6, #0]
 800268e:	055a      	lsls	r2, r3, #21
 8002690:	d5f6      	bpl.n	8002680 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	6873      	ldr	r3, [r6, #4]
 8002694:	6922      	ldr	r2, [r4, #16]
 8002696:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800269a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800269e:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	071e      	lsls	r6, r3, #28
 80026a4:	d531      	bpl.n	800270a <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a6:	6963      	ldr	r3, [r4, #20]
      uint32_t csr_temp = RCC->CSR;
 80026a8:	4e6f      	ldr	r6, [pc, #444]	@ (8002868 <HAL_RCC_OscConfig+0x298>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8147 	beq.w	800293e <HAL_RCC_OscConfig+0x36e>
      uint32_t csr_temp = RCC->CSR;
 80026b0:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80026b4:	69a2      	ldr	r2, [r4, #24]
 80026b6:	f003 0110 	and.w	r1, r3, #16
 80026ba:	428a      	cmp	r2, r1
 80026bc:	d00f      	beq.n	80026de <HAL_RCC_OscConfig+0x10e>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80026be:	f003 0103 	and.w	r1, r3, #3
 80026c2:	2902      	cmp	r1, #2
 80026c4:	f000 8118 	beq.w	80028f8 <HAL_RCC_OscConfig+0x328>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80026c8:	07d8      	lsls	r0, r3, #31
 80026ca:	f100 820b 	bmi.w	8002ae4 <HAL_RCC_OscConfig+0x514>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80026ce:	4966      	ldr	r1, [pc, #408]	@ (8002868 <HAL_RCC_OscConfig+0x298>)
 80026d0:	f8d1 3094 	ldr.w	r3, [r1, #148]	@ 0x94
 80026d4:	f023 0310 	bic.w	r3, r3, #16
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      __HAL_RCC_LSI_ENABLE();
 80026de:	4e62      	ldr	r6, [pc, #392]	@ (8002868 <HAL_RCC_OscConfig+0x298>)
 80026e0:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80026ec:	f7ff fbc0 	bl	8001e70 <HAL_GetTick>
 80026f0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026f2:	e005      	b.n	8002700 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7ff fbbc 	bl	8001e70 <HAL_GetTick>
 80026f8:	1bc0      	subs	r0, r0, r7
 80026fa:	2811      	cmp	r0, #17
 80026fc:	f200 8143 	bhi.w	8002986 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002700:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002704:	079a      	lsls	r2, r3, #30
 8002706:	d5f5      	bpl.n	80026f4 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	075f      	lsls	r7, r3, #29
 800270c:	d546      	bpl.n	800279c <HAL_RCC_OscConfig+0x1cc>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800270e:	4b56      	ldr	r3, [pc, #344]	@ (8002868 <HAL_RCC_OscConfig+0x298>)
 8002710:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002712:	00d6      	lsls	r6, r2, #3
 8002714:	f100 8150 	bmi.w	80029b8 <HAL_RCC_OscConfig+0x3e8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800271a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800271e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800272a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272c:	4f4f      	ldr	r7, [pc, #316]	@ (800286c <HAL_RCC_OscConfig+0x29c>)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	05d8      	lsls	r0, r3, #23
 8002732:	f140 81b2 	bpl.w	8002a9a <HAL_RCC_OscConfig+0x4ca>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002736:	68a3      	ldr	r3, [r4, #8]
 8002738:	07d9      	lsls	r1, r3, #31
 800273a:	f140 816a 	bpl.w	8002a12 <HAL_RCC_OscConfig+0x442>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800273e:	494a      	ldr	r1, [pc, #296]	@ (8002868 <HAL_RCC_OscConfig+0x298>)
 8002740:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002744:	f003 0080 	and.w	r0, r3, #128	@ 0x80
 8002748:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800274c:	4302      	orrs	r2, r0
 800274e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002752:	f013 0f04 	tst.w	r3, #4
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002756:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800275a:	bf1e      	ittt	ne
 800275c:	f043 0304 	orrne.w	r3, r3, #4
 8002760:	f8c1 3090 	strne.w	r3, [r1, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002764:	f8d1 3090 	ldrne.w	r3, [r1, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8002770:	f7ff fb7e 	bl	8001e70 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002774:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 8002868 <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8002778:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277e:	e005      	b.n	800278c <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7ff fb76 	bl	8001e70 <HAL_GetTick>
 8002784:	1bc0      	subs	r0, r0, r7
 8002786:	4548      	cmp	r0, r9
 8002788:	f200 80fd 	bhi.w	8002986 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278c:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8002790:	079b      	lsls	r3, r3, #30
 8002792:	d5f5      	bpl.n	8002780 <HAL_RCC_OscConfig+0x1b0>
    if(pwrclkchanged == SET)
 8002794:	2e00      	cmp	r6, #0
 8002796:	f040 817a 	bne.w	8002a8e <HAL_RCC_OscConfig+0x4be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	0699      	lsls	r1, r3, #26
 800279e:	d518      	bpl.n	80027d2 <HAL_RCC_OscConfig+0x202>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      __HAL_RCC_HSI48_ENABLE();
 80027a2:	4e31      	ldr	r6, [pc, #196]	@ (8002868 <HAL_RCC_OscConfig+0x298>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 815e 	beq.w	8002a66 <HAL_RCC_OscConfig+0x496>
      __HAL_RCC_HSI48_ENABLE();
 80027aa:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80027b6:	f7ff fb5b 	bl	8001e70 <HAL_GetTick>
 80027ba:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027bc:	e005      	b.n	80027ca <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027be:	f7ff fb57 	bl	8001e70 <HAL_GetTick>
 80027c2:	1bc0      	subs	r0, r0, r7
 80027c4:	2802      	cmp	r0, #2
 80027c6:	f200 80de 	bhi.w	8002986 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ca:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80027ce:	079a      	lsls	r2, r3, #30
 80027d0:	d5f5      	bpl.n	80027be <HAL_RCC_OscConfig+0x1ee>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80027d4:	b1eb      	cbz	r3, 8002812 <HAL_RCC_OscConfig+0x242>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	f000 81a2 	beq.w	8002b20 <HAL_RCC_OscConfig+0x550>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027dc:	2d0c      	cmp	r5, #12
 80027de:	f000 808b 	beq.w	80028f8 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80027e2:	4c21      	ldr	r4, [pc, #132]	@ (8002868 <HAL_RCC_OscConfig+0x298>)
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027ec:	f7ff fb40 	bl	8001e70 <HAL_GetTick>
 80027f0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f2:	e005      	b.n	8002800 <HAL_RCC_OscConfig+0x230>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7ff fb3c 	bl	8001e70 <HAL_GetTick>
 80027f8:	1b40      	subs	r0, r0, r5
 80027fa:	2802      	cmp	r0, #2
 80027fc:	f200 80c3 	bhi.w	8002986 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	019b      	lsls	r3, r3, #6
 8002804:	d4f6      	bmi.n	80027f4 <HAL_RCC_OscConfig+0x224>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002806:	68e3      	ldr	r3, [r4, #12]
 8002808:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800280c:	f023 0303 	bic.w	r3, r3, #3
 8002810:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8002812:	2000      	movs	r0, #0
 8002814:	e071      	b.n	80028fa <HAL_RCC_OscConfig+0x32a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002816:	2d08      	cmp	r5, #8
 8002818:	d074      	beq.n	8002904 <HAL_RCC_OscConfig+0x334>
 800281a:	2d0c      	cmp	r5, #12
 800281c:	d070      	beq.n	8002900 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281e:	6863      	ldr	r3, [r4, #4]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002824:	f000 80b3 	beq.w	800298e <HAL_RCC_OscConfig+0x3be>
 8002828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800282c:	f000 814d 	beq.w	8002aca <HAL_RCC_OscConfig+0x4fa>
 8002830:	4f0d      	ldr	r7, [pc, #52]	@ (8002868 <HAL_RCC_OscConfig+0x298>)
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002838:	603a      	str	r2, [r7, #0]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002840:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 80a8 	bne.w	8002998 <HAL_RCC_OscConfig+0x3c8>
        tickstart = HAL_GetTick();
 8002848:	f7ff fb12 	bl	8001e70 <HAL_GetTick>
 800284c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800284e:	e006      	b.n	800285e <HAL_RCC_OscConfig+0x28e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002850:	f7ff fb0e 	bl	8001e70 <HAL_GetTick>
 8002854:	eba0 0008 	sub.w	r0, r0, r8
 8002858:	2864      	cmp	r0, #100	@ 0x64
 800285a:	f200 8094 	bhi.w	8002986 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	039b      	lsls	r3, r3, #14
 8002862:	d4f5      	bmi.n	8002850 <HAL_RCC_OscConfig+0x280>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	e6f6      	b.n	8002656 <HAL_RCC_OscConfig+0x86>
 8002868:	40021000 	.word	0x40021000
 800286c:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002870:	2e01      	cmp	r6, #1
 8002872:	f47f aec4 	bne.w	80025fe <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002876:	4ba6      	ldr	r3, [pc, #664]	@ (8002b10 <HAL_RCC_OscConfig+0x540>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	0798      	lsls	r0, r3, #30
 800287c:	d439      	bmi.n	80028f2 <HAL_RCC_OscConfig+0x322>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800287e:	4ba4      	ldr	r3, [pc, #656]	@ (8002b10 <HAL_RCC_OscConfig+0x540>)
 8002880:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	0711      	lsls	r1, r2, #28
 8002886:	bf56      	itet	pl
 8002888:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 800288c:	681b      	ldrmi	r3, [r3, #0]
 800288e:	091b      	lsrpl	r3, r3, #4
 8002890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002894:	4298      	cmp	r0, r3
 8002896:	f200 80a3 	bhi.w	80029e0 <HAL_RCC_OscConfig+0x410>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800289a:	4b9d      	ldr	r3, [pc, #628]	@ (8002b10 <HAL_RCC_OscConfig+0x540>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f042 0208 	orr.w	r2, r2, #8
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80028aa:	4302      	orrs	r2, r0
 80028ac:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	6a21      	ldr	r1, [r4, #32]
 80028b2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80028b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028ba:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028bc:	2d00      	cmp	r5, #0
 80028be:	f000 80fe 	beq.w	8002abe <HAL_RCC_OscConfig+0x4ee>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c2:	f7ff fe2b 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80028c6:	4b92      	ldr	r3, [pc, #584]	@ (8002b10 <HAL_RCC_OscConfig+0x540>)
 80028c8:	4a92      	ldr	r2, [pc, #584]	@ (8002b14 <HAL_RCC_OscConfig+0x544>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 80028d2:	4a91      	ldr	r2, [pc, #580]	@ (8002b18 <HAL_RCC_OscConfig+0x548>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 80028dc:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028de:	4a8f      	ldr	r2, [pc, #572]	@ (8002b1c <HAL_RCC_OscConfig+0x54c>)
 80028e0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80028e2:	f7ff fa83 	bl	8001dec <HAL_InitTick>
        if(status != HAL_OK)
 80028e6:	b940      	cbnz	r0, 80028fa <HAL_RCC_OscConfig+0x32a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	07d8      	lsls	r0, r3, #31
 80028ec:	f57f aeb3 	bpl.w	8002656 <HAL_RCC_OscConfig+0x86>
 80028f0:	e791      	b.n	8002816 <HAL_RCC_OscConfig+0x246>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028f2:	69e3      	ldr	r3, [r4, #28]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1c2      	bne.n	800287e <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 80028f8:	2001      	movs	r0, #1
}
 80028fa:	b003      	add	sp, #12
 80028fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002900:	2e03      	cmp	r6, #3
 8002902:	d18c      	bne.n	800281e <HAL_RCC_OscConfig+0x24e>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	4a82      	ldr	r2, [pc, #520]	@ (8002b10 <HAL_RCC_OscConfig+0x540>)
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	0391      	lsls	r1, r2, #14
 800290a:	f57f aea4 	bpl.w	8002656 <HAL_RCC_OscConfig+0x86>
 800290e:	6862      	ldr	r2, [r4, #4]
 8002910:	2a00      	cmp	r2, #0
 8002912:	f47f aea0 	bne.w	8002656 <HAL_RCC_OscConfig+0x86>
 8002916:	e7ef      	b.n	80028f8 <HAL_RCC_OscConfig+0x328>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002918:	2e02      	cmp	r6, #2
 800291a:	f47f aea4 	bne.w	8002666 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800291e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b10 <HAL_RCC_OscConfig+0x540>)
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	0551      	lsls	r1, r2, #21
 8002924:	d502      	bpl.n	800292c <HAL_RCC_OscConfig+0x35c>
 8002926:	68e2      	ldr	r2, [r4, #12]
 8002928:	2a00      	cmp	r2, #0
 800292a:	d0e5      	beq.n	80028f8 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4978      	ldr	r1, [pc, #480]	@ (8002b10 <HAL_RCC_OscConfig+0x540>)
 800292e:	6920      	ldr	r0, [r4, #16]
 8002930:	684a      	ldr	r2, [r1, #4]
 8002932:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 8002936:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800293a:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293c:	e6b1      	b.n	80026a2 <HAL_RCC_OscConfig+0xd2>
      __HAL_RCC_LSI_DISABLE();
 800293e:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800294a:	f7ff fa91 	bl	8001e70 <HAL_GetTick>
 800294e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002950:	e004      	b.n	800295c <HAL_RCC_OscConfig+0x38c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002952:	f7ff fa8d 	bl	8001e70 <HAL_GetTick>
 8002956:	1bc0      	subs	r0, r0, r7
 8002958:	2811      	cmp	r0, #17
 800295a:	d814      	bhi.n	8002986 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800295c:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002960:	079b      	lsls	r3, r3, #30
 8002962:	d4f6      	bmi.n	8002952 <HAL_RCC_OscConfig+0x382>
 8002964:	e6d0      	b.n	8002708 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_MSI_DISABLE();
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800296e:	f7ff fa7f 	bl	8001e70 <HAL_GetTick>
 8002972:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	079b      	lsls	r3, r3, #30
 8002978:	d5b6      	bpl.n	80028e8 <HAL_RCC_OscConfig+0x318>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800297a:	f7ff fa79 	bl	8001e70 <HAL_GetTick>
 800297e:	eba0 0008 	sub.w	r0, r0, r8
 8002982:	2802      	cmp	r0, #2
 8002984:	d9f6      	bls.n	8002974 <HAL_RCC_OscConfig+0x3a4>
            return HAL_TIMEOUT;
 8002986:	2003      	movs	r0, #3
}
 8002988:	b003      	add	sp, #12
 800298a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298e:	4a60      	ldr	r2, [pc, #384]	@ (8002b10 <HAL_RCC_OscConfig+0x540>)
 8002990:	6813      	ldr	r3, [r2, #0]
 8002992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002996:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002998:	f7ff fa6a 	bl	8001e70 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800299c:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8002b10 <HAL_RCC_OscConfig+0x540>
        tickstart = HAL_GetTick();
 80029a0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a2:	e004      	b.n	80029ae <HAL_RCC_OscConfig+0x3de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7ff fa64 	bl	8001e70 <HAL_GetTick>
 80029a8:	1bc0      	subs	r0, r0, r7
 80029aa:	2864      	cmp	r0, #100	@ 0x64
 80029ac:	d8eb      	bhi.n	8002986 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ae:	f8d8 3000 	ldr.w	r3, [r8]
 80029b2:	039a      	lsls	r2, r3, #14
 80029b4:	d5f6      	bpl.n	80029a4 <HAL_RCC_OscConfig+0x3d4>
 80029b6:	e755      	b.n	8002864 <HAL_RCC_OscConfig+0x294>
    FlagStatus       pwrclkchanged = RESET;
 80029b8:	2600      	movs	r6, #0
 80029ba:	e6b7      	b.n	800272c <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80029bc:	6833      	ldr	r3, [r6, #0]
 80029be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029c2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80029c4:	f7ff fa54 	bl	8001e70 <HAL_GetTick>
 80029c8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ca:	e004      	b.n	80029d6 <HAL_RCC_OscConfig+0x406>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029cc:	f7ff fa50 	bl	8001e70 <HAL_GetTick>
 80029d0:	1bc0      	subs	r0, r0, r7
 80029d2:	2802      	cmp	r0, #2
 80029d4:	d8d7      	bhi.n	8002986 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d6:	6833      	ldr	r3, [r6, #0]
 80029d8:	055b      	lsls	r3, r3, #21
 80029da:	d4f7      	bmi.n	80029cc <HAL_RCC_OscConfig+0x3fc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	e660      	b.n	80026a2 <HAL_RCC_OscConfig+0xd2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029e0:	f7ff fd56 	bl	8002490 <RCC_SetFlashLatencyFromMSIRange>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d187      	bne.n	80028f8 <HAL_RCC_OscConfig+0x328>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e8:	4b49      	ldr	r3, [pc, #292]	@ (8002b10 <HAL_RCC_OscConfig+0x540>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	f042 0208 	orr.w	r2, r2, #8
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80029f6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	6a21      	ldr	r1, [r4, #32]
 8002a02:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002a06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	e759      	b.n	80028c2 <HAL_RCC_OscConfig+0x2f2>
    return HAL_ERROR;
 8002a0e:	2001      	movs	r0, #1
}
 8002a10:	4770      	bx	lr
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a12:	4f3f      	ldr	r7, [pc, #252]	@ (8002b10 <HAL_RCC_OscConfig+0x540>)
 8002a14:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a20:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002a24:	f022 0204 	bic.w	r2, r2, #4
 8002a28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f47f ae9f 	bne.w	8002770 <HAL_RCC_OscConfig+0x1a0>
      tickstart = HAL_GetTick();
 8002a32:	f7ff fa1d 	bl	8001e70 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a36:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002a3a:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a3c:	e005      	b.n	8002a4a <HAL_RCC_OscConfig+0x47a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7ff fa17 	bl	8001e70 <HAL_GetTick>
 8002a42:	eba0 0008 	sub.w	r0, r0, r8
 8002a46:	4548      	cmp	r0, r9
 8002a48:	d89d      	bhi.n	8002986 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a4e:	0798      	lsls	r0, r3, #30
 8002a50:	d4f5      	bmi.n	8002a3e <HAL_RCC_OscConfig+0x46e>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if(pwrclkchanged == SET)
 8002a5e:	2e00      	cmp	r6, #0
 8002a60:	f43f ae9b 	beq.w	800279a <HAL_RCC_OscConfig+0x1ca>
 8002a64:	e013      	b.n	8002a8e <HAL_RCC_OscConfig+0x4be>
      __HAL_RCC_HSI48_DISABLE();
 8002a66:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8002a72:	f7ff f9fd 	bl	8001e70 <HAL_GetTick>
 8002a76:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a78:	e004      	b.n	8002a84 <HAL_RCC_OscConfig+0x4b4>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a7a:	f7ff f9f9 	bl	8001e70 <HAL_GetTick>
 8002a7e:	1bc0      	subs	r0, r0, r7
 8002a80:	2802      	cmp	r0, #2
 8002a82:	d880      	bhi.n	8002986 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a84:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002a88:	079b      	lsls	r3, r3, #30
 8002a8a:	d4f6      	bmi.n	8002a7a <HAL_RCC_OscConfig+0x4aa>
 8002a8c:	e6a1      	b.n	80027d2 <HAL_RCC_OscConfig+0x202>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8e:	4a20      	ldr	r2, [pc, #128]	@ (8002b10 <HAL_RCC_OscConfig+0x540>)
 8002a90:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a98:	e67f      	b.n	800279a <HAL_RCC_OscConfig+0x1ca>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002aa2:	f7ff f9e5 	bl	8001e70 <HAL_GetTick>
 8002aa6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	05da      	lsls	r2, r3, #23
 8002aac:	f53f ae43 	bmi.w	8002736 <HAL_RCC_OscConfig+0x166>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab0:	f7ff f9de 	bl	8001e70 <HAL_GetTick>
 8002ab4:	eba0 0008 	sub.w	r0, r0, r8
 8002ab8:	2802      	cmp	r0, #2
 8002aba:	d9f5      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x4d8>
 8002abc:	e763      	b.n	8002986 <HAL_RCC_OscConfig+0x3b6>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002abe:	f7ff fce7 	bl	8002490 <RCC_SetFlashLatencyFromMSIRange>
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	f43f aefd 	beq.w	80028c2 <HAL_RCC_OscConfig+0x2f2>
 8002ac8:	e716      	b.n	80028f8 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ace:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ae0:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae2:	e759      	b.n	8002998 <HAL_RCC_OscConfig+0x3c8>
          __HAL_RCC_LSI_DISABLE();
 8002ae4:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8002af0:	f7ff f9be 	bl	8001e70 <HAL_GetTick>
 8002af4:	4607      	mov	r7, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af6:	e005      	b.n	8002b04 <HAL_RCC_OscConfig+0x534>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af8:	f7ff f9ba 	bl	8001e70 <HAL_GetTick>
 8002afc:	1bc0      	subs	r0, r0, r7
 8002afe:	2811      	cmp	r0, #17
 8002b00:	f63f af41 	bhi.w	8002986 <HAL_RCC_OscConfig+0x3b6>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b04:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002b08:	0799      	lsls	r1, r3, #30
 8002b0a:	d4f5      	bmi.n	8002af8 <HAL_RCC_OscConfig+0x528>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002b0c:	69a2      	ldr	r2, [r4, #24]
 8002b0e:	e5de      	b.n	80026ce <HAL_RCC_OscConfig+0xfe>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	080050a0 	.word	0x080050a0
 8002b18:	2000000c 	.word	0x2000000c
 8002b1c:	20000004 	.word	0x20000004
      pll_config = RCC->PLLCFGR;
 8002b20:	4e40      	ldr	r6, [pc, #256]	@ (8002c24 <HAL_RCC_OscConfig+0x654>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      pll_config = RCC->PLLCFGR;
 8002b24:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b26:	f003 0103 	and.w	r1, r3, #3
 8002b2a:	4291      	cmp	r1, r2
 8002b2c:	d042      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x5e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2e:	2d0c      	cmp	r5, #12
 8002b30:	f43f aee2 	beq.w	80028f8 <HAL_RCC_OscConfig+0x328>
            __HAL_RCC_PLL_DISABLE();
 8002b34:	4d3b      	ldr	r5, [pc, #236]	@ (8002c24 <HAL_RCC_OscConfig+0x654>)
 8002b36:	682b      	ldr	r3, [r5, #0]
 8002b38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b3c:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002b3e:	f7ff f997 	bl	8001e70 <HAL_GetTick>
 8002b42:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b44:	e005      	b.n	8002b52 <HAL_RCC_OscConfig+0x582>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b46:	f7ff f993 	bl	8001e70 <HAL_GetTick>
 8002b4a:	1b80      	subs	r0, r0, r6
 8002b4c:	2802      	cmp	r0, #2
 8002b4e:	f63f af1a 	bhi.w	8002986 <HAL_RCC_OscConfig+0x3b6>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b52:	682b      	ldr	r3, [r5, #0]
 8002b54:	019f      	lsls	r7, r3, #6
 8002b56:	d4f6      	bmi.n	8002b46 <HAL_RCC_OscConfig+0x576>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b58:	68e9      	ldr	r1, [r5, #12]
 8002b5a:	4b33      	ldr	r3, [pc, #204]	@ (8002c28 <HAL_RCC_OscConfig+0x658>)
 8002b5c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	4e31      	ldr	r6, [pc, #196]	@ (8002c24 <HAL_RCC_OscConfig+0x654>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b60:	400b      	ands	r3, r1
 8002b62:	4313      	orrs	r3, r2
 8002b64:	e9d4 210d 	ldrd	r2, r1, [r4, #52]	@ 0x34
 8002b68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b6c:	3a01      	subs	r2, #1
 8002b6e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002b72:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8002b76:	0849      	lsrs	r1, r1, #1
 8002b78:	3901      	subs	r1, #1
 8002b7a:	0852      	lsrs	r2, r2, #1
 8002b7c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002b80:	3a01      	subs	r2, #1
 8002b82:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002b86:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8002b88:	682b      	ldr	r3, [r5, #0]
 8002b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b8e:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b90:	68eb      	ldr	r3, [r5, #12]
 8002b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8002b98:	f7ff f96a 	bl	8001e70 <HAL_GetTick>
 8002b9c:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9e:	e005      	b.n	8002bac <HAL_RCC_OscConfig+0x5dc>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7ff f966 	bl	8001e70 <HAL_GetTick>
 8002ba4:	1b00      	subs	r0, r0, r4
 8002ba6:	2802      	cmp	r0, #2
 8002ba8:	f63f aeed 	bhi.w	8002986 <HAL_RCC_OscConfig+0x3b6>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bac:	6833      	ldr	r3, [r6, #0]
 8002bae:	0198      	lsls	r0, r3, #6
 8002bb0:	d5f6      	bpl.n	8002ba0 <HAL_RCC_OscConfig+0x5d0>
 8002bb2:	e62e      	b.n	8002812 <HAL_RCC_OscConfig+0x242>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002bb6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002bba:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002bc0:	d1b5      	bne.n	8002b2e <HAL_RCC_OscConfig+0x55e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002bc4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002bcc:	d1af      	bne.n	8002b2e <HAL_RCC_OscConfig+0x55e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bce:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002bd0:	0852      	lsrs	r2, r2, #1
 8002bd2:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8002bd6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002bdc:	d1a7      	bne.n	8002b2e <HAL_RCC_OscConfig+0x55e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bde:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002be0:	0852      	lsrs	r2, r2, #1
 8002be2:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8002be6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002bec:	d19f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x55e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bee:	6833      	ldr	r3, [r6, #0]
 8002bf0:	0199      	lsls	r1, r3, #6
 8002bf2:	f53f ae0e 	bmi.w	8002812 <HAL_RCC_OscConfig+0x242>
          __HAL_RCC_PLL_ENABLE();
 8002bf6:	6833      	ldr	r3, [r6, #0]
 8002bf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bfc:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bfe:	68f3      	ldr	r3, [r6, #12]
 8002c00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c04:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8002c06:	f7ff f933 	bl	8001e70 <HAL_GetTick>
 8002c0a:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0c:	e005      	b.n	8002c1a <HAL_RCC_OscConfig+0x64a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7ff f92f 	bl	8001e70 <HAL_GetTick>
 8002c12:	1b03      	subs	r3, r0, r4
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	f63f aeb6 	bhi.w	8002986 <HAL_RCC_OscConfig+0x3b6>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1a:	6833      	ldr	r3, [r6, #0]
 8002c1c:	019a      	lsls	r2, r3, #6
 8002c1e:	d5f6      	bpl.n	8002c0e <HAL_RCC_OscConfig+0x63e>
 8002c20:	e5f7      	b.n	8002812 <HAL_RCC_OscConfig+0x242>
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	f99f808c 	.word	0xf99f808c

08002c2c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	f000 80a0 	beq.w	8002d72 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c32:	4a54      	ldr	r2, [pc, #336]	@ (8002d84 <HAL_RCC_ClockConfig+0x158>)
 8002c34:	6813      	ldr	r3, [r2, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	428b      	cmp	r3, r1
{
 8002c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c40:	460d      	mov	r5, r1
 8002c42:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c44:	d20c      	bcs.n	8002c60 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	6813      	ldr	r3, [r2, #0]
 8002c48:	f023 0307 	bic.w	r3, r3, #7
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	428b      	cmp	r3, r1
 8002c58:	d002      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002c5a:	2001      	movs	r0, #1
}
 8002c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c64:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c68:	d570      	bpl.n	8002d4c <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c6a:	4e47      	ldr	r6, [pc, #284]	@ (8002d88 <HAL_RCC_ClockConfig+0x15c>)
 8002c6c:	68a0      	ldr	r0, [r4, #8]
 8002c6e:	68b1      	ldr	r1, [r6, #8]
 8002c70:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 8002c74:	4288      	cmp	r0, r1
 8002c76:	d904      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	68b1      	ldr	r1, [r6, #8]
 8002c7a:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 8002c7e:	4301      	orrs	r1, r0
 8002c80:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c82:	b332      	cbz	r2, 8002cd2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c84:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c86:	4b40      	ldr	r3, [pc, #256]	@ (8002d88 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c88:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8c:	d065      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8e:	2a02      	cmp	r2, #2
 8002c90:	d06c      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c92:	2a00      	cmp	r2, #0
 8002c94:	d171      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c96:	079e      	lsls	r6, r3, #30
 8002c98:	d5df      	bpl.n	8002c5a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4e3b      	ldr	r6, [pc, #236]	@ (8002d88 <HAL_RCC_ClockConfig+0x15c>)
 8002c9c:	68b3      	ldr	r3, [r6, #8]
 8002c9e:	f023 0303 	bic.w	r3, r3, #3
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002ca6:	f7ff f8e3 	bl	8001e70 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002caa:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002cae:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb0:	e004      	b.n	8002cbc <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb2:	f7ff f8dd 	bl	8001e70 <HAL_GetTick>
 8002cb6:	1bc0      	subs	r0, r0, r7
 8002cb8:	4540      	cmp	r0, r8
 8002cba:	d85c      	bhi.n	8002d76 <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbc:	68b3      	ldr	r3, [r6, #8]
 8002cbe:	6862      	ldr	r2, [r4, #4]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002cc8:	d1f3      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	0799      	lsls	r1, r3, #30
 8002cce:	d506      	bpl.n	8002cde <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cd0:	68a0      	ldr	r0, [r4, #8]
 8002cd2:	492d      	ldr	r1, [pc, #180]	@ (8002d88 <HAL_RCC_ClockConfig+0x15c>)
 8002cd4:	688a      	ldr	r2, [r1, #8]
 8002cd6:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002cda:	4282      	cmp	r2, r0
 8002cdc:	d840      	bhi.n	8002d60 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cde:	4929      	ldr	r1, [pc, #164]	@ (8002d84 <HAL_RCC_ClockConfig+0x158>)
 8002ce0:	680a      	ldr	r2, [r1, #0]
 8002ce2:	f002 0207 	and.w	r2, r2, #7
 8002ce6:	42aa      	cmp	r2, r5
 8002ce8:	d909      	bls.n	8002cfe <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	680a      	ldr	r2, [r1, #0]
 8002cec:	f022 0207 	bic.w	r2, r2, #7
 8002cf0:	432a      	orrs	r2, r5
 8002cf2:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf4:	680a      	ldr	r2, [r1, #0]
 8002cf6:	f002 0207 	and.w	r2, r2, #7
 8002cfa:	42aa      	cmp	r2, r5
 8002cfc:	d1ad      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfe:	075a      	lsls	r2, r3, #29
 8002d00:	d506      	bpl.n	8002d10 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d02:	4921      	ldr	r1, [pc, #132]	@ (8002d88 <HAL_RCC_ClockConfig+0x15c>)
 8002d04:	68e0      	ldr	r0, [r4, #12]
 8002d06:	688a      	ldr	r2, [r1, #8]
 8002d08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d0c:	4302      	orrs	r2, r0
 8002d0e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	071b      	lsls	r3, r3, #28
 8002d12:	d507      	bpl.n	8002d24 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d14:	4a1c      	ldr	r2, [pc, #112]	@ (8002d88 <HAL_RCC_ClockConfig+0x15c>)
 8002d16:	6921      	ldr	r1, [r4, #16]
 8002d18:	6893      	ldr	r3, [r2, #8]
 8002d1a:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002d1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d22:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d24:	f7ff fbfa 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8002d28:	4a17      	ldr	r2, [pc, #92]	@ (8002d88 <HAL_RCC_ClockConfig+0x15c>)
 8002d2a:	4c18      	ldr	r4, [pc, #96]	@ (8002d8c <HAL_RCC_ClockConfig+0x160>)
 8002d2c:	6892      	ldr	r2, [r2, #8]
 8002d2e:	4918      	ldr	r1, [pc, #96]	@ (8002d90 <HAL_RCC_ClockConfig+0x164>)
 8002d30:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002d34:	4603      	mov	r3, r0
 8002d36:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8002d38:	4816      	ldr	r0, [pc, #88]	@ (8002d94 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d3a:	f002 021f 	and.w	r2, r2, #31
 8002d3e:	40d3      	lsrs	r3, r2
}
 8002d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8002d44:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d46:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8002d48:	f7ff b850 	b.w	8001dec <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d0c6      	beq.n	8002cde <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d50:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d52:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d54:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d56:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d58:	d199      	bne.n	8002c8e <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5a:	019b      	lsls	r3, r3, #6
 8002d5c:	d49d      	bmi.n	8002c9a <HAL_RCC_ClockConfig+0x6e>
 8002d5e:	e77c      	b.n	8002c5a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	688a      	ldr	r2, [r1, #8]
 8002d62:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002d66:	4302      	orrs	r2, r0
 8002d68:	608a      	str	r2, [r1, #8]
 8002d6a:	e7b8      	b.n	8002cde <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d6c:	039f      	lsls	r7, r3, #14
 8002d6e:	d494      	bmi.n	8002c9a <HAL_RCC_ClockConfig+0x6e>
 8002d70:	e773      	b.n	8002c5a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002d72:	2001      	movs	r0, #1
}
 8002d74:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002d76:	2003      	movs	r0, #3
 8002d78:	e770      	b.n	8002c5c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7a:	0558      	lsls	r0, r3, #21
 8002d7c:	f57f af6d 	bpl.w	8002c5a <HAL_RCC_ClockConfig+0x2e>
 8002d80:	e78b      	b.n	8002c9a <HAL_RCC_ClockConfig+0x6e>
 8002d82:	bf00      	nop
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	080050a0 	.word	0x080050a0
 8002d90:	20000004 	.word	0x20000004
 8002d94:	2000000c 	.word	0x2000000c

08002d98 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002d9a:	4a06      	ldr	r2, [pc, #24]	@ (8002db4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002d9e:	4906      	ldr	r1, [pc, #24]	@ (8002db8 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002da0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002da4:	6808      	ldr	r0, [r1, #0]
 8002da6:	5cd3      	ldrb	r3, [r2, r3]
 8002da8:	f003 031f 	and.w	r3, r3, #31
}
 8002dac:	40d8      	lsrs	r0, r3
 8002dae:	4770      	bx	lr
 8002db0:	40021000 	.word	0x40021000
 8002db4:	08005098 	.word	0x08005098
 8002db8:	20000004 	.word	0x20000004

08002dbc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dbc:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002dbe:	4a06      	ldr	r2, [pc, #24]	@ (8002dd8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002dc2:	4906      	ldr	r1, [pc, #24]	@ (8002ddc <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dc4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002dc8:	6808      	ldr	r0, [r1, #0]
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
}
 8002dd0:	40d8      	lsrs	r0, r3
 8002dd2:	4770      	bx	lr
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	08005098 	.word	0x08005098
 8002ddc:	20000004 	.word	0x20000004

08002de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de4:	6803      	ldr	r3, [r0, #0]
{
 8002de6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de8:	f413 3000 	ands.w	r0, r3, #131072	@ 0x20000
{
 8002dec:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dee:	d052      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xb6>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002df0:	4b7b      	ldr	r3, [pc, #492]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002df2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002df4:	00d5      	lsls	r5, r2, #3
 8002df6:	f140 80d0 	bpl.w	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    FlagStatus       pwrclkchanged = RESET;
 8002dfa:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dfc:	4d79      	ldr	r5, [pc, #484]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002dfe:	682b      	ldr	r3, [r5, #0]
 8002e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e04:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e06:	f7ff f833 	bl	8001e70 <HAL_GetTick>
 8002e0a:	4606      	mov	r6, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e0c:	e005      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7ff f82f 	bl	8001e70 <HAL_GetTick>
 8002e12:	1b83      	subs	r3, r0, r6
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	f200 80cb 	bhi.w	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e1a:	682b      	ldr	r3, [r5, #0]
 8002e1c:	05d8      	lsls	r0, r3, #23
 8002e1e:	d5f6      	bpl.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e20:	4d6f      	ldr	r5, [pc, #444]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e22:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e24:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e28:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002e2c:	d026      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d024      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e32:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e36:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3e:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e42:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4a:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e4e:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e52:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8002e54:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e58:	d510      	bpl.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7ff f809 	bl	8001e70 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8002e62:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e64:	e005      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7ff f803 	bl	8001e70 <HAL_GetTick>
 8002e6a:	1b80      	subs	r0, r0, r6
 8002e6c:	4540      	cmp	r0, r8
 8002e6e:	f200 809f 	bhi.w	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e72:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002e76:	079b      	lsls	r3, r3, #30
 8002e78:	d5f5      	bpl.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x86>
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e7a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002e7c:	4958      	ldr	r1, [pc, #352]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e7e:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8002e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e8c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e8e:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 8002e90:	2f00      	cmp	r7, #0
 8002e92:	f040 8092 	bne.w	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1da>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e96:	07df      	lsls	r7, r3, #31
 8002e98:	d508      	bpl.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e9a:	4951      	ldr	r1, [pc, #324]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e9c:	6865      	ldr	r5, [r4, #4]
 8002e9e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002ea2:	f022 0203 	bic.w	r2, r2, #3
 8002ea6:	432a      	orrs	r2, r5
 8002ea8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eac:	079e      	lsls	r6, r3, #30
 8002eae:	d508      	bpl.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eb0:	494b      	ldr	r1, [pc, #300]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002eb2:	68a5      	ldr	r5, [r4, #8]
 8002eb4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002eb8:	f022 020c 	bic.w	r2, r2, #12
 8002ebc:	432a      	orrs	r2, r5
 8002ebe:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ec2:	075d      	lsls	r5, r3, #29
 8002ec4:	d508      	bpl.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ec6:	4946      	ldr	r1, [pc, #280]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ec8:	68e5      	ldr	r5, [r4, #12]
 8002eca:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002ece:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8002ed2:	432a      	orrs	r2, r5
 8002ed4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ed8:	0699      	lsls	r1, r3, #26
 8002eda:	d508      	bpl.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002edc:	4940      	ldr	r1, [pc, #256]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ede:	6925      	ldr	r5, [r4, #16]
 8002ee0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002ee4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002ee8:	432a      	orrs	r2, r5
 8002eea:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eee:	059a      	lsls	r2, r3, #22
 8002ef0:	d508      	bpl.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ef2:	493b      	ldr	r1, [pc, #236]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ef4:	6a25      	ldr	r5, [r4, #32]
 8002ef6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002efa:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8002efe:	432a      	orrs	r2, r5
 8002f00:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f04:	055f      	lsls	r7, r3, #21
 8002f06:	d508      	bpl.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f08:	4935      	ldr	r1, [pc, #212]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f0a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8002f0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002f10:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002f14:	432a      	orrs	r2, r5
 8002f16:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f1a:	065e      	lsls	r6, r3, #25
 8002f1c:	d508      	bpl.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f1e:	4930      	ldr	r1, [pc, #192]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f20:	6965      	ldr	r5, [r4, #20]
 8002f22:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002f26:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002f2a:	432a      	orrs	r2, r5
 8002f2c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f30:	061d      	lsls	r5, r3, #24
 8002f32:	d508      	bpl.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f34:	492a      	ldr	r1, [pc, #168]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f36:	69a5      	ldr	r5, [r4, #24]
 8002f38:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002f3c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002f40:	432a      	orrs	r2, r5
 8002f42:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f46:	05d9      	lsls	r1, r3, #23
 8002f48:	d508      	bpl.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f4a:	4925      	ldr	r1, [pc, #148]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f4c:	69e5      	ldr	r5, [r4, #28]
 8002f4e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002f52:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002f56:	432a      	orrs	r2, r5
 8002f58:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f5c:	049a      	lsls	r2, r3, #18
 8002f5e:	d50b      	bpl.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f60:	491f      	ldr	r1, [pc, #124]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f62:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8002f64:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002f68:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8002f6c:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f6e:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f72:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f76:	d026      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f78:	035b      	lsls	r3, r3, #13
 8002f7a:	d50b      	bpl.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f7c:	4a18      	ldr	r2, [pc, #96]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002f80:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002f84:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002f88:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f8a:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f8e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f92:	d01d      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8002f94:	b002      	add	sp, #8
 8002f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f9c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002fa0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002fac:	2701      	movs	r7, #1
 8002fae:	e725      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fb0:	6823      	ldr	r3, [r4, #0]
        status = ret;
 8002fb2:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 8002fb4:	2f00      	cmp	r7, #0
 8002fb6:	f43f af6e 	beq.w	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fba:	4909      	ldr	r1, [pc, #36]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fbc:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8002fbe:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002fc2:	658a      	str	r2, [r1, #88]	@ 0x58
 8002fc4:	e767      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc6:	68ca      	ldr	r2, [r1, #12]
 8002fc8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002fcc:	60ca      	str	r2, [r1, #12]
 8002fce:	e7d3      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd0:	68d3      	ldr	r3, [r2, #12]
 8002fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd6:	60d3      	str	r3, [r2, #12]
}
 8002fd8:	b002      	add	sp, #8
 8002fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fec:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fee:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002ff0:	460e      	mov	r6, r1
 8002ff2:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8002ff4:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002ff8:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ffa:	f7fe ff39 	bl	8001e70 <HAL_GetTick>
 8002ffe:	4437      	add	r7, r6
 8003000:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8003002:	f7fe ff35 	bl	8001e70 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003006:	4b32      	ldr	r3, [pc, #200]	@ (80030d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003008:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003010:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003014:	0d1b      	lsrs	r3, r3, #20
 8003016:	fb07 f303 	mul.w	r3, r7, r3
 800301a:	3601      	adds	r6, #1
 800301c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800301e:	d111      	bne.n	8003044 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 8003020:	68a3      	ldr	r3, [r4, #8]
 8003022:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8003026:	d009      	beq.n	800303c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003028:	7b23      	ldrb	r3, [r4, #12]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003030:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8003034:	68a3      	ldr	r3, [r4, #8]
 8003036:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800303a:	d1f5      	bne.n	8003028 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800303c:	2000      	movs	r0, #0
}
 800303e:	b002      	add	sp, #8
 8003040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003044:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003046:	4623      	mov	r3, r4
 8003048:	e013      	b.n	8003072 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      tmpreg8 = *ptmpreg8;
 800304a:	7b23      	ldrb	r3, [r4, #12]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8003052:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003056:	f7fe ff0b 	bl	8001e70 <HAL_GetTick>
 800305a:	eba0 0008 	sub.w	r0, r0, r8
 800305e:	42b8      	cmp	r0, r7
 8003060:	d20c      	bcs.n	800307c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 8003062:	9a01      	ldr	r2, [sp, #4]
      count--;
 8003064:	9b01      	ldr	r3, [sp, #4]
 8003066:	3b01      	subs	r3, #1
        tmp_timeout = 0U;
 8003068:	2a00      	cmp	r2, #0
      count--;
 800306a:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800306c:	682b      	ldr	r3, [r5, #0]
        tmp_timeout = 0U;
 800306e:	bf08      	it	eq
 8003070:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8003078:	d1e7      	bne.n	800304a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
 800307a:	e7df      	b.n	800303c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800307c:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003080:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003082:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003086:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800308a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800308c:	d013      	beq.n	80030b6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800308e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8003090:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003094:	d107      	bne.n	80030a6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030a4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80030a6:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80030a8:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80030aa:	f885 205d 	strb.w	r2, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80030ae:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80030b2:	2003      	movs	r0, #3
 80030b4:	e7c3      	b.n	800303e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b6:	68aa      	ldr	r2, [r5, #8]
 80030b8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80030bc:	d002      	beq.n	80030c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030be:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80030c2:	d1e4      	bne.n	800308e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	e7df      	b.n	800308e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 80030ce:	bf00      	nop
 80030d0:	20000004 	.word	0x20000004

080030d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d8:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 80030da:	2300      	movs	r3, #0
{
 80030dc:	460e      	mov	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 80030de:	f88d 3007 	strb.w	r3, [sp, #7]
 80030e2:	eb01 0902 	add.w	r9, r1, r2
{
 80030e6:	4617      	mov	r7, r2
 80030e8:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030ea:	f7fe fec1 	bl	8001e70 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030ee:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8003214 <SPI_EndRxTxTransaction+0x140>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030f2:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 80030f6:	f7fe febb 	bl	8001e70 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030fa:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 80030fe:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003100:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003104:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003108:	0d1b      	lsrs	r3, r3, #20
 800310a:	fb0a f303 	mul.w	r3, sl, r3
 800310e:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8003110:	1c73      	adds	r3, r6, #1
 8003112:	bf18      	it	ne
 8003114:	4683      	movne	fp, r0
 8003116:	d130      	bne.n	800317a <SPI_EndRxTxTransaction+0xa6>
 8003118:	68a3      	ldr	r3, [r4, #8]
 800311a:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800311e:	d1fb      	bne.n	8003118 <SPI_EndRxTxTransaction+0x44>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003120:	f7fe fea6 	bl	8001e70 <HAL_GetTick>
 8003124:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8003128:	f7fe fea2 	bl	8001e70 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800312c:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003130:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003132:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003136:	fb09 f303 	mul.w	r3, r9, r3
 800313a:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 800313c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800313e:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003140:	d130      	bne.n	80031a4 <SPI_EndRxTxTransaction+0xd0>
 8003142:	68a3      	ldr	r3, [r4, #8]
 8003144:	061a      	lsls	r2, r3, #24
 8003146:	d4fc      	bmi.n	8003142 <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003148:	463a      	mov	r2, r7
 800314a:	4631      	mov	r1, r6
 800314c:	4628      	mov	r0, r5
 800314e:	f7ff ff4b 	bl	8002fe8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003152:	bb58      	cbnz	r0, 80031ac <SPI_EndRxTxTransaction+0xd8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8003154:	b005      	add	sp, #20
 8003156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800315a:	f7fe fe89 	bl	8001e70 <HAL_GetTick>
 800315e:	eba0 000b 	sub.w	r0, r0, fp
 8003162:	4582      	cmp	sl, r0
 8003164:	d92a      	bls.n	80031bc <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8003166:	9a02      	ldr	r2, [sp, #8]
      count--;
 8003168:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800316a:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 800316c:	2a00      	cmp	r2, #0
      count--;
 800316e:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8003172:	bf08      	it	eq
 8003174:	f04f 0a00 	moveq.w	sl, #0
      count--;
 8003178:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800317a:	68a3      	ldr	r3, [r4, #8]
 800317c:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8003180:	d1eb      	bne.n	800315a <SPI_EndRxTxTransaction+0x86>
 8003182:	e7cd      	b.n	8003120 <SPI_EndRxTxTransaction+0x4c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003184:	f7fe fe74 	bl	8001e70 <HAL_GetTick>
 8003188:	eba0 0008 	sub.w	r0, r0, r8
 800318c:	4581      	cmp	r9, r0
 800318e:	d915      	bls.n	80031bc <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8003190:	9a03      	ldr	r2, [sp, #12]
      count--;
 8003192:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003194:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8003196:	2a00      	cmp	r2, #0
      count--;
 8003198:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800319c:	bf08      	it	eq
 800319e:	f04f 0900 	moveq.w	r9, #0
      count--;
 80031a2:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a4:	68a3      	ldr	r3, [r4, #8]
 80031a6:	061b      	lsls	r3, r3, #24
 80031a8:	d4ec      	bmi.n	8003184 <SPI_EndRxTxTransaction+0xb0>
 80031aa:	e7cd      	b.n	8003148 <SPI_EndRxTxTransaction+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ac:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80031ae:	f043 0320 	orr.w	r3, r3, #32
 80031b2:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 80031b4:	2003      	movs	r0, #3
}
 80031b6:	b005      	add	sp, #20
 80031b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031bc:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031c0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c2:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031ca:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031cc:	d016      	beq.n	80031fc <SPI_EndRxTxTransaction+0x128>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ce:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80031d0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80031d4:	d107      	bne.n	80031e6 <SPI_EndRxTxTransaction+0x112>
          SPI_RESET_CRC(hspi);
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031e4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ec:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 80031ee:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f0:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 80031f4:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f8:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 80031fa:	e7db      	b.n	80031b4 <SPI_EndRxTxTransaction+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031fc:	68aa      	ldr	r2, [r5, #8]
 80031fe:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8003202:	d002      	beq.n	800320a <SPI_EndRxTxTransaction+0x136>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003204:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003208:	d1e1      	bne.n	80031ce <SPI_EndRxTxTransaction+0xfa>
          __HAL_SPI_DISABLE(hspi);
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e7dc      	b.n	80031ce <SPI_EndRxTxTransaction+0xfa>
 8003214:	20000004 	.word	0x20000004

08003218 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	460c      	mov	r4, r1
 800321e:	4606      	mov	r6, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003220:	f7fe fe26 	bl	8001e70 <HAL_GetTick>
 8003224:	3464      	adds	r4, #100	@ 0x64
 8003226:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8003228:	f7fe fe22 	bl	8001e70 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800322c:	4b24      	ldr	r3, [pc, #144]	@ (80032c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800322e:	6832      	ldr	r2, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003236:	fb04 f303 	mul.w	r3, r4, r3
 800323a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800323c:	6893      	ldr	r3, [r2, #8]
 800323e:	061a      	lsls	r2, r3, #24
 8003240:	d52f      	bpl.n	80032a2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
 8003242:	4605      	mov	r5, r0
 8003244:	e00a      	b.n	800325c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x44>
      if (count == 0U)
 8003246:	9a01      	ldr	r2, [sp, #4]
      count--;
 8003248:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800324a:	6831      	ldr	r1, [r6, #0]
      count--;
 800324c:	3b01      	subs	r3, #1
 800324e:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003250:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 8003252:	2a00      	cmp	r2, #0
 8003254:	bf08      	it	eq
 8003256:	2400      	moveq	r4, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	d522      	bpl.n	80032a2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800325c:	f7fe fe08 	bl	8001e70 <HAL_GetTick>
 8003260:	1b40      	subs	r0, r0, r5
 8003262:	42a0      	cmp	r0, r4
 8003264:	d3ef      	bcc.n	8003246 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003266:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800326a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326c:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003270:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003274:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003276:	d017      	beq.n	80032a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003278:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 800327a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800327e:	d107      	bne.n	8003290 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          SPI_RESET_CRC(hspi);
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800328e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003290:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8003292:	2300      	movs	r3, #0
 8003294:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8003296:	f886 205d 	strb.w	r2, [r6, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800329a:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
}
 800329e:	b002      	add	sp, #8
 80032a0:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80032a2:	2000      	movs	r0, #0
}
 80032a4:	b002      	add	sp, #8
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a8:	68b2      	ldr	r2, [r6, #8]
 80032aa:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80032ae:	d002      	beq.n	80032b6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032b0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80032b4:	d1e0      	bne.n	8003278 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
          __HAL_SPI_DISABLE(hspi);
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e7db      	b.n	8003278 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
 80032c0:	20000004 	.word	0x20000004

080032c4 <SPI_EndRxTxTransaction.constprop.0>:
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c6:	b083      	sub	sp, #12
  __IO uint8_t  tmpreg8 = 0;
 80032c8:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 80032ca:	460f      	mov	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 80032cc:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 80032d0:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032d2:	f7fe fdcd 	bl	8001e70 <HAL_GetTick>
 80032d6:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80032da:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80032dc:	f7fe fdc8 	bl	8001e70 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032e0:	4b30      	ldr	r3, [pc, #192]	@ (80033a4 <SPI_EndRxTxTransaction.constprop.0+0xe0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80032e8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80032ec:	0d1b      	lsrs	r3, r3, #20
 80032ee:	fb04 f303 	mul.w	r3, r4, r3
 80032f2:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 80032fc:	d032      	beq.n	8003364 <SPI_EndRxTxTransaction.constprop.0+0xa0>
 80032fe:	4606      	mov	r6, r0
 8003300:	e00b      	b.n	800331a <SPI_EndRxTxTransaction.constprop.0+0x56>
      if (count == 0U)
 8003302:	9a01      	ldr	r2, [sp, #4]
      count--;
 8003304:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8003306:	6829      	ldr	r1, [r5, #0]
      count--;
 8003308:	3b01      	subs	r3, #1
 800330a:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800330c:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 800330e:	2a00      	cmp	r2, #0
 8003310:	bf08      	it	eq
 8003312:	2400      	moveq	r4, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8003314:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8003318:	d024      	beq.n	8003364 <SPI_EndRxTxTransaction.constprop.0+0xa0>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800331a:	f7fe fda9 	bl	8001e70 <HAL_GetTick>
 800331e:	1b80      	subs	r0, r0, r6
 8003320:	42a0      	cmp	r0, r4
 8003322:	d3ee      	bcc.n	8003302 <SPI_EndRxTxTransaction.constprop.0+0x3e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003324:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003328:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800332a:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800332e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003332:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003334:	d02a      	beq.n	800338c <SPI_EndRxTxTransaction.constprop.0+0xc8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003336:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8003338:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800333c:	d107      	bne.n	800334e <SPI_EndRxTxTransaction.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800334c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800334e:	2301      	movs	r3, #1
 8003350:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003354:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8003356:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003358:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 800335c:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003360:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003362:	e010      	b.n	8003386 <SPI_EndRxTxTransaction.constprop.0+0xc2>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003364:	4639      	mov	r1, r7
 8003366:	4628      	mov	r0, r5
 8003368:	f7ff ff56 	bl	8003218 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800336c:	b938      	cbnz	r0, 800337e <SPI_EndRxTxTransaction.constprop.0+0xba>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800336e:	463a      	mov	r2, r7
 8003370:	2164      	movs	r1, #100	@ 0x64
 8003372:	4628      	mov	r0, r5
 8003374:	f7ff fe38 	bl	8002fe8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003378:	b908      	cbnz	r0, 800337e <SPI_EndRxTxTransaction.constprop.0+0xba>
}
 800337a:	b003      	add	sp, #12
 800337c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800337e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003380:	f043 0320 	orr.w	r3, r3, #32
 8003384:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003386:	2003      	movs	r0, #3
}
 8003388:	b003      	add	sp, #12
 800338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800338c:	68aa      	ldr	r2, [r5, #8]
 800338e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8003392:	d002      	beq.n	800339a <SPI_EndRxTxTransaction.constprop.0+0xd6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003394:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003398:	d1cd      	bne.n	8003336 <SPI_EndRxTxTransaction.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e7c8      	b.n	8003336 <SPI_EndRxTxTransaction.constprop.0+0x72>
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d074      	beq.n	8003496 <HAL_SPI_Init+0xee>
{
 80033ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b0:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033b2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d053      	beq.n	8003460 <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80033be:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c2:	2200      	movs	r2, #0
 80033c4:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80033c6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d057      	beq.n	800347e <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 80033ce:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033d0:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80033d8:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033da:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80033de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033e2:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033e4:	d842      	bhi.n	800346c <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033e6:	d151      	bne.n	800348c <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033e8:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033ea:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ee:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 80033f2:	6862      	ldr	r2, [r4, #4]
 80033f4:	68a3      	ldr	r3, [r4, #8]
 80033f6:	69a6      	ldr	r6, [r4, #24]
 80033f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033fc:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 8003400:	431a      	orrs	r2, r3
 8003402:	6923      	ldr	r3, [r4, #16]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	4313      	orrs	r3, r2
 800340a:	6962      	ldr	r2, [r4, #20]
 800340c:	f002 0201 	and.w	r2, r2, #1
 8003410:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003412:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003414:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003420:	69e3      	ldr	r3, [r4, #28]
 8003422:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 8003426:	6a23      	ldr	r3, [r4, #32]
 8003428:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 800342c:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 8003430:	4313      	orrs	r3, r2
 8003432:	ea43 0308 	orr.w	r3, r3, r8
 8003436:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003438:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800343a:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800343c:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003440:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003442:	f000 0010 	and.w	r0, r0, #16
 8003446:	ea4e 0306 	orr.w	r3, lr, r6
 800344a:	4303      	orrs	r3, r0
 800344c:	ea43 030c 	orr.w	r3, r3, ip
 8003450:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003452:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003454:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003456:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003458:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800345c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003460:	6863      	ldr	r3, [r4, #4]
 8003462:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003466:	d0aa      	beq.n	80033be <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003468:	61e0      	str	r0, [r4, #28]
 800346a:	e7a8      	b.n	80033be <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800346c:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8003470:	d113      	bne.n	800349a <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003472:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003474:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003478:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 800347c:	e7b9      	b.n	80033f2 <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 800347e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003480:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8003484:	f7fe fa60 	bl	8001948 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003488:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800348a:	e7a0      	b.n	80033ce <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800348c:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003490:	2500      	movs	r5, #0
 8003492:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003494:	e7ad      	b.n	80033f2 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8003496:	2001      	movs	r0, #1
}
 8003498:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800349a:	f04f 0c00 	mov.w	ip, #0
 800349e:	e7f7      	b.n	8003490 <HAL_SPI_Init+0xe8>

080034a0 <HAL_SPI_Transmit>:
{
 80034a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a4:	4604      	mov	r4, r0
 80034a6:	b082      	sub	sp, #8
 80034a8:	461d      	mov	r5, r3
 80034aa:	460f      	mov	r7, r1
 80034ac:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80034ae:	f7fe fcdf 	bl	8001e70 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80034b2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d15e      	bne.n	8003578 <HAL_SPI_Transmit+0xd8>
  if ((pData == NULL) || (Size == 0U))
 80034ba:	4606      	mov	r6, r0
 80034bc:	b2d8      	uxtb	r0, r3
 80034be:	2f00      	cmp	r7, #0
 80034c0:	d05b      	beq.n	800357a <HAL_SPI_Transmit+0xda>
 80034c2:	f1b8 0f00 	cmp.w	r8, #0
 80034c6:	d058      	beq.n	800357a <HAL_SPI_Transmit+0xda>
  __HAL_LOCK(hspi);
 80034c8:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d053      	beq.n	8003578 <HAL_SPI_Transmit+0xd8>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d0:	68a1      	ldr	r1, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80034d2:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hspi);
 80034d4:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d8:	2200      	movs	r2, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034da:	2003      	movs	r0, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034dc:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034e0:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 80034e4:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e8:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80034ea:	63a7      	str	r7, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80034ec:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80034f0:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034f4:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80034f6:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80034fa:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    __HAL_SPI_DISABLE(hspi);
 80034fe:	4618      	mov	r0, r3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003500:	d107      	bne.n	8003512 <HAL_SPI_Transmit+0x72>
    __HAL_SPI_DISABLE(hspi);
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003510:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	0652      	lsls	r2, r2, #25
 8003516:	d403      	bmi.n	8003520 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800351e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003520:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003522:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003524:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8003528:	d82a      	bhi.n	8003580 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800352a:	2900      	cmp	r1, #0
 800352c:	f000 80bf 	beq.w	80036ae <HAL_SPI_Transmit+0x20e>
 8003530:	f1b8 0f01 	cmp.w	r8, #1
 8003534:	f000 80bb 	beq.w	80036ae <HAL_SPI_Transmit+0x20e>
    while (hspi->TxXferCount > 0U)
 8003538:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d03f      	beq.n	80035c0 <HAL_SPI_Transmit+0x120>
 8003540:	1c68      	adds	r0, r5, #1
 8003542:	d012      	beq.n	800356a <HAL_SPI_Transmit+0xca>
 8003544:	e084      	b.n	8003650 <HAL_SPI_Transmit+0x1b0>
        if (hspi->TxXferCount > 1U)
 8003546:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003548:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800354e:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 8003550:	f240 809a 	bls.w	8003688 <HAL_SPI_Transmit+0x1e8>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003554:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003558:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800355a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800355c:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800355e:	3b02      	subs	r3, #2
 8003560:	b29b      	uxth	r3, r3
 8003562:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8003564:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8003566:	b289      	uxth	r1, r1
 8003568:	b351      	cbz	r1, 80035c0 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	6893      	ldr	r3, [r2, #8]
 800356e:	0799      	lsls	r1, r3, #30
 8003570:	d4e9      	bmi.n	8003546 <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003572:	f7fe fc7d 	bl	8001e70 <HAL_GetTick>
 8003576:	e7f5      	b.n	8003564 <HAL_SPI_Transmit+0xc4>
    return HAL_BUSY;
 8003578:	2002      	movs	r0, #2
}
 800357a:	b002      	add	sp, #8
 800357c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003580:	2900      	cmp	r1, #0
 8003582:	f000 808b 	beq.w	800369c <HAL_SPI_Transmit+0x1fc>
 8003586:	f1b8 0f01 	cmp.w	r8, #1
 800358a:	f000 8087 	beq.w	800369c <HAL_SPI_Transmit+0x1fc>
    while (hspi->TxXferCount > 0U)
 800358e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003590:	b292      	uxth	r2, r2
 8003592:	b1aa      	cbz	r2, 80035c0 <HAL_SPI_Transmit+0x120>
 8003594:	1c6a      	adds	r2, r5, #1
 8003596:	d13f      	bne.n	8003618 <HAL_SPI_Transmit+0x178>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	0797      	lsls	r7, r2, #30
 800359c:	d56c      	bpl.n	8003678 <HAL_SPI_Transmit+0x1d8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800359e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80035a0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80035a4:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 80035a6:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035aa:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80035ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80035b0:	fa1f fc8c 	uxth.w	ip, ip
 80035b4:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80035b8:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80035ba:	b292      	uxth	r2, r2
 80035bc:	2a00      	cmp	r2, #0
 80035be:	d1eb      	bne.n	8003598 <HAL_SPI_Transmit+0xf8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035c0:	4632      	mov	r2, r6
 80035c2:	4629      	mov	r1, r5
 80035c4:	4620      	mov	r0, r4
 80035c6:	f7ff fd85 	bl	80030d4 <SPI_EndRxTxTransaction>
 80035ca:	b108      	cbz	r0, 80035d0 <HAL_SPI_Transmit+0x130>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035cc:	2320      	movs	r3, #32
 80035ce:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035d0:	68a3      	ldr	r3, [r4, #8]
 80035d2:	b933      	cbnz	r3, 80035e2 <HAL_SPI_Transmit+0x142>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035d4:	6822      	ldr	r2, [r4, #0]
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	68d3      	ldr	r3, [r2, #12]
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	6893      	ldr	r3, [r2, #8]
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035e8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 80035ea:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ec:	1ac0      	subs	r0, r0, r3
 80035ee:	bf18      	it	ne
 80035f0:	2001      	movne	r0, #1
  __HAL_UNLOCK(hspi);
 80035f2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80035f6:	b002      	add	sp, #8
 80035f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80035fe:	f832 3b02 	ldrh.w	r3, [r2], #2
 8003602:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8003604:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003606:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003608:	3b01      	subs	r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800360e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0d4      	beq.n	80035c0 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003616:	6820      	ldr	r0, [r4, #0]
 8003618:	6883      	ldr	r3, [r0, #8]
 800361a:	0799      	lsls	r1, r3, #30
 800361c:	d4ee      	bmi.n	80035fc <HAL_SPI_Transmit+0x15c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800361e:	f7fe fc27 	bl	8001e70 <HAL_GetTick>
 8003622:	1b83      	subs	r3, r0, r6
 8003624:	42ab      	cmp	r3, r5
 8003626:	d3f2      	bcc.n	800360e <HAL_SPI_Transmit+0x16e>
          hspi->State = HAL_SPI_STATE_READY;
 8003628:	2301      	movs	r3, #1
 800362a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800362e:	2300      	movs	r3, #0
 8003630:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003634:	2003      	movs	r0, #3
 8003636:	e7a0      	b.n	800357a <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003638:	f831 2b02 	ldrh.w	r2, [r1], #2
 800363c:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800363e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003640:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003642:	3b02      	subs	r3, #2
 8003644:	b29b      	uxth	r3, r3
 8003646:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8003648:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0b7      	beq.n	80035c0 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	0792      	lsls	r2, r2, #30
 8003656:	d541      	bpl.n	80036dc <HAL_SPI_Transmit+0x23c>
        if (hspi->TxXferCount > 1U)
 8003658:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800365a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800365c:	b292      	uxth	r2, r2
 800365e:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003660:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 8003662:	d8e9      	bhi.n	8003638 <HAL_SPI_Transmit+0x198>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003664:	7802      	ldrb	r2, [r0, #0]
 8003666:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8003668:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800366a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800366c:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800366e:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8003670:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8003672:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8003674:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003676:	e7e7      	b.n	8003648 <HAL_SPI_Transmit+0x1a8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003678:	f7fe fbfa 	bl	8001e70 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800367c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d09d      	beq.n	80035c0 <HAL_SPI_Transmit+0x120>
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	e787      	b.n	8003598 <HAL_SPI_Transmit+0xf8>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003688:	7803      	ldrb	r3, [r0, #0]
 800368a:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800368c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800368e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8003690:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8003692:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8003694:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8003696:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8003698:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800369a:	e763      	b.n	8003564 <HAL_SPI_Transmit+0xc4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800369c:	f837 2b02 	ldrh.w	r2, [r7], #2
 80036a0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80036a2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a4:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80036a6:	3a01      	subs	r2, #1
 80036a8:	b292      	uxth	r2, r2
 80036aa:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 80036ac:	e76f      	b.n	800358e <HAL_SPI_Transmit+0xee>
      if (hspi->TxXferCount > 1U)
 80036ae:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80036b0:	b292      	uxth	r2, r2
 80036b2:	2a01      	cmp	r2, #1
 80036b4:	d908      	bls.n	80036c8 <HAL_SPI_Transmit+0x228>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036b6:	f837 2b02 	ldrh.w	r2, [r7], #2
 80036ba:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80036bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036be:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80036c0:	3b02      	subs	r3, #2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80036c6:	e737      	b.n	8003538 <HAL_SPI_Transmit+0x98>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036c8:	783a      	ldrb	r2, [r7, #0]
 80036ca:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80036cc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr ++;
 80036ce:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80036d0:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 80036d2:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80036d4:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 80036d6:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80036d8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80036da:	e72d      	b.n	8003538 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036dc:	f7fe fbc8 	bl	8001e70 <HAL_GetTick>
 80036e0:	1b83      	subs	r3, r0, r6
 80036e2:	42ab      	cmp	r3, r5
 80036e4:	d3b0      	bcc.n	8003648 <HAL_SPI_Transmit+0x1a8>
 80036e6:	e79f      	b.n	8003628 <HAL_SPI_Transmit+0x188>

080036e8 <HAL_SPI_Transmit_DMA>:
  if (hspi->State != HAL_SPI_STATE_READY)
 80036e8:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d164      	bne.n	80037ba <HAL_SPI_Transmit_DMA+0xd2>
  if ((pData == NULL) || (Size == 0U))
 80036f0:	2900      	cmp	r1, #0
 80036f2:	d064      	beq.n	80037be <HAL_SPI_Transmit_DMA+0xd6>
 80036f4:	2a00      	cmp	r2, #0
 80036f6:	d062      	beq.n	80037be <HAL_SPI_Transmit_DMA+0xd6>
{
 80036f8:	b510      	push	{r4, lr}
 80036fa:	4604      	mov	r4, r0
 80036fc:	b2d8      	uxtb	r0, r3
  __HAL_LOCK(hspi);
 80036fe:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d06f      	beq.n	80037e6 <HAL_SPI_Transmit_DMA+0xfe>
 8003706:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800370a:	68a0      	ldr	r0, [r4, #8]
  hspi->TxXferSize  = Size;
 800370c:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800370e:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003710:	f04f 0c03 	mov.w	ip, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003714:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003718:	f884 c05d 	strb.w	ip, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 800371c:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003720:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003722:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003724:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003726:	6423      	str	r3, [r4, #64]	@ 0x40
    __HAL_SPI_DISABLE(hspi);
 8003728:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = 0U;
 800372a:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800372e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003732:	d107      	bne.n	8003744 <HAL_SPI_Transmit_DMA+0x5c>
    __HAL_SPI_DISABLE(hspi);
 8003734:	6813      	ldr	r3, [r2, #0]
 8003736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800373a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800373c:	6813      	ldr	r3, [r2, #0]
 800373e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003742:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003744:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003746:	4b29      	ldr	r3, [pc, #164]	@ (80037ec <HAL_SPI_Transmit_DMA+0x104>)
 8003748:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800374a:	4b29      	ldr	r3, [pc, #164]	@ (80037f0 <HAL_SPI_Transmit_DMA+0x108>)
 800374c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800374e:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <HAL_SPI_Transmit_DMA+0x10c>)
 8003750:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	6383      	str	r3, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003756:	6853      	ldr	r3, [r2, #4]
 8003758:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800375c:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800375e:	68e3      	ldr	r3, [r4, #12]
 8003760:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003764:	d80f      	bhi.n	8003786 <HAL_SPI_Transmit_DMA+0x9e>
 8003766:	6983      	ldr	r3, [r0, #24]
 8003768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800376c:	d10b      	bne.n	8003786 <HAL_SPI_Transmit_DMA+0x9e>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800376e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003770:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003774:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003776:	d12d      	bne.n	80037d4 <HAL_SPI_Transmit_DMA+0xec>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003778:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800377c:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800377e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003780:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8003784:	87e3      	strh	r3, [r4, #62]	@ 0x3e
                                 hspi->TxXferCount))
 8003786:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003788:	320c      	adds	r2, #12
 800378a:	b29b      	uxth	r3, r3
 800378c:	f7fe fc6a 	bl	8002064 <HAL_DMA_Start_IT>
 8003790:	b9b8      	cbnz	r0, 80037c2 <HAL_SPI_Transmit_DMA+0xda>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	0652      	lsls	r2, r2, #25
 8003798:	d403      	bmi.n	80037a2 <HAL_SPI_Transmit_DMA+0xba>
    __HAL_SPI_ENABLE(hspi);
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037a0:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80037a2:	2200      	movs	r2, #0
 80037a4:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	f042 0220 	orr.w	r2, r2, #32
 80037ae:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	f042 0202 	orr.w	r2, r2, #2
 80037b6:	605a      	str	r2, [r3, #4]
}
 80037b8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80037ba:	2002      	movs	r0, #2
 80037bc:	4770      	bx	lr
    return HAL_ERROR;
 80037be:	2001      	movs	r0, #1
}
 80037c0:	4770      	bx	lr
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037c2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80037c4:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037c6:	f043 0310 	orr.w	r3, r3, #16
    __HAL_UNLOCK(hspi);
 80037ca:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037ce:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_ERROR;
 80037d0:	2001      	movs	r0, #1
}
 80037d2:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80037d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d8:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80037da:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80037dc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80037e0:	3301      	adds	r3, #1
 80037e2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80037e4:	e7cf      	b.n	8003786 <HAL_SPI_Transmit_DMA+0x9e>
    return HAL_BUSY;
 80037e6:	2002      	movs	r0, #2
}
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	bf00      	nop
 80037ec:	080037fd 	.word	0x080037fd
 80037f0:	08003831 	.word	0x08003831
 80037f4:	0800380d 	.word	0x0800380d

080037f8 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop

080037fc <SPI_DMAHalfTransmitCplt>:
{
 80037fc:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80037fe:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003800:	f7ff fffa 	bl	80037f8 <HAL_SPI_TxHalfCpltCallback>
}
 8003804:	bd08      	pop	{r3, pc}
 8003806:	bf00      	nop

08003808 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop

0800380c <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800380c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800380e:	6802      	ldr	r2, [r0, #0]
{
 8003810:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003812:	6853      	ldr	r3, [r2, #4]
 8003814:	f023 0303 	bic.w	r3, r3, #3
 8003818:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800381a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800381c:	2101      	movs	r1, #1
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800381e:	f043 0310 	orr.w	r3, r3, #16
 8003822:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003824:	f880 105d 	strb.w	r1, [r0, #93]	@ 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8003828:	f7ff ffee 	bl	8003808 <HAL_SPI_ErrorCallback>
}
 800382c:	bd08      	pop	{r3, pc}
 800382e:	bf00      	nop

08003830 <SPI_DMATransmitCplt>:
{
 8003830:	b530      	push	{r4, r5, lr}
 8003832:	4605      	mov	r5, r0
 8003834:	b083      	sub	sp, #12
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003836:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8003838:	f7fe fb1a 	bl	8001e70 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800383c:	682b      	ldr	r3, [r5, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	069b      	lsls	r3, r3, #26
 8003842:	d421      	bmi.n	8003888 <SPI_DMATransmitCplt+0x58>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	f022 0220 	bic.w	r2, r2, #32
 800384c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	f022 0202 	bic.w	r2, r2, #2
 8003854:	4601      	mov	r1, r0
 8003856:	605a      	str	r2, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003858:	4620      	mov	r0, r4
 800385a:	f7ff fd33 	bl	80032c4 <SPI_EndRxTxTransaction.constprop.0>
 800385e:	b118      	cbz	r0, 8003868 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003860:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003862:	f043 0320 	orr.w	r3, r3, #32
 8003866:	6623      	str	r3, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003868:	68a3      	ldr	r3, [r4, #8]
 800386a:	b933      	cbnz	r3, 800387a <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800386c:	6822      	ldr	r2, [r4, #0]
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	68d3      	ldr	r3, [r2, #12]
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	6893      	ldr	r3, [r2, #8]
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY;
 800387a:	2301      	movs	r3, #1
    hspi->TxXferCount = 0U;
 800387c:	2200      	movs	r2, #0
 800387e:	87e2      	strh	r2, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003880:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003884:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003886:	b923      	cbnz	r3, 8003892 <SPI_DMATransmitCplt+0x62>
  HAL_SPI_TxCpltCallback(hspi);
 8003888:	4620      	mov	r0, r4
 800388a:	f7fe f80d 	bl	80018a8 <HAL_SPI_TxCpltCallback>
}
 800388e:	b003      	add	sp, #12
 8003890:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8003892:	4620      	mov	r0, r4
 8003894:	f7ff ffb8 	bl	8003808 <HAL_SPI_ErrorCallback>
}
 8003898:	b003      	add	sp, #12
 800389a:	bd30      	pop	{r4, r5, pc}

0800389c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800389c:	2800      	cmp	r0, #0
 800389e:	d065      	beq.n	800396c <HAL_TIM_Base_Init+0xd0>
{
 80038a0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80038a6:	4604      	mov	r4, r0
 80038a8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d04f      	beq.n	8003950 <HAL_TIM_Base_Init+0xb4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b0:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b2:	4e35      	ldr	r6, [pc, #212]	@ (8003988 <HAL_TIM_Base_Init+0xec>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b4:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b8:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 80038ba:	2202      	movs	r2, #2
 80038bc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c0:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 80038c2:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c4:	d033      	beq.n	800392e <HAL_TIM_Base_Init+0x92>
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ca:	d046      	beq.n	800395a <HAL_TIM_Base_Init+0xbe>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038cc:	4e2f      	ldr	r6, [pc, #188]	@ (800398c <HAL_TIM_Base_Init+0xf0>)
 80038ce:	42b3      	cmp	r3, r6
 80038d0:	d04e      	beq.n	8003970 <HAL_TIM_Base_Init+0xd4>
 80038d2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80038d6:	42b3      	cmp	r3, r6
 80038d8:	d02d      	beq.n	8003936 <HAL_TIM_Base_Init+0x9a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038de:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80038e0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e2:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038e4:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e6:	2201      	movs	r2, #1
 80038e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	07d2      	lsls	r2, r2, #31
 80038ee:	d503      	bpl.n	80038f8 <HAL_TIM_Base_Init+0x5c>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003902:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003906:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800390a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800390e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800391a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800391e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8003922:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003926:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800392a:	2000      	movs	r0, #0
}
 800392c:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 800392e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003930:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003934:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003936:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003938:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800393e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003942:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003944:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003946:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003948:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800394a:	6962      	ldr	r2, [r4, #20]
 800394c:	631a      	str	r2, [r3, #48]	@ 0x30
 800394e:	e7ca      	b.n	80038e6 <HAL_TIM_Base_Init+0x4a>
    htim->Lock = HAL_UNLOCKED;
 8003950:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003954:	f7fe f8f6 	bl	8001b44 <HAL_TIM_Base_MspInit>
 8003958:	e7aa      	b.n	80038b0 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800395a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800395c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003960:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003962:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003964:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003968:	4332      	orrs	r2, r6
 800396a:	e7b6      	b.n	80038da <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 800396c:	2001      	movs	r0, #1
}
 800396e:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003970:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003972:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003976:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800397c:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 800397e:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003980:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003982:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003984:	e7e1      	b.n	800394a <HAL_TIM_Base_Init+0xae>
 8003986:	bf00      	nop
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40014000 	.word	0x40014000

08003990 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003990:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003994:	2b01      	cmp	r3, #1
 8003996:	d116      	bne.n	80039c6 <HAL_TIM_Base_Start_IT+0x36>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003998:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399a:	4910      	ldr	r1, [pc, #64]	@ (80039dc <HAL_TIM_Base_Start_IT+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	2202      	movs	r2, #2
 800399e:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ac:	d00d      	beq.n	80039ca <HAL_TIM_Base_Start_IT+0x3a>
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b2:	d00a      	beq.n	80039ca <HAL_TIM_Base_Start_IT+0x3a>
 80039b4:	4a0a      	ldr	r2, [pc, #40]	@ (80039e0 <HAL_TIM_Base_Start_IT+0x50>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80039c2:	2000      	movs	r0, #0
 80039c4:	4770      	bx	lr
    return HAL_ERROR;
 80039c6:	2001      	movs	r0, #1
}
 80039c8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ca:	6899      	ldr	r1, [r3, #8]
 80039cc:	4a05      	ldr	r2, [pc, #20]	@ (80039e4 <HAL_TIM_Base_Start_IT+0x54>)
 80039ce:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d0:	2a06      	cmp	r2, #6
 80039d2:	d0f6      	beq.n	80039c2 <HAL_TIM_Base_Start_IT+0x32>
 80039d4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80039d8:	d1ef      	bne.n	80039ba <HAL_TIM_Base_Start_IT+0x2a>
 80039da:	e7f2      	b.n	80039c2 <HAL_TIM_Base_Start_IT+0x32>
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40014000 	.word	0x40014000
 80039e4:	00010007 	.word	0x00010007

080039e8 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop

080039ec <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop

080039f0 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop

080039f4 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop

080039f8 <HAL_TIM_IRQHandler>:
{
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 80039fa:	6803      	ldr	r3, [r0, #0]
 80039fc:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039fe:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a00:	07a1      	lsls	r1, r4, #30
{
 8003a02:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a04:	d501      	bpl.n	8003a0a <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a06:	07b2      	lsls	r2, r6, #30
 8003a08:	d457      	bmi.n	8003aba <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a0a:	0767      	lsls	r7, r4, #29
 8003a0c:	d501      	bpl.n	8003a12 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a0e:	0770      	lsls	r0, r6, #29
 8003a10:	d440      	bmi.n	8003a94 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a12:	0721      	lsls	r1, r4, #28
 8003a14:	d501      	bpl.n	8003a1a <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a16:	0732      	lsls	r2, r6, #28
 8003a18:	d42a      	bmi.n	8003a70 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a1a:	06e7      	lsls	r7, r4, #27
 8003a1c:	d501      	bpl.n	8003a22 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a1e:	06f0      	lsls	r0, r6, #27
 8003a20:	d413      	bmi.n	8003a4a <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a22:	07e1      	lsls	r1, r4, #31
 8003a24:	d501      	bpl.n	8003a2a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a26:	07f2      	lsls	r2, r6, #31
 8003a28:	d465      	bmi.n	8003af6 <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a2a:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a2e:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a32:	d052      	beq.n	8003ada <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a34:	0633      	lsls	r3, r6, #24
 8003a36:	d466      	bmi.n	8003b06 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a38:	0660      	lsls	r0, r4, #25
 8003a3a:	d501      	bpl.n	8003a40 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a3c:	0671      	lsls	r1, r6, #25
 8003a3e:	d473      	bmi.n	8003b28 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a40:	06a2      	lsls	r2, r4, #26
 8003a42:	d501      	bpl.n	8003a48 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a44:	06b3      	lsls	r3, r6, #26
 8003a46:	d44d      	bmi.n	8003ae4 <HAL_TIM_IRQHandler+0xec>
}
 8003a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a4a:	682b      	ldr	r3, [r5, #0]
 8003a4c:	f06f 0210 	mvn.w	r2, #16
 8003a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a52:	2208      	movs	r2, #8
 8003a54:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5c:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a5e:	d174      	bne.n	8003b4a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a60:	f7ff ffc2 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	4628      	mov	r0, r5
 8003a66:	f7ff ffc3 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	772b      	strb	r3, [r5, #28]
 8003a6e:	e7d8      	b.n	8003a22 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	f06f 0208 	mvn.w	r2, #8
 8003a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a78:	2204      	movs	r2, #4
 8003a7a:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003a80:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a82:	d15f      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a84:	f7ff ffb0 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	4628      	mov	r0, r5
 8003a8a:	f7ff ffb1 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	772b      	strb	r3, [r5, #28]
 8003a92:	e7c2      	b.n	8003a1a <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	f06f 0204 	mvn.w	r2, #4
 8003a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aa8:	d149      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	f7ff ff9d 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aae:	4628      	mov	r0, r5
 8003ab0:	f7ff ff9e 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	772b      	strb	r3, [r5, #28]
 8003ab8:	e7ab      	b.n	8003a12 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003aba:	f06f 0202 	mvn.w	r2, #2
 8003abe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	079b      	lsls	r3, r3, #30
 8003ac8:	d136      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	f7ff ff8d 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f7ff ff8e 	bl	80039f0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	772b      	strb	r3, [r5, #28]
 8003ad8:	e797      	b.n	8003a0a <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ada:	2f00      	cmp	r7, #0
 8003adc:	d0ac      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ade:	0637      	lsls	r7, r6, #24
 8003ae0:	d41a      	bmi.n	8003b18 <HAL_TIM_IRQHandler+0x120>
 8003ae2:	e7a9      	b.n	8003a38 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	f06f 0220 	mvn.w	r2, #32
 8003aea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003aec:	4628      	mov	r0, r5
}
 8003aee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003af2:	f000 b863 	b.w	8003bbc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003af6:	682b      	ldr	r3, [r5, #0]
 8003af8:	f06f 0201 	mvn.w	r2, #1
 8003afc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003afe:	4628      	mov	r0, r5
 8003b00:	f7fd fed4 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
 8003b04:	e791      	b.n	8003a2a <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b06:	682b      	ldr	r3, [r5, #0]
 8003b08:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003b0e:	4628      	mov	r0, r5
 8003b10:	f000 f856 	bl	8003bc0 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b14:	2f00      	cmp	r7, #0
 8003b16:	d08f      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003b20:	4628      	mov	r0, r5
 8003b22:	f000 f84f 	bl	8003bc4 <HAL_TIMEx_Break2Callback>
 8003b26:	e787      	b.n	8003a38 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003b30:	4628      	mov	r0, r5
 8003b32:	f7ff ff5f 	bl	80039f4 <HAL_TIM_TriggerCallback>
 8003b36:	e783      	b.n	8003a40 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 8003b38:	f7ff ff58 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e7ca      	b.n	8003ad4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	f7ff ff55 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 8003b42:	e7b7      	b.n	8003ab4 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b44:	f7ff ff52 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 8003b48:	e7a1      	b.n	8003a8e <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	f7ff ff4f 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 8003b4e:	e78c      	b.n	8003a6a <HAL_TIM_IRQHandler+0x72>

08003b50 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b50:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003b54:	2a01      	cmp	r2, #1
 8003b56:	d02b      	beq.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8003b58:	b470      	push	{r4, r5, r6}
 8003b5a:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b5c:	4d15      	ldr	r5, [pc, #84]	@ (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 8003b5e:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b66:	42a8      	cmp	r0, r5
  tmpcr2 = htim->Instance->CR2;
 8003b68:	6842      	ldr	r2, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b6a:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003b6c:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b6e:	d016      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b70:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b74:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b76:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8003b7a:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7c:	d002      	beq.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8003b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8003b80:	4290      	cmp	r0, r2
 8003b82:	d104      	bne.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b84:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b86:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b8a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b8c:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003b8e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003b96:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003b9a:	bc70      	pop	{r4, r5, r6}
 8003b9c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b9e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ba0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ba4:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003baa:	4332      	orrs	r2, r6
  htim->Instance->CR2 = tmpcr2;
 8003bac:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bae:	e7e9      	b.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 8003bb0:	2002      	movs	r0, #2
}
 8003bb2:	4770      	bx	lr
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40014000 	.word	0x40014000

08003bbc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop

08003bc0 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop

08003bc4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop

08003bc8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003bc8:	b570      	push	{r4, r5, r6, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bca:	6fc6      	ldr	r6, [r0, #124]	@ 0x7c
 8003bcc:	2e20      	cmp	r6, #32
 8003bce:	d122      	bne.n	8003c16 <HAL_UART_Transmit_DMA+0x4e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	b1f1      	cbz	r1, 8003c12 <HAL_UART_Transmit_DMA+0x4a>
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	b1e2      	cbz	r2, 8003c12 <HAL_UART_Transmit_DMA+0x4a>
      return HAL_ERROR;
    }

    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;
 8003bd8:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bdc:	2200      	movs	r2, #0
    huart->pTxBuffPtr  = pData;
 8003bde:	64c1      	str	r1, [r0, #76]	@ 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be0:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    huart->TxXferSize  = Size;
 8003be4:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 8003be8:	6f00      	ldr	r0, [r0, #112]	@ 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bea:	2521      	movs	r5, #33	@ 0x21
 8003bec:	67e5      	str	r5, [r4, #124]	@ 0x7c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003bee:	6825      	ldr	r5, [r4, #0]
    if (huart->hdmatx != NULL)
 8003bf0:	b1a0      	cbz	r0, 8003c1c <HAL_UART_Transmit_DMA+0x54>
      huart->hdmatx->XferAbortCallback = NULL;
 8003bf2:	6382      	str	r2, [r0, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003bf4:	f105 0228 	add.w	r2, r5, #40	@ 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003bf8:	4d10      	ldr	r5, [pc, #64]	@ (8003c3c <HAL_UART_Transmit_DMA+0x74>)
 8003bfa:	62c5      	str	r5, [r0, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003bfc:	4d10      	ldr	r5, [pc, #64]	@ (8003c40 <HAL_UART_Transmit_DMA+0x78>)
 8003bfe:	6305      	str	r5, [r0, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c00:	4d10      	ldr	r5, [pc, #64]	@ (8003c44 <HAL_UART_Transmit_DMA+0x7c>)
 8003c02:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003c04:	f7fe fa2e 	bl	8002064 <HAL_DMA_Start_IT>
 8003c08:	b138      	cbz	r0, 8003c1a <HAL_UART_Transmit_DMA+0x52>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c0a:	2310      	movs	r3, #16
 8003c0c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003c10:	67e6      	str	r6, [r4, #124]	@ 0x7c
      return HAL_ERROR;
 8003c12:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8003c16:	2002      	movs	r0, #2
}
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
 8003c1a:	6825      	ldr	r5, [r4, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003c1c:	2340      	movs	r3, #64	@ 0x40
 8003c1e:	622b      	str	r3, [r5, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	f105 0308 	add.w	r3, r5, #8
 8003c24:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	f105 0108 	add.w	r1, r5, #8
 8003c30:	e841 3200 	strex	r2, r3, [r1]
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	d1f3      	bne.n	8003c20 <HAL_UART_Transmit_DMA+0x58>
    return HAL_OK;
 8003c38:	2000      	movs	r0, #0
}
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	08003c4d 	.word	0x08003c4d
 8003c40:	08003c95 	.word	0x08003c95
 8003c44:	08003cad 	.word	0x08003cad

08003c48 <HAL_UART_TxCpltCallback>:
/**
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop

08003c4c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003c4e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c50:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f013 0320 	ands.w	r3, r3, #32
 8003c58:	d117      	bne.n	8003c8a <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8003c5a:	6802      	ldr	r2, [r0, #0]
 8003c5c:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	f102 0308 	add.w	r3, r2, #8
 8003c64:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	f102 0008 	add.w	r0, r2, #8
 8003c70:	e840 3100 	strex	r1, r3, [r0]
 8003c74:	2900      	cmp	r1, #0
 8003c76:	d1f3      	bne.n	8003c60 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	e842 3100 	strex	r1, r3, [r2]
 8003c84:	2900      	cmp	r1, #0
 8003c86:	d1f7      	bne.n	8003c78 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c88:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003c8a:	f7ff ffdd 	bl	8003c48 <HAL_UART_TxCpltCallback>
}
 8003c8e:	bd08      	pop	{r3, pc}

08003c90 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop

08003c94 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c94:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003c96:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003c98:	f7ff fffa 	bl	8003c90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9c:	bd08      	pop	{r3, pc}
 8003c9e:	bf00      	nop

08003ca0 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop

08003ca4 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop

08003ca8 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop

08003cac <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cac:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003cae:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003cb0:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
{
 8003cb2:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003cb4:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	0612      	lsls	r2, r2, #24
 8003cbc:	d501      	bpl.n	8003cc2 <UART_DMAError+0x16>
 8003cbe:	2921      	cmp	r1, #33	@ 0x21
 8003cc0:	d00d      	beq.n	8003cde <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	0652      	lsls	r2, r2, #25
 8003cc6:	d501      	bpl.n	8003ccc <UART_DMAError+0x20>
 8003cc8:	2c22      	cmp	r4, #34	@ 0x22
 8003cca:	d016      	beq.n	8003cfa <UART_DMAError+0x4e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ccc:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8003cd0:	f043 0310 	orr.w	r3, r3, #16
 8003cd4:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cd8:	f7ff ffe6 	bl	8003ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cdc:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ce8:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	e843 2100 	strex	r1, r2, [r3]
 8003cf0:	2900      	cmp	r1, #0
 8003cf2:	d1f7      	bne.n	8003ce4 <UART_DMAError+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	67c2      	str	r2, [r0, #124]	@ 0x7c
}
 8003cf8:	e7e3      	b.n	8003cc2 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d04:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	e843 2100 	strex	r1, r2, [r3]
 8003d0c:	2900      	cmp	r1, #0
 8003d0e:	d1f7      	bne.n	8003d00 <UART_DMAError+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	f103 0208 	add.w	r2, r3, #8
 8003d14:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	f103 0408 	add.w	r4, r3, #8
 8003d20:	e844 2100 	strex	r1, r2, [r4]
 8003d24:	2900      	cmp	r1, #0
 8003d26:	d1f3      	bne.n	8003d10 <UART_DMAError+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d28:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8003d2a:	2a01      	cmp	r2, #1
 8003d2c:	d006      	beq.n	8003d3c <UART_DMAError+0x90>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003d30:	2220      	movs	r2, #32
 8003d32:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  huart->RxISR = NULL;
 8003d36:	6683      	str	r3, [r0, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d38:	6603      	str	r3, [r0, #96]	@ 0x60
}
 8003d3a:	e7c7      	b.n	8003ccc <UART_DMAError+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d40:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	e843 2100 	strex	r1, r2, [r3]
 8003d48:	2900      	cmp	r1, #0
 8003d4a:	d0f0      	beq.n	8003d2e <UART_DMAError+0x82>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	e853 2f00 	ldrex	r2, [r3]
 8003d50:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	e843 2100 	strex	r1, r2, [r3]
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	d1ef      	bne.n	8003d3c <UART_DMAError+0x90>
 8003d5c:	e7e7      	b.n	8003d2e <UART_DMAError+0x82>
 8003d5e:	bf00      	nop

08003d60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d60:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d62:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003d6a:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d6e:	f7ff ff9b 	bl	8003ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d72:	bd08      	pop	{r3, pc}

08003d74 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d74:	6803      	ldr	r3, [r0, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d78:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d7a:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 8003d7e:	ea12 0f0c 	tst.w	r2, ip
{
 8003d82:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d84:	689d      	ldr	r5, [r3, #8]
{
 8003d86:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8003d88:	d152      	bne.n	8003e30 <HAL_UART_IRQHandler+0xbc>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d8a:	0696      	lsls	r6, r2, #26
 8003d8c:	d502      	bpl.n	8003d94 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d8e:	068e      	lsls	r6, r1, #26
 8003d90:	f100 80cd 	bmi.w	8003f2e <HAL_UART_IRQHandler+0x1ba>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d94:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003d96:	2801      	cmp	r0, #1
 8003d98:	d024      	beq.n	8003de4 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d9a:	02d6      	lsls	r6, r2, #11
 8003d9c:	d502      	bpl.n	8003da4 <HAL_UART_IRQHandler+0x30>
 8003d9e:	0268      	lsls	r0, r5, #9
 8003da0:	f100 80ca 	bmi.w	8003f38 <HAL_UART_IRQHandler+0x1c4>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003da4:	0616      	lsls	r6, r2, #24
 8003da6:	d414      	bmi.n	8003dd2 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003da8:	0650      	lsls	r0, r2, #25
 8003daa:	d501      	bpl.n	8003db0 <HAL_UART_IRQHandler+0x3c>
 8003dac:	064a      	lsls	r2, r1, #25
 8003dae:	d400      	bmi.n	8003db2 <HAL_UART_IRQHandler+0x3e>
}
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	e843 2100 	strex	r1, r2, [r3]
 8003dbe:	2900      	cmp	r1, #0
 8003dc0:	d1f7      	bne.n	8003db2 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dc2:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003dc4:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003dc6:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->TxISR = NULL;
 8003dc8:	66e3      	str	r3, [r4, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f7ff ff3c 	bl	8003c48 <HAL_UART_TxCpltCallback>
}
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003dd2:	060d      	lsls	r5, r1, #24
 8003dd4:	d5e8      	bpl.n	8003da8 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8003dd6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0e9      	beq.n	8003db0 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8003ddc:	4620      	mov	r0, r4
}
 8003dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8003de2:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003de4:	06d0      	lsls	r0, r2, #27
 8003de6:	d5d8      	bpl.n	8003d9a <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003de8:	06ce      	lsls	r6, r1, #27
 8003dea:	d5d6      	bpl.n	8003d9a <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dec:	2210      	movs	r2, #16
 8003dee:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	6899      	ldr	r1, [r3, #8]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003df2:	f8b4 2058 	ldrh.w	r2, [r4, #88]	@ 0x58
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df6:	0648      	lsls	r0, r1, #25
 8003df8:	f140 80fb 	bpl.w	8003ff2 <HAL_UART_IRQHandler+0x27e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dfc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003dfe:	6805      	ldr	r5, [r0, #0]
 8003e00:	6869      	ldr	r1, [r5, #4]
 8003e02:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8003e04:	2900      	cmp	r1, #0
 8003e06:	f000 8160 	beq.w	80040ca <HAL_UART_IRQHandler+0x356>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e0a:	4291      	cmp	r1, r2
 8003e0c:	f080 815d 	bcs.w	80040ca <HAL_UART_IRQHandler+0x356>
        huart->RxXferCount = nb_remaining_rx_data;
 8003e10:	f8a4 105a 	strh.w	r1, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e14:	6829      	ldr	r1, [r5, #0]
 8003e16:	0689      	lsls	r1, r1, #26
 8003e18:	f140 8120 	bpl.w	800405c <HAL_UART_IRQHandler+0x2e8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e20:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
 8003e24:	1a51      	subs	r1, r2, r1
 8003e26:	4620      	mov	r0, r4
 8003e28:	b289      	uxth	r1, r1
 8003e2a:	f7fd fd47 	bl	80018bc <HAL_UARTEx_RxEventCallback>
}
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e30:	f015 0601 	ands.w	r6, r5, #1
 8003e34:	f040 80a5 	bne.w	8003f82 <HAL_UART_IRQHandler+0x20e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e38:	48a7      	ldr	r0, [pc, #668]	@ (80040d8 <HAL_UART_IRQHandler+0x364>)
 8003e3a:	4201      	tst	r1, r0
 8003e3c:	d0aa      	beq.n	8003d94 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e3e:	07d5      	lsls	r5, r2, #31
 8003e40:	d50f      	bpl.n	8003e62 <HAL_UART_IRQHandler+0xee>
 8003e42:	05c8      	lsls	r0, r1, #23
 8003e44:	f140 80d1 	bpl.w	8003fea <HAL_UART_IRQHandler+0x276>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e48:	2001      	movs	r0, #1
 8003e4a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e4c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003e50:	f040 0001 	orr.w	r0, r0, #1
 8003e54:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e58:	0790      	lsls	r0, r2, #30
 8003e5a:	d57a      	bpl.n	8003f52 <HAL_UART_IRQHandler+0x1de>
 8003e5c:	2e00      	cmp	r6, #0
 8003e5e:	f040 8094 	bne.w	8003f8a <HAL_UART_IRQHandler+0x216>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e62:	0755      	lsls	r5, r2, #29
 8003e64:	f140 809b 	bpl.w	8003f9e <HAL_UART_IRQHandler+0x22a>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e68:	0716      	lsls	r6, r2, #28
 8003e6a:	f100 80bb 	bmi.w	8003fe4 <HAL_UART_IRQHandler+0x270>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e6e:	0515      	lsls	r5, r2, #20
 8003e70:	d50a      	bpl.n	8003e88 <HAL_UART_IRQHandler+0x114>
 8003e72:	0148      	lsls	r0, r1, #5
 8003e74:	d508      	bpl.n	8003e88 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e76:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003e7a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e7c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003e80:	f040 0020 	orr.w	r0, r0, #32
 8003e84:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e88:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d08f      	beq.n	8003db0 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e90:	0692      	lsls	r2, r2, #26
 8003e92:	d506      	bpl.n	8003ea2 <HAL_UART_IRQHandler+0x12e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e94:	068e      	lsls	r6, r1, #26
 8003e96:	d504      	bpl.n	8003ea2 <HAL_UART_IRQHandler+0x12e>
        if (huart->RxISR != NULL)
 8003e98:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8003e9a:	b112      	cbz	r2, 8003ea2 <HAL_UART_IRQHandler+0x12e>
          huart->RxISR(huart);
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ea0:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8003ea2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ea6:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ea8:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eac:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8003eb0:	ea52 0501 	orrs.w	r5, r2, r1
 8003eb4:	f000 8103 	beq.w	80040be <HAL_UART_IRQHandler+0x34a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	e843 2100 	strex	r1, r2, [r3]
 8003ec4:	2900      	cmp	r1, #0
 8003ec6:	d1f7      	bne.n	8003eb8 <HAL_UART_IRQHandler+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	f103 0208 	add.w	r2, r3, #8
 8003ecc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	f103 0008 	add.w	r0, r3, #8
 8003ed8:	e840 2100 	strex	r1, r2, [r0]
 8003edc:	2900      	cmp	r1, #0
 8003ede:	d1f3      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003ee2:	2a01      	cmp	r2, #1
 8003ee4:	d064      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x23c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	2120      	movs	r1, #32
 8003eea:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	6622      	str	r2, [r4, #96]	@ 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8003ef2:	66a2      	str	r2, [r4, #104]	@ 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	064d      	lsls	r5, r1, #25
 8003ef6:	d56c      	bpl.n	8003fd2 <HAL_UART_IRQHandler+0x25e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	f103 0208 	add.w	r2, r3, #8
 8003efc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	f103 0008 	add.w	r0, r3, #8
 8003f08:	e840 2100 	strex	r1, r2, [r0]
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	d1f3      	bne.n	8003ef8 <HAL_UART_IRQHandler+0x184>
          if (huart->hdmarx != NULL)
 8003f10:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d05d      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x25e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f16:	4b71      	ldr	r3, [pc, #452]	@ (80040dc <HAL_UART_IRQHandler+0x368>)
 8003f18:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f1a:	f7fe f90d 	bl	8002138 <HAL_DMA_Abort_IT>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f43f af46 	beq.w	8003db0 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f24:	6f60      	ldr	r0, [r4, #116]	@ 0x74
}
 8003f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f2a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003f2c:	4718      	bx	r3
      if (huart->RxISR != NULL)
 8003f2e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f47f af54 	bne.w	8003dde <HAL_UART_IRQHandler+0x6a>
 8003f36:	e73b      	b.n	8003db0 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f38:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003f3c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f3e:	621a      	str	r2, [r3, #32]
}
 8003f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003f44:	f000 bc30 	b.w	80047a8 <HAL_UARTEx_WakeupCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f48:	05c8      	lsls	r0, r1, #23
 8003f4a:	f53f af7d 	bmi.w	8003e48 <HAL_UART_IRQHandler+0xd4>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f4e:	0795      	lsls	r5, r2, #30
 8003f50:	d41b      	bmi.n	8003f8a <HAL_UART_IRQHandler+0x216>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f52:	0750      	lsls	r0, r2, #29
 8003f54:	d523      	bpl.n	8003f9e <HAL_UART_IRQHandler+0x22a>
 8003f56:	2e00      	cmp	r6, #0
 8003f58:	d086      	beq.n	8003e68 <HAL_UART_IRQHandler+0xf4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f5a:	2004      	movs	r0, #4
 8003f5c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f5e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f62:	0715      	lsls	r5, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f64:	f040 0002 	orr.w	r0, r0, #2
 8003f68:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f6c:	f57f af7f 	bpl.w	8003e6e <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f70:	2008      	movs	r0, #8
 8003f72:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f74:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003f78:	f040 0008 	orr.w	r0, r0, #8
 8003f7c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8003f80:	e775      	b.n	8003e6e <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f82:	07d0      	lsls	r0, r2, #31
 8003f84:	d4e0      	bmi.n	8003f48 <HAL_UART_IRQHandler+0x1d4>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f86:	0795      	lsls	r5, r2, #30
 8003f88:	d527      	bpl.n	8003fda <HAL_UART_IRQHandler+0x266>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f8a:	2002      	movs	r0, #2
 8003f8c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f8e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003f92:	f040 0004 	orr.w	r0, r0, #4
 8003f96:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f9a:	0750      	lsls	r0, r2, #29
 8003f9c:	d4dd      	bmi.n	8003f5a <HAL_UART_IRQHandler+0x1e6>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f9e:	0710      	lsls	r0, r2, #28
 8003fa0:	f57f af65 	bpl.w	8003e6e <HAL_UART_IRQHandler+0xfa>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fa4:	f001 0020 	and.w	r0, r1, #32
 8003fa8:	4330      	orrs	r0, r6
 8003faa:	f43f af60 	beq.w	8003e6e <HAL_UART_IRQHandler+0xfa>
 8003fae:	e7df      	b.n	8003f70 <HAL_UART_IRQHandler+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	e843 2100 	strex	r1, r2, [r3]
 8003fbc:	2900      	cmp	r1, #0
 8003fbe:	d092      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x172>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	e853 2f00 	ldrex	r2, [r3]
 8003fc4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	e843 2100 	strex	r1, r2, [r3]
 8003fcc:	2900      	cmp	r1, #0
 8003fce:	d1ef      	bne.n	8003fb0 <HAL_UART_IRQHandler+0x23c>
 8003fd0:	e789      	b.n	8003ee6 <HAL_UART_IRQHandler+0x172>
            HAL_UART_ErrorCallback(huart);
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f7ff fe68 	bl	8003ca8 <HAL_UART_ErrorCallback>
}
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fda:	0756      	lsls	r6, r2, #29
 8003fdc:	d4bd      	bmi.n	8003f5a <HAL_UART_IRQHandler+0x1e6>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fde:	0710      	lsls	r0, r2, #28
 8003fe0:	d4c6      	bmi.n	8003f70 <HAL_UART_IRQHandler+0x1fc>
 8003fe2:	e744      	b.n	8003e6e <HAL_UART_IRQHandler+0xfa>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fe4:	068d      	lsls	r5, r1, #26
 8003fe6:	d4c3      	bmi.n	8003f70 <HAL_UART_IRQHandler+0x1fc>
 8003fe8:	e741      	b.n	8003e6e <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fea:	0795      	lsls	r5, r2, #30
 8003fec:	f53f af39 	bmi.w	8003e62 <HAL_UART_IRQHandler+0xee>
 8003ff0:	e7af      	b.n	8003f52 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ff2:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 8003ff6:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
 8003ffa:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ffc:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8003ffe:	2900      	cmp	r1, #0
 8004000:	f43f aed6 	beq.w	8003db0 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004004:	1a12      	subs	r2, r2, r0
 8004006:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8004008:	2900      	cmp	r1, #0
 800400a:	f43f aed1 	beq.w	8003db0 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004012:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	e843 2000 	strex	r0, r2, [r3]
 800401a:	2800      	cmp	r0, #0
 800401c:	d1f7      	bne.n	800400e <HAL_UART_IRQHandler+0x29a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	f103 0208 	add.w	r2, r3, #8
 8004022:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004026:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	f103 0508 	add.w	r5, r3, #8
 800402e:	e845 2000 	strex	r0, r2, [r5]
 8004032:	2800      	cmp	r0, #0
 8004034:	d1f3      	bne.n	800401e <HAL_UART_IRQHandler+0x2aa>
        huart->RxState = HAL_UART_STATE_READY;
 8004036:	2220      	movs	r2, #32
 8004038:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        huart->RxISR = NULL;
 800403c:	66a0      	str	r0, [r4, #104]	@ 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403e:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004044:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	e843 2000 	strex	r0, r2, [r3]
 800404c:	2800      	cmp	r0, #0
 800404e:	d1f7      	bne.n	8004040 <HAL_UART_IRQHandler+0x2cc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004050:	2302      	movs	r3, #2
 8004052:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004054:	4620      	mov	r0, r4
 8004056:	f7fd fc31 	bl	80018bc <HAL_UARTEx_RxEventCallback>
}
 800405a:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004060:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	e843 2100 	strex	r1, r2, [r3]
 8004068:	2900      	cmp	r1, #0
 800406a:	d1f7      	bne.n	800405c <HAL_UART_IRQHandler+0x2e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	f103 0208 	add.w	r2, r3, #8
 8004070:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	f103 0508 	add.w	r5, r3, #8
 800407c:	e845 2100 	strex	r1, r2, [r5]
 8004080:	2900      	cmp	r1, #0
 8004082:	d1f3      	bne.n	800406c <HAL_UART_IRQHandler+0x2f8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	f103 0208 	add.w	r2, r3, #8
 8004088:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800408c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	f103 0508 	add.w	r5, r3, #8
 8004094:	e845 2100 	strex	r1, r2, [r5]
 8004098:	2900      	cmp	r1, #0
 800409a:	d1f3      	bne.n	8004084 <HAL_UART_IRQHandler+0x310>
          huart->RxState = HAL_UART_STATE_READY;
 800409c:	2220      	movs	r2, #32
 800409e:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a2:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	e843 2100 	strex	r1, r2, [r3]
 80040b0:	2900      	cmp	r1, #0
 80040b2:	d1f7      	bne.n	80040a4 <HAL_UART_IRQHandler+0x330>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040b4:	f7fe f81a 	bl	80020ec <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040b8:	f8b4 2058 	ldrh.w	r2, [r4, #88]	@ 0x58
 80040bc:	e6ae      	b.n	8003e1c <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 80040be:	4620      	mov	r0, r4
 80040c0:	f7ff fdf2 	bl	8003ca8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c4:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
        if (nb_remaining_rx_data == huart->RxXferSize)
 80040ca:	4291      	cmp	r1, r2
 80040cc:	f47f ae70 	bne.w	8003db0 <HAL_UART_IRQHandler+0x3c>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	069b      	lsls	r3, r3, #26
 80040d4:	d4bc      	bmi.n	8004050 <HAL_UART_IRQHandler+0x2dc>
}
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	04000120 	.word	0x04000120
 80040dc:	08003d61 	.word	0x08003d61

080040e0 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040e0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80040e2:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80040e4:	2301      	movs	r3, #1
 80040e6:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e8:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d002      	beq.n	80040f4 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 80040ee:	f7ff fdd9 	bl	8003ca4 <HAL_UART_RxHalfCpltCallback>
}
 80040f2:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80040f4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 80040f8:	0849      	lsrs	r1, r1, #1
 80040fa:	f7fd fbdf 	bl	80018bc <HAL_UARTEx_RxEventCallback>
}
 80040fe:	bd08      	pop	{r3, pc}

08004100 <UART_DMAReceiveCplt>:
{
 8004100:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004102:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004104:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	f012 0220 	ands.w	r2, r2, #32
 800410c:	d128      	bne.n	8004160 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 800410e:	6803      	ldr	r3, [r0, #0]
 8004110:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	e843 2100 	strex	r1, r2, [r3]
 8004120:	2900      	cmp	r1, #0
 8004122:	d1f7      	bne.n	8004114 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	f103 0208 	add.w	r2, r3, #8
 8004128:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	f103 0c08 	add.w	ip, r3, #8
 8004134:	e84c 2100 	strex	r1, r2, [ip]
 8004138:	2900      	cmp	r1, #0
 800413a:	d1f3      	bne.n	8004124 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	f103 0208 	add.w	r2, r3, #8
 8004140:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004144:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	f103 0c08 	add.w	ip, r3, #8
 800414c:	e84c 2100 	strex	r1, r2, [ip]
 8004150:	2900      	cmp	r1, #0
 8004152:	d1f3      	bne.n	800413c <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8004154:	2220      	movs	r2, #32
 8004156:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800415a:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800415c:	2a01      	cmp	r2, #1
 800415e:	d007      	beq.n	8004170 <UART_DMAReceiveCplt+0x70>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004160:	2300      	movs	r3, #0
 8004162:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004164:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004166:	2b01      	cmp	r3, #1
 8004168:	d013      	beq.n	8004192 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 800416a:	f7ff fd99 	bl	8003ca0 <HAL_UART_RxCpltCallback>
}
 800416e:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004174:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	e843 2100 	strex	r1, r2, [r3]
 800417c:	2900      	cmp	r1, #0
 800417e:	d0ef      	beq.n	8004160 <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	e853 2f00 	ldrex	r2, [r3]
 8004184:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	e843 2100 	strex	r1, r2, [r3]
 800418c:	2900      	cmp	r1, #0
 800418e:	d1ef      	bne.n	8004170 <UART_DMAReceiveCplt+0x70>
 8004190:	e7e6      	b.n	8004160 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004192:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8004196:	f7fd fb91 	bl	80018bc <HAL_UARTEx_RxEventCallback>
}
 800419a:	bd08      	pop	{r3, pc}

0800419c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800419c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800419e:	071a      	lsls	r2, r3, #28
{
 80041a0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041a2:	d506      	bpl.n	80041b2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a4:	6801      	ldr	r1, [r0, #0]
 80041a6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80041a8:	684a      	ldr	r2, [r1, #4]
 80041aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041ae:	4322      	orrs	r2, r4
 80041b0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041b2:	07dc      	lsls	r4, r3, #31
 80041b4:	d506      	bpl.n	80041c4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041b6:	6801      	ldr	r1, [r0, #0]
 80041b8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80041ba:	684a      	ldr	r2, [r1, #4]
 80041bc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80041c0:	4322      	orrs	r2, r4
 80041c2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041c4:	0799      	lsls	r1, r3, #30
 80041c6:	d506      	bpl.n	80041d6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041c8:	6801      	ldr	r1, [r0, #0]
 80041ca:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80041cc:	684a      	ldr	r2, [r1, #4]
 80041ce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80041d2:	4322      	orrs	r2, r4
 80041d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041d6:	075a      	lsls	r2, r3, #29
 80041d8:	d506      	bpl.n	80041e8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041da:	6801      	ldr	r1, [r0, #0]
 80041dc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80041de:	684a      	ldr	r2, [r1, #4]
 80041e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041e4:	4322      	orrs	r2, r4
 80041e6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041e8:	06dc      	lsls	r4, r3, #27
 80041ea:	d506      	bpl.n	80041fa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041ec:	6801      	ldr	r1, [r0, #0]
 80041ee:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80041f0:	688a      	ldr	r2, [r1, #8]
 80041f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041f6:	4322      	orrs	r2, r4
 80041f8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041fa:	0699      	lsls	r1, r3, #26
 80041fc:	d506      	bpl.n	800420c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041fe:	6801      	ldr	r1, [r0, #0]
 8004200:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8004202:	688a      	ldr	r2, [r1, #8]
 8004204:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004208:	4322      	orrs	r2, r4
 800420a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800420c:	065a      	lsls	r2, r3, #25
 800420e:	d509      	bpl.n	8004224 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004210:	6801      	ldr	r1, [r0, #0]
 8004212:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8004214:	684a      	ldr	r2, [r1, #4]
 8004216:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800421a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800421c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004220:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004222:	d00b      	beq.n	800423c <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004224:	061b      	lsls	r3, r3, #24
 8004226:	d506      	bpl.n	8004236 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004228:	6802      	ldr	r2, [r0, #0]
 800422a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800422c:	6853      	ldr	r3, [r2, #4]
 800422e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004232:	430b      	orrs	r3, r1
 8004234:	6053      	str	r3, [r2, #4]
}
 8004236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800423a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800423c:	684a      	ldr	r2, [r1, #4]
 800423e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004240:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004244:	4322      	orrs	r2, r4
 8004246:	604a      	str	r2, [r1, #4]
 8004248:	e7ec      	b.n	8004224 <UART_AdvFeatureConfig+0x88>
 800424a:	bf00      	nop

0800424c <UART_CheckIdleState>:
{
 800424c:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424e:	2300      	movs	r3, #0
{
 8004250:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8004256:	f7fd fe0b 	bl	8001e70 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	6813      	ldr	r3, [r2, #0]
 800425e:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8004260:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004262:	d40e      	bmi.n	8004282 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004264:	6813      	ldr	r3, [r2, #0]
 8004266:	0759      	lsls	r1, r3, #29
 8004268:	d42f      	bmi.n	80042ca <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800426c:	2220      	movs	r2, #32
 800426e:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 8004270:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8004272:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004276:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004278:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 800427a:	2300      	movs	r3, #0
 800427c:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8004280:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004282:	69d3      	ldr	r3, [r2, #28]
 8004284:	0298      	lsls	r0, r3, #10
 8004286:	d4ed      	bmi.n	8004264 <UART_CheckIdleState+0x18>
 8004288:	e00c      	b.n	80042a4 <UART_CheckIdleState+0x58>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800428a:	6819      	ldr	r1, [r3, #0]
 800428c:	0749      	lsls	r1, r1, #29
 800428e:	461a      	mov	r2, r3
 8004290:	d505      	bpl.n	800429e <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004292:	69d9      	ldr	r1, [r3, #28]
 8004294:	0708      	lsls	r0, r1, #28
 8004296:	d449      	bmi.n	800432c <UART_CheckIdleState+0xe0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004298:	69d9      	ldr	r1, [r3, #28]
 800429a:	0509      	lsls	r1, r1, #20
 800429c:	d474      	bmi.n	8004388 <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	0298      	lsls	r0, r3, #10
 80042a2:	d4df      	bmi.n	8004264 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7fd fde4 	bl	8001e70 <HAL_GetTick>
 80042a8:	1b43      	subs	r3, r0, r5
 80042aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042ae:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b0:	d3eb      	bcc.n	800428a <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	e843 2100 	strex	r1, r2, [r3]
 80042be:	2900      	cmp	r1, #0
 80042c0:	d1f7      	bne.n	80042b2 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 80042c2:	2320      	movs	r3, #32
 80042c4:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80042c6:	2003      	movs	r0, #3
 80042c8:	e7d7      	b.n	800427a <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ca:	69d3      	ldr	r3, [r2, #28]
 80042cc:	025b      	lsls	r3, r3, #9
 80042ce:	d4cc      	bmi.n	800426a <UART_CheckIdleState+0x1e>
 80042d0:	e00d      	b.n	80042ee <UART_CheckIdleState+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	0750      	lsls	r0, r2, #29
 80042d6:	d507      	bpl.n	80042e8 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	0711      	lsls	r1, r2, #28
 80042dc:	f100 8082 	bmi.w	80043e4 <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	0512      	lsls	r2, r2, #20
 80042e4:	f100 80ac 	bmi.w	8004440 <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	025b      	lsls	r3, r3, #9
 80042ec:	d4bd      	bmi.n	800426a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ee:	f7fd fdbf 	bl	8001e70 <HAL_GetTick>
 80042f2:	1b43      	subs	r3, r0, r5
 80042f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	d3ea      	bcc.n	80042d2 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004300:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	e843 2100 	strex	r1, r2, [r3]
 8004308:	2900      	cmp	r1, #0
 800430a:	d1f7      	bne.n	80042fc <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	f103 0208 	add.w	r2, r3, #8
 8004310:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004314:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	f103 0008 	add.w	r0, r3, #8
 800431c:	e840 2100 	strex	r1, r2, [r0]
 8004320:	2900      	cmp	r1, #0
 8004322:	d1f3      	bne.n	800430c <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8004324:	2320      	movs	r3, #32
 8004326:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 800432a:	e7cc      	b.n	80042c6 <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800432c:	2208      	movs	r2, #8
 800432e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004334:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	e843 2100 	strex	r1, r2, [r3]
 800433c:	2900      	cmp	r1, #0
 800433e:	d1f7      	bne.n	8004330 <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	f103 0208 	add.w	r2, r3, #8
 8004344:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004348:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	f103 0008 	add.w	r0, r3, #8
 8004350:	e840 2100 	strex	r1, r2, [r0]
 8004354:	2900      	cmp	r1, #0
 8004356:	d1f3      	bne.n	8004340 <UART_CheckIdleState+0xf4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004358:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800435a:	2a01      	cmp	r2, #1
 800435c:	d00b      	beq.n	8004376 <UART_CheckIdleState+0x12a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004360:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004362:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004364:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004368:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436a:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 800436c:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004370:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8004374:	e79d      	b.n	80042b2 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	e843 2100 	strex	r1, r2, [r3]
 8004382:	2900      	cmp	r1, #0
 8004384:	d1f7      	bne.n	8004376 <UART_CheckIdleState+0x12a>
 8004386:	e7ea      	b.n	800435e <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004388:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800438c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004392:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	e843 2100 	strex	r1, r2, [r3]
 800439a:	2900      	cmp	r1, #0
 800439c:	d1f7      	bne.n	800438e <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	f103 0208 	add.w	r2, r3, #8
 80043a2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	f103 0008 	add.w	r0, r3, #8
 80043ae:	e840 2100 	strex	r1, r2, [r0]
 80043b2:	2900      	cmp	r1, #0
 80043b4:	d1f3      	bne.n	800439e <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80043b8:	2a01      	cmp	r2, #1
 80043ba:	d00a      	beq.n	80043d2 <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043bc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80043be:	2120      	movs	r1, #32
 80043c0:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80043c4:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c6:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80043c8:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043cc:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80043d0:	e76f      	b.n	80042b2 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	e843 2100 	strex	r1, r2, [r3]
 80043de:	2900      	cmp	r1, #0
 80043e0:	d1f7      	bne.n	80043d2 <UART_CheckIdleState+0x186>
 80043e2:	e7eb      	b.n	80043bc <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043e4:	2208      	movs	r2, #8
 80043e6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ec:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	e843 2100 	strex	r1, r2, [r3]
 80043f4:	2900      	cmp	r1, #0
 80043f6:	d1f7      	bne.n	80043e8 <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	f103 0208 	add.w	r2, r3, #8
 80043fc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004400:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	f103 0008 	add.w	r0, r3, #8
 8004408:	e840 2100 	strex	r1, r2, [r0]
 800440c:	2900      	cmp	r1, #0
 800440e:	d1f3      	bne.n	80043f8 <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004410:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004412:	2a01      	cmp	r2, #1
 8004414:	d00b      	beq.n	800442e <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004416:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004418:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800441a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800441c:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004420:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004422:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004424:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004428:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 800442c:	e766      	b.n	80042fc <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004432:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	e843 2100 	strex	r1, r2, [r3]
 800443a:	2900      	cmp	r1, #0
 800443c:	d1f7      	bne.n	800442e <UART_CheckIdleState+0x1e2>
 800443e:	e7ea      	b.n	8004416 <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004440:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004444:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	e843 2100 	strex	r1, r2, [r3]
 8004452:	2900      	cmp	r1, #0
 8004454:	d1f7      	bne.n	8004446 <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	f103 0208 	add.w	r2, r3, #8
 800445a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	f103 0008 	add.w	r0, r3, #8
 8004466:	e840 2100 	strex	r1, r2, [r0]
 800446a:	2900      	cmp	r1, #0
 800446c:	d1f3      	bne.n	8004456 <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004470:	2a01      	cmp	r2, #1
 8004472:	d00a      	beq.n	800448a <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004474:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004476:	2120      	movs	r1, #32
 8004478:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 800447c:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447e:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004480:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004484:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8004488:	e738      	b.n	80042fc <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	e843 2100 	strex	r1, r2, [r3]
 8004496:	2900      	cmp	r1, #0
 8004498:	d1f7      	bne.n	800448a <UART_CheckIdleState+0x23e>
 800449a:	e7eb      	b.n	8004474 <UART_CheckIdleState+0x228>

0800449c <HAL_UART_Init>:
  if (huart == NULL)
 800449c:	2800      	cmp	r0, #0
 800449e:	f000 80e7 	beq.w	8004670 <HAL_UART_Init+0x1d4>
{
 80044a2:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80044a4:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80044a6:	4604      	mov	r4, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d070      	beq.n	800458e <HAL_UART_Init+0xf2>
  __HAL_UART_DISABLE(huart);
 80044ac:	6825      	ldr	r5, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 80044b0:	2324      	movs	r3, #36	@ 0x24
 80044b2:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044bc:	2a00      	cmp	r2, #0
 80044be:	d162      	bne.n	8004586 <HAL_UART_Init+0xea>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 80044c4:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c6:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c8:	430b      	orrs	r3, r1
 80044ca:	4313      	orrs	r3, r2
 80044cc:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044ce:	4a86      	ldr	r2, [pc, #536]	@ (80046e8 <HAL_UART_Init+0x24c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044d0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d2:	4002      	ands	r2, r0
 80044d4:	4313      	orrs	r3, r2
 80044d6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d8:	686b      	ldr	r3, [r5, #4]
 80044da:	68e2      	ldr	r2, [r4, #12]
 80044dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044e0:	4313      	orrs	r3, r2
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044e2:	4a82      	ldr	r2, [pc, #520]	@ (80046ec <HAL_UART_Init+0x250>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e4:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044e6:	4295      	cmp	r5, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044e8:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044ea:	68aa      	ldr	r2, [r5, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044ec:	d035      	beq.n	800455a <HAL_UART_Init+0xbe>
    tmpreg |= huart->Init.OneBitSampling;
 80044ee:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044f0:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80044f4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044f6:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f8:	4a7d      	ldr	r2, [pc, #500]	@ (80046f0 <HAL_UART_Init+0x254>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044fa:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044fc:	4295      	cmp	r5, r2
 80044fe:	d118      	bne.n	8004532 <HAL_UART_Init+0x96>
 8004500:	4b7c      	ldr	r3, [pc, #496]	@ (80046f4 <HAL_UART_Init+0x258>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d06d      	beq.n	80045ea <HAL_UART_Init+0x14e>
 800450e:	2b03      	cmp	r3, #3
 8004510:	f000 80a8 	beq.w	8004664 <HAL_UART_Init+0x1c8>
 8004514:	2b01      	cmp	r3, #1
 8004516:	f000 809b 	beq.w	8004650 <HAL_UART_Init+0x1b4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800451a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800451e:	f000 80b9 	beq.w	8004694 <HAL_UART_Init+0x1f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004522:	f7fe fc4b 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004526:	2800      	cmp	r0, #0
 8004528:	d163      	bne.n	80045f2 <HAL_UART_Init+0x156>
  huart->RxISR = NULL;
 800452a:	e9c4 001a 	strd	r0, r0, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	e06f      	b.n	8004612 <HAL_UART_Init+0x176>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004532:	4b71      	ldr	r3, [pc, #452]	@ (80046f8 <HAL_UART_Init+0x25c>)
 8004534:	429d      	cmp	r5, r3
 8004536:	d17d      	bne.n	8004634 <HAL_UART_Init+0x198>
 8004538:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	2b0c      	cmp	r3, #12
 8004546:	d819      	bhi.n	800457c <HAL_UART_Init+0xe0>
 8004548:	e8df f003 	tbb	[pc, r3]
 800454c:	1818189c 	.word	0x1818189c
 8004550:	18181882 	.word	0x18181882
 8004554:	1818184f 	.word	0x1818184f
 8004558:	8c          	.byte	0x8c
 8004559:	00          	.byte	0x00
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800455a:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800455e:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004560:	4964      	ldr	r1, [pc, #400]	@ (80046f4 <HAL_UART_Init+0x258>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004562:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004564:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004568:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800456c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004570:	f000 8086 	beq.w	8004680 <HAL_UART_Init+0x1e4>
 8004574:	d910      	bls.n	8004598 <HAL_UART_Init+0xfc>
 8004576:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800457a:	d017      	beq.n	80045ac <HAL_UART_Init+0x110>
  huart->RxISR = NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8004582:	2001      	movs	r0, #1
 8004584:	bd38      	pop	{r3, r4, r5, pc}
    UART_AdvFeatureConfig(huart);
 8004586:	4620      	mov	r0, r4
 8004588:	f7ff fe08 	bl	800419c <UART_AdvFeatureConfig>
 800458c:	e798      	b.n	80044c0 <HAL_UART_Init+0x24>
    huart->Lock = HAL_UNLOCKED;
 800458e:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8004592:	f7fd fb33 	bl	8001bfc <HAL_UART_MspInit>
 8004596:	e789      	b.n	80044ac <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004598:	2b00      	cmp	r3, #0
 800459a:	d06b      	beq.n	8004674 <HAL_UART_Init+0x1d8>
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a0:	d1ec      	bne.n	800457c <HAL_UART_Init+0xe0>
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fd ffbb 	bl	800251c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d0bf      	beq.n	800452a <HAL_UART_Init+0x8e>
 80045aa:	e001      	b.n	80045b0 <HAL_UART_Init+0x114>
        pclk = (uint32_t) LSE_VALUE;
 80045ac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045b0:	6862      	ldr	r2, [r4, #4]
 80045b2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80045b6:	4283      	cmp	r3, r0
 80045b8:	d8e0      	bhi.n	800457c <HAL_UART_Init+0xe0>
 80045ba:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80045be:	d8dd      	bhi.n	800457c <HAL_UART_Init+0xe0>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045c0:	2500      	movs	r5, #0
 80045c2:	0853      	lsrs	r3, r2, #1
 80045c4:	f44f 7c80 	mov.w	ip, #256	@ 0x100
 80045c8:	4629      	mov	r1, r5
 80045ca:	fbe0 310c 	umlal	r3, r1, r0, ip
 80045ce:	4618      	mov	r0, r3
 80045d0:	462b      	mov	r3, r5
 80045d2:	f7fb fdfb 	bl	80001cc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045d6:	4b49      	ldr	r3, [pc, #292]	@ (80046fc <HAL_UART_Init+0x260>)
 80045d8:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80045dc:	429a      	cmp	r2, r3
 80045de:	d8cd      	bhi.n	800457c <HAL_UART_Init+0xe0>
          huart->Instance->BRR = usartdiv;
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 80045e4:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
  return ret;
 80045e8:	e013      	b.n	8004612 <HAL_UART_Init+0x176>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ea:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80045ee:	d06f      	beq.n	80046d0 <HAL_UART_Init+0x234>
        pclk = (uint32_t) HSI_VALUE;
 80045f0:	4843      	ldr	r0, [pc, #268]	@ (8004700 <HAL_UART_Init+0x264>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045f2:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045f8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80045fc:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004600:	f1a0 0310 	sub.w	r3, r0, #16
 8004604:	4293      	cmp	r3, r2
 8004606:	d8b9      	bhi.n	800457c <HAL_UART_Init+0xe0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004608:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 800460a:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 800460c:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 800460e:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004612:	6853      	ldr	r3, [r2, #4]
 8004614:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004618:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461a:	6893      	ldr	r3, [r2, #8]
 800461c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004620:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004622:	6813      	ldr	r3, [r2, #0]
 8004624:	f043 0301 	orr.w	r3, r3, #1
  return (UART_CheckIdleState(huart));
 8004628:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800462a:	6013      	str	r3, [r2, #0]
}
 800462c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8004630:	f7ff be0c 	b.w	800424c <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004634:	4b33      	ldr	r3, [pc, #204]	@ (8004704 <HAL_UART_Init+0x268>)
 8004636:	429d      	cmp	r5, r3
 8004638:	d1a0      	bne.n	800457c <HAL_UART_Init+0xe0>
 800463a:	4b2e      	ldr	r3, [pc, #184]	@ (80046f4 <HAL_UART_Init+0x258>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004640:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004644:	2b20      	cmp	r3, #32
 8004646:	d0d0      	beq.n	80045ea <HAL_UART_Init+0x14e>
 8004648:	d80a      	bhi.n	8004660 <HAL_UART_Init+0x1c4>
 800464a:	b1db      	cbz	r3, 8004684 <HAL_UART_Init+0x1e8>
 800464c:	2b10      	cmp	r3, #16
 800464e:	d195      	bne.n	800457c <HAL_UART_Init+0xe0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004650:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004654:	d044      	beq.n	80046e0 <HAL_UART_Init+0x244>
        pclk = HAL_RCC_GetSysClockFreq();
 8004656:	f7fd ff61 	bl	800251c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800465a:	2800      	cmp	r0, #0
 800465c:	d1c9      	bne.n	80045f2 <HAL_UART_Init+0x156>
 800465e:	e764      	b.n	800452a <HAL_UART_Init+0x8e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004660:	2b30      	cmp	r3, #48	@ 0x30
 8004662:	d18b      	bne.n	800457c <HAL_UART_Init+0xe0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004664:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004668:	d034      	beq.n	80046d4 <HAL_UART_Init+0x238>
        pclk = (uint32_t) LSE_VALUE;
 800466a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800466e:	e7c0      	b.n	80045f2 <HAL_UART_Init+0x156>
}
 8004670:	2001      	movs	r0, #1
 8004672:	4770      	bx	lr
        pclk = HAL_RCC_GetPCLK1Freq();
 8004674:	f7fe fb90 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004678:	2800      	cmp	r0, #0
 800467a:	f43f af56 	beq.w	800452a <HAL_UART_Init+0x8e>
 800467e:	e797      	b.n	80045b0 <HAL_UART_Init+0x114>
        pclk = (uint32_t) HSI_VALUE;
 8004680:	481f      	ldr	r0, [pc, #124]	@ (8004700 <HAL_UART_Init+0x264>)
 8004682:	e795      	b.n	80045b0 <HAL_UART_Init+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004684:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004688:	d027      	beq.n	80046da <HAL_UART_Init+0x23e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800468a:	f7fe fb85 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800468e:	2800      	cmp	r0, #0
 8004690:	d1af      	bne.n	80045f2 <HAL_UART_Init+0x156>
 8004692:	e74a      	b.n	800452a <HAL_UART_Init+0x8e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe fb92 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004698:	2800      	cmp	r0, #0
 800469a:	f43f af46 	beq.w	800452a <HAL_UART_Init+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800469e:	0043      	lsls	r3, r0, #1
 80046a0:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a2:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046a6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80046aa:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ae:	f1a3 0210 	sub.w	r2, r3, #16
 80046b2:	428a      	cmp	r2, r1
 80046b4:	f63f af62 	bhi.w	800457c <HAL_UART_Init+0xe0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046b8:	f023 010f 	bic.w	r1, r3, #15
 80046bc:	b289      	uxth	r1, r1
        huart->Instance->BRR = brrtemp;
 80046be:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046c0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80046c4:	430b      	orrs	r3, r1
  huart->RxISR = NULL;
 80046c6:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 80046c8:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 80046ca:	e9c4 111a 	strd	r1, r1, [r4, #104]	@ 0x68
  return ret;
 80046ce:	e7a0      	b.n	8004612 <HAL_UART_Init+0x176>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004708 <HAL_UART_Init+0x26c>)
 80046d2:	e7e5      	b.n	80046a0 <HAL_UART_Init+0x204>
 80046d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046d8:	e7e2      	b.n	80046a0 <HAL_UART_Init+0x204>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046da:	f7fe fb5d 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
        break;
 80046de:	e7db      	b.n	8004698 <HAL_UART_Init+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 80046e0:	f7fd ff1c 	bl	800251c <HAL_RCC_GetSysClockFreq>
        break;
 80046e4:	e7d8      	b.n	8004698 <HAL_UART_Init+0x1fc>
 80046e6:	bf00      	nop
 80046e8:	efff69f3 	.word	0xefff69f3
 80046ec:	40008000 	.word	0x40008000
 80046f0:	40013800 	.word	0x40013800
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40004400 	.word	0x40004400
 80046fc:	000ffcff 	.word	0x000ffcff
 8004700:	00f42400 	.word	0x00f42400
 8004704:	40004800 	.word	0x40004800
 8004708:	01e84800 	.word	0x01e84800

0800470c <UART_Start_Receive_DMA>:
{
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4605      	mov	r5, r0
 8004710:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004712:	2022      	movs	r0, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	2200      	movs	r2, #0
 8004716:	f8c5 2084 	str.w	r2, [r5, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800471a:	f8c5 0080 	str.w	r0, [r5, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 800471e:	6f68      	ldr	r0, [r5, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004720:	682c      	ldr	r4, [r5, #0]
  huart->pRxBuffPtr = pData;
 8004722:	6569      	str	r1, [r5, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004724:	f8a5 3058 	strh.w	r3, [r5, #88]	@ 0x58
  if (huart->hdmarx != NULL)
 8004728:	b168      	cbz	r0, 8004746 <UART_Start_Receive_DMA+0x3a>
    huart->hdmarx->XferAbortCallback = NULL;
 800472a:	6382      	str	r2, [r0, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800472c:	460a      	mov	r2, r1
 800472e:	f104 0124 	add.w	r1, r4, #36	@ 0x24
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004732:	4c1a      	ldr	r4, [pc, #104]	@ (800479c <UART_Start_Receive_DMA+0x90>)
 8004734:	62c4      	str	r4, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004736:	4c1a      	ldr	r4, [pc, #104]	@ (80047a0 <UART_Start_Receive_DMA+0x94>)
 8004738:	6304      	str	r4, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800473a:	4c1a      	ldr	r4, [pc, #104]	@ (80047a4 <UART_Start_Receive_DMA+0x98>)
 800473c:	6344      	str	r4, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800473e:	f7fd fc91 	bl	8002064 <HAL_DMA_Start_IT>
 8004742:	bb18      	cbnz	r0, 800478c <UART_Start_Receive_DMA+0x80>
 8004744:	682c      	ldr	r4, [r5, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004746:	692b      	ldr	r3, [r5, #16]
 8004748:	b13b      	cbz	r3, 800475a <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800474e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	e844 3200 	strex	r2, r3, [r4]
 8004756:	2a00      	cmp	r2, #0
 8004758:	d1f7      	bne.n	800474a <UART_Start_Receive_DMA+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	f104 0308 	add.w	r3, r4, #8
 800475e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004762:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	f104 0108 	add.w	r1, r4, #8
 800476a:	e841 3200 	strex	r2, r3, [r1]
 800476e:	2a00      	cmp	r2, #0
 8004770:	d1f3      	bne.n	800475a <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	f104 0308 	add.w	r3, r4, #8
 8004776:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	f104 0208 	add.w	r2, r4, #8
 8004782:	e842 3000 	strex	r0, r3, [r2]
 8004786:	2800      	cmp	r0, #0
 8004788:	d1f3      	bne.n	8004772 <UART_Start_Receive_DMA+0x66>
}
 800478a:	bd38      	pop	{r3, r4, r5, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800478c:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 800478e:	2320      	movs	r3, #32
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004790:	f8c5 2084 	str.w	r2, [r5, #132]	@ 0x84
      return HAL_ERROR;
 8004794:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 8004796:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	08004101 	.word	0x08004101
 80047a0:	080040e1 	.word	0x080040e1
 80047a4:	08003cad 	.word	0x08003cad

080047a8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop

080047ac <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047ac:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047ae:	f8d0 6080 	ldr.w	r6, [r0, #128]	@ 0x80
 80047b2:	2e20      	cmp	r6, #32
 80047b4:	d103      	bne.n	80047be <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b6:	b101      	cbz	r1, 80047ba <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
 80047b8:	b91a      	cbnz	r2, 80047c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
    {
      return HAL_ERROR;
 80047ba:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80047bc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80047be:	2002      	movs	r0, #2
}
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80047c2:	2301      	movs	r3, #1
 80047c4:	6603      	str	r3, [r0, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c6:	2300      	movs	r3, #0
 80047c8:	6643      	str	r3, [r0, #100]	@ 0x64
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80047ca:	4604      	mov	r4, r0
 80047cc:	f7ff ff9e 	bl	800470c <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d1f3      	bne.n	80047bc <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d1ef      	bne.n	80047ba <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	2310      	movs	r3, #16
 80047de:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e4:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	e842 3100 	strex	r1, r3, [r2]
 80047ec:	2900      	cmp	r1, #0
 80047ee:	d1f7      	bne.n	80047e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
}
 80047f0:	bd70      	pop	{r4, r5, r6, pc}
 80047f2:	bf00      	nop

080047f4 <_ZdlPvj>:
 80047f4:	f000 b94c 	b.w	8004a90 <_ZdlPv>

080047f8 <_Znaj>:
 80047f8:	f000 b94c 	b.w	8004a94 <_Znwj>

080047fc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80047fc:	b10a      	cbz	r2, 8004802 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80047fe:	f000 bad9 	b.w	8004db4 <memcpy>
 8004802:	4770      	bx	lr

08004804 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8004804:	f850 3b08 	ldr.w	r3, [r0], #8
 8004808:	1a1b      	subs	r3, r3, r0
 800480a:	4258      	negs	r0, r3
 800480c:	4158      	adcs	r0, r3
 800480e:	4770      	bx	lr

08004810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8004810:	b508      	push	{r3, lr}
 8004812:	680b      	ldr	r3, [r1, #0]
 8004814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004818:	d302      	bcc.n	8004820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800481a:	480d      	ldr	r0, [pc, #52]	@ (8004850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800481c:	f000 f94e 	bl	8004abc <_ZSt20__throw_length_errorPKc>
 8004820:	4293      	cmp	r3, r2
 8004822:	d90b      	bls.n	800483c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8004824:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8004828:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800482c:	d206      	bcs.n	800483c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800482e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004832:	bf2a      	itet	cs
 8004834:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8004838:	6008      	strcc	r0, [r1, #0]
 800483a:	600b      	strcs	r3, [r1, #0]
 800483c:	6808      	ldr	r0, [r1, #0]
 800483e:	3001      	adds	r0, #1
 8004840:	d501      	bpl.n	8004846 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8004842:	f000 f938 	bl	8004ab6 <_ZSt17__throw_bad_allocv>
 8004846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800484a:	f000 b923 	b.w	8004a94 <_Znwj>
 800484e:	bf00      	nop
 8004850:	080050b0 	.word	0x080050b0

08004854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8004854:	b510      	push	{r4, lr}
 8004856:	4604      	mov	r4, r0
 8004858:	f7ff ffd4 	bl	8004804 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800485c:	b920      	cbnz	r0, 8004868 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800485e:	6820      	ldr	r0, [r4, #0]
 8004860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004864:	f000 b914 	b.w	8004a90 <_ZdlPv>
 8004868:	bd10      	pop	{r4, pc}

0800486a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800486a:	6840      	ldr	r0, [r0, #4]
 800486c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8004870:	3901      	subs	r1, #1
 8004872:	1a09      	subs	r1, r1, r0
 8004874:	4291      	cmp	r1, r2
 8004876:	b508      	push	{r3, lr}
 8004878:	d202      	bcs.n	8004880 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f91e 	bl	8004abc <_ZSt20__throw_length_errorPKc>
 8004880:	bd08      	pop	{r3, pc}

08004882 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8004882:	6803      	ldr	r3, [r0, #0]
 8004884:	428b      	cmp	r3, r1
 8004886:	d806      	bhi.n	8004896 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8004888:	6842      	ldr	r2, [r0, #4]
 800488a:	4413      	add	r3, r2
 800488c:	4299      	cmp	r1, r3
 800488e:	bf94      	ite	ls
 8004890:	2000      	movls	r0, #0
 8004892:	2001      	movhi	r0, #1
 8004894:	4770      	bx	lr
 8004896:	2001      	movs	r0, #1
 8004898:	4770      	bx	lr

0800489a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800489a:	2a01      	cmp	r2, #1
 800489c:	b410      	push	{r4}
 800489e:	d104      	bne.n	80048aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80048a0:	780a      	ldrb	r2, [r1, #0]
 80048a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048a6:	7002      	strb	r2, [r0, #0]
 80048a8:	4770      	bx	lr
 80048aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048ae:	f7ff bfa5 	b.w	80047fc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080048b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80048b2:	2a01      	cmp	r2, #1
 80048b4:	b430      	push	{r4, r5}
 80048b6:	d103      	bne.n	80048c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80048b8:	780b      	ldrb	r3, [r1, #0]
 80048ba:	7003      	strb	r3, [r0, #0]
 80048bc:	bc30      	pop	{r4, r5}
 80048be:	4770      	bx	lr
 80048c0:	2a00      	cmp	r2, #0
 80048c2:	d0fb      	beq.n	80048bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80048c4:	bc30      	pop	{r4, r5}
 80048c6:	f000 b9cb 	b.w	8004c60 <memmove>

080048ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80048ca:	b510      	push	{r4, lr}
 80048cc:	4604      	mov	r4, r0
 80048ce:	f7ff ff99 	bl	8004804 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80048d2:	b908      	cbnz	r0, 80048d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 80048d4:	68a0      	ldr	r0, [r4, #8]
 80048d6:	bd10      	pop	{r4, pc}
 80048d8:	200f      	movs	r0, #15
 80048da:	e7fc      	b.n	80048d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

080048dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80048dc:	4288      	cmp	r0, r1
 80048de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048e0:	4604      	mov	r4, r0
 80048e2:	460e      	mov	r6, r1
 80048e4:	d01d      	beq.n	8004922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 80048e6:	684d      	ldr	r5, [r1, #4]
 80048e8:	f7ff ffef 	bl	80048ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80048ec:	42a8      	cmp	r0, r5
 80048ee:	4602      	mov	r2, r0
 80048f0:	d211      	bcs.n	8004916 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 80048f2:	a901      	add	r1, sp, #4
 80048f4:	4620      	mov	r0, r4
 80048f6:	9501      	str	r5, [sp, #4]
 80048f8:	f7ff ff8a 	bl	8004810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80048fc:	4607      	mov	r7, r0
 80048fe:	4620      	mov	r0, r4
 8004900:	f7ff ffa8 	bl	8004854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004904:	9b01      	ldr	r3, [sp, #4]
 8004906:	6027      	str	r7, [r4, #0]
 8004908:	60a3      	str	r3, [r4, #8]
 800490a:	6831      	ldr	r1, [r6, #0]
 800490c:	6820      	ldr	r0, [r4, #0]
 800490e:	462a      	mov	r2, r5
 8004910:	f7ff ffc3 	bl	800489a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004914:	e001      	b.n	800491a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 8004916:	2d00      	cmp	r5, #0
 8004918:	d1f7      	bne.n	800490a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	6065      	str	r5, [r4, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	555a      	strb	r2, [r3, r5]
 8004922:	b003      	add	sp, #12
 8004924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004926 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8004926:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800492a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800492c:	461f      	mov	r7, r3
 800492e:	6843      	ldr	r3, [r0, #4]
 8004930:	eb01 0802 	add.w	r8, r1, r2
 8004934:	1ab2      	subs	r2, r6, r2
 8004936:	441a      	add	r2, r3
 8004938:	4604      	mov	r4, r0
 800493a:	460d      	mov	r5, r1
 800493c:	eba3 0908 	sub.w	r9, r3, r8
 8004940:	9201      	str	r2, [sp, #4]
 8004942:	f7ff ffc2 	bl	80048ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8004946:	a901      	add	r1, sp, #4
 8004948:	4602      	mov	r2, r0
 800494a:	4620      	mov	r0, r4
 800494c:	f7ff ff60 	bl	8004810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004950:	4682      	mov	sl, r0
 8004952:	b11d      	cbz	r5, 800495c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8004954:	6821      	ldr	r1, [r4, #0]
 8004956:	462a      	mov	r2, r5
 8004958:	f7ff ff9f 	bl	800489a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800495c:	b137      	cbz	r7, 800496c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800495e:	b12e      	cbz	r6, 800496c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8004960:	4632      	mov	r2, r6
 8004962:	4639      	mov	r1, r7
 8004964:	eb0a 0005 	add.w	r0, sl, r5
 8004968:	f7ff ff97 	bl	800489a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800496c:	f1b9 0f00 	cmp.w	r9, #0
 8004970:	d007      	beq.n	8004982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8004972:	6821      	ldr	r1, [r4, #0]
 8004974:	4435      	add	r5, r6
 8004976:	464a      	mov	r2, r9
 8004978:	4441      	add	r1, r8
 800497a:	eb0a 0005 	add.w	r0, sl, r5
 800497e:	f7ff ff8c 	bl	800489a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004982:	4620      	mov	r0, r4
 8004984:	f7ff ff66 	bl	8004854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004988:	9b01      	ldr	r3, [sp, #4]
 800498a:	f8c4 a000 	str.w	sl, [r4]
 800498e:	60a3      	str	r3, [r4, #8]
 8004990:	b002      	add	sp, #8
 8004992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	b085      	sub	sp, #20
 800499e:	4680      	mov	r8, r0
 80049a0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80049a2:	4614      	mov	r4, r2
 80049a4:	4689      	mov	r9, r1
 80049a6:	462a      	mov	r2, r5
 80049a8:	4621      	mov	r1, r4
 80049aa:	461f      	mov	r7, r3
 80049ac:	4b37      	ldr	r3, [pc, #220]	@ (8004a8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 80049ae:	f7ff ff5c 	bl	800486a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80049b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80049b6:	9303      	str	r3, [sp, #12]
 80049b8:	eba5 0b04 	sub.w	fp, r5, r4
 80049bc:	4640      	mov	r0, r8
 80049be:	eb03 0a0b 	add.w	sl, r3, fp
 80049c2:	f7ff ff82 	bl	80048ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80049c6:	4550      	cmp	r0, sl
 80049c8:	d354      	bcc.n	8004a74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 80049ca:	f8d8 6000 	ldr.w	r6, [r8]
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	444e      	add	r6, r9
 80049d2:	4639      	mov	r1, r7
 80049d4:	44a1      	add	r9, r4
 80049d6:	4640      	mov	r0, r8
 80049d8:	eba3 0909 	sub.w	r9, r3, r9
 80049dc:	f7ff ff51 	bl	8004882 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80049e0:	b180      	cbz	r0, 8004a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 80049e2:	f1b9 0f00 	cmp.w	r9, #0
 80049e6:	d006      	beq.n	80049f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 80049e8:	42ac      	cmp	r4, r5
 80049ea:	d004      	beq.n	80049f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 80049ec:	464a      	mov	r2, r9
 80049ee:	1931      	adds	r1, r6, r4
 80049f0:	1970      	adds	r0, r6, r5
 80049f2:	f7ff ff5e 	bl	80048b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80049f6:	b315      	cbz	r5, 8004a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80049f8:	462a      	mov	r2, r5
 80049fa:	4639      	mov	r1, r7
 80049fc:	4630      	mov	r0, r6
 80049fe:	f7ff ff4c 	bl	800489a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004a02:	e01c      	b.n	8004a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8004a04:	b135      	cbz	r5, 8004a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8004a06:	42ac      	cmp	r4, r5
 8004a08:	d33c      	bcc.n	8004a84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8004a0a:	462a      	mov	r2, r5
 8004a0c:	4639      	mov	r1, r7
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f7ff ff4f 	bl	80048b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004a14:	f1b9 0f00 	cmp.w	r9, #0
 8004a18:	d011      	beq.n	8004a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8004a1a:	42ac      	cmp	r4, r5
 8004a1c:	d00f      	beq.n	8004a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8004a1e:	464a      	mov	r2, r9
 8004a20:	1931      	adds	r1, r6, r4
 8004a22:	1970      	adds	r0, r6, r5
 8004a24:	f7ff ff45 	bl	80048b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004a28:	42ac      	cmp	r4, r5
 8004a2a:	d208      	bcs.n	8004a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8004a2c:	4434      	add	r4, r6
 8004a2e:	197b      	adds	r3, r7, r5
 8004a30:	429c      	cmp	r4, r3
 8004a32:	d30f      	bcc.n	8004a54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8004a34:	462a      	mov	r2, r5
 8004a36:	4639      	mov	r1, r7
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f7ff ff3a 	bl	80048b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a42:	f8c8 a004 	str.w	sl, [r8, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	4640      	mov	r0, r8
 8004a4a:	f803 200a 	strb.w	r2, [r3, sl]
 8004a4e:	b005      	add	sp, #20
 8004a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a54:	42bc      	cmp	r4, r7
 8004a56:	d803      	bhi.n	8004a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8004a58:	462a      	mov	r2, r5
 8004a5a:	eb07 010b 	add.w	r1, r7, fp
 8004a5e:	e7cd      	b.n	80049fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8004a60:	1be4      	subs	r4, r4, r7
 8004a62:	4622      	mov	r2, r4
 8004a64:	4639      	mov	r1, r7
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff ff23 	bl	80048b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004a6c:	1b2a      	subs	r2, r5, r4
 8004a6e:	1971      	adds	r1, r6, r5
 8004a70:	1930      	adds	r0, r6, r4
 8004a72:	e7c4      	b.n	80049fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8004a74:	9500      	str	r5, [sp, #0]
 8004a76:	463b      	mov	r3, r7
 8004a78:	4622      	mov	r2, r4
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	f7ff ff52 	bl	8004926 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8004a82:	e7dc      	b.n	8004a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8004a84:	f1b9 0f00 	cmp.w	r9, #0
 8004a88:	d0d0      	beq.n	8004a2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8004a8a:	e7c8      	b.n	8004a1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8004a8c:	080050c8 	.word	0x080050c8

08004a90 <_ZdlPv>:
 8004a90:	f000 b830 	b.w	8004af4 <free>

08004a94 <_Znwj>:
 8004a94:	2801      	cmp	r0, #1
 8004a96:	bf38      	it	cc
 8004a98:	2001      	movcc	r0, #1
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f000 f820 	bl	8004ae4 <malloc>
 8004aa4:	b100      	cbz	r0, 8004aa8 <_Znwj+0x14>
 8004aa6:	bd10      	pop	{r4, pc}
 8004aa8:	f000 f80c 	bl	8004ac4 <_ZSt15get_new_handlerv>
 8004aac:	b908      	cbnz	r0, 8004ab2 <_Znwj+0x1e>
 8004aae:	f000 f811 	bl	8004ad4 <abort>
 8004ab2:	4780      	blx	r0
 8004ab4:	e7f3      	b.n	8004a9e <_Znwj+0xa>

08004ab6 <_ZSt17__throw_bad_allocv>:
 8004ab6:	b508      	push	{r3, lr}
 8004ab8:	f000 f80c 	bl	8004ad4 <abort>

08004abc <_ZSt20__throw_length_errorPKc>:
 8004abc:	b508      	push	{r3, lr}
 8004abe:	f000 f809 	bl	8004ad4 <abort>
	...

08004ac4 <_ZSt15get_new_handlerv>:
 8004ac4:	4b02      	ldr	r3, [pc, #8]	@ (8004ad0 <_ZSt15get_new_handlerv+0xc>)
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	f3bf 8f5b 	dmb	ish
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	200015ec 	.word	0x200015ec

08004ad4 <abort>:
 8004ad4:	b508      	push	{r3, lr}
 8004ad6:	2006      	movs	r0, #6
 8004ad8:	f000 f90c 	bl	8004cf4 <raise>
 8004adc:	2001      	movs	r0, #1
 8004ade:	f7fc ffd5 	bl	8001a8c <_exit>
	...

08004ae4 <malloc>:
 8004ae4:	4b02      	ldr	r3, [pc, #8]	@ (8004af0 <malloc+0xc>)
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	f000 b82d 	b.w	8004b48 <_malloc_r>
 8004aee:	bf00      	nop
 8004af0:	20000010 	.word	0x20000010

08004af4 <free>:
 8004af4:	4b02      	ldr	r3, [pc, #8]	@ (8004b00 <free+0xc>)
 8004af6:	4601      	mov	r1, r0
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	f000 b969 	b.w	8004dd0 <_free_r>
 8004afe:	bf00      	nop
 8004b00:	20000010 	.word	0x20000010

08004b04 <sbrk_aligned>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	4e0f      	ldr	r6, [pc, #60]	@ (8004b44 <sbrk_aligned+0x40>)
 8004b08:	460c      	mov	r4, r1
 8004b0a:	6831      	ldr	r1, [r6, #0]
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	b911      	cbnz	r1, 8004b16 <sbrk_aligned+0x12>
 8004b10:	f000 f90c 	bl	8004d2c <_sbrk_r>
 8004b14:	6030      	str	r0, [r6, #0]
 8004b16:	4621      	mov	r1, r4
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f000 f907 	bl	8004d2c <_sbrk_r>
 8004b1e:	1c43      	adds	r3, r0, #1
 8004b20:	d103      	bne.n	8004b2a <sbrk_aligned+0x26>
 8004b22:	f04f 34ff 	mov.w	r4, #4294967295
 8004b26:	4620      	mov	r0, r4
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
 8004b2a:	1cc4      	adds	r4, r0, #3
 8004b2c:	f024 0403 	bic.w	r4, r4, #3
 8004b30:	42a0      	cmp	r0, r4
 8004b32:	d0f8      	beq.n	8004b26 <sbrk_aligned+0x22>
 8004b34:	1a21      	subs	r1, r4, r0
 8004b36:	4628      	mov	r0, r5
 8004b38:	f000 f8f8 	bl	8004d2c <_sbrk_r>
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d1f2      	bne.n	8004b26 <sbrk_aligned+0x22>
 8004b40:	e7ef      	b.n	8004b22 <sbrk_aligned+0x1e>
 8004b42:	bf00      	nop
 8004b44:	200015f0 	.word	0x200015f0

08004b48 <_malloc_r>:
 8004b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b4c:	1ccd      	adds	r5, r1, #3
 8004b4e:	f025 0503 	bic.w	r5, r5, #3
 8004b52:	3508      	adds	r5, #8
 8004b54:	2d0c      	cmp	r5, #12
 8004b56:	bf38      	it	cc
 8004b58:	250c      	movcc	r5, #12
 8004b5a:	2d00      	cmp	r5, #0
 8004b5c:	4606      	mov	r6, r0
 8004b5e:	db01      	blt.n	8004b64 <_malloc_r+0x1c>
 8004b60:	42a9      	cmp	r1, r5
 8004b62:	d904      	bls.n	8004b6e <_malloc_r+0x26>
 8004b64:	230c      	movs	r3, #12
 8004b66:	6033      	str	r3, [r6, #0]
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c44 <_malloc_r+0xfc>
 8004b72:	f000 f869 	bl	8004c48 <__malloc_lock>
 8004b76:	f8d8 3000 	ldr.w	r3, [r8]
 8004b7a:	461c      	mov	r4, r3
 8004b7c:	bb44      	cbnz	r4, 8004bd0 <_malloc_r+0x88>
 8004b7e:	4629      	mov	r1, r5
 8004b80:	4630      	mov	r0, r6
 8004b82:	f7ff ffbf 	bl	8004b04 <sbrk_aligned>
 8004b86:	1c43      	adds	r3, r0, #1
 8004b88:	4604      	mov	r4, r0
 8004b8a:	d158      	bne.n	8004c3e <_malloc_r+0xf6>
 8004b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b90:	4627      	mov	r7, r4
 8004b92:	2f00      	cmp	r7, #0
 8004b94:	d143      	bne.n	8004c1e <_malloc_r+0xd6>
 8004b96:	2c00      	cmp	r4, #0
 8004b98:	d04b      	beq.n	8004c32 <_malloc_r+0xea>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	eb04 0903 	add.w	r9, r4, r3
 8004ba4:	f000 f8c2 	bl	8004d2c <_sbrk_r>
 8004ba8:	4581      	cmp	r9, r0
 8004baa:	d142      	bne.n	8004c32 <_malloc_r+0xea>
 8004bac:	6821      	ldr	r1, [r4, #0]
 8004bae:	1a6d      	subs	r5, r5, r1
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f7ff ffa6 	bl	8004b04 <sbrk_aligned>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d03a      	beq.n	8004c32 <_malloc_r+0xea>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	442b      	add	r3, r5
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	bb62      	cbnz	r2, 8004c24 <_malloc_r+0xdc>
 8004bca:	f8c8 7000 	str.w	r7, [r8]
 8004bce:	e00f      	b.n	8004bf0 <_malloc_r+0xa8>
 8004bd0:	6822      	ldr	r2, [r4, #0]
 8004bd2:	1b52      	subs	r2, r2, r5
 8004bd4:	d420      	bmi.n	8004c18 <_malloc_r+0xd0>
 8004bd6:	2a0b      	cmp	r2, #11
 8004bd8:	d917      	bls.n	8004c0a <_malloc_r+0xc2>
 8004bda:	1961      	adds	r1, r4, r5
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	6025      	str	r5, [r4, #0]
 8004be0:	bf18      	it	ne
 8004be2:	6059      	strne	r1, [r3, #4]
 8004be4:	6863      	ldr	r3, [r4, #4]
 8004be6:	bf08      	it	eq
 8004be8:	f8c8 1000 	streq.w	r1, [r8]
 8004bec:	5162      	str	r2, [r4, r5]
 8004bee:	604b      	str	r3, [r1, #4]
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f000 f82f 	bl	8004c54 <__malloc_unlock>
 8004bf6:	f104 000b 	add.w	r0, r4, #11
 8004bfa:	1d23      	adds	r3, r4, #4
 8004bfc:	f020 0007 	bic.w	r0, r0, #7
 8004c00:	1ac2      	subs	r2, r0, r3
 8004c02:	bf1c      	itt	ne
 8004c04:	1a1b      	subne	r3, r3, r0
 8004c06:	50a3      	strne	r3, [r4, r2]
 8004c08:	e7af      	b.n	8004b6a <_malloc_r+0x22>
 8004c0a:	6862      	ldr	r2, [r4, #4]
 8004c0c:	42a3      	cmp	r3, r4
 8004c0e:	bf0c      	ite	eq
 8004c10:	f8c8 2000 	streq.w	r2, [r8]
 8004c14:	605a      	strne	r2, [r3, #4]
 8004c16:	e7eb      	b.n	8004bf0 <_malloc_r+0xa8>
 8004c18:	4623      	mov	r3, r4
 8004c1a:	6864      	ldr	r4, [r4, #4]
 8004c1c:	e7ae      	b.n	8004b7c <_malloc_r+0x34>
 8004c1e:	463c      	mov	r4, r7
 8004c20:	687f      	ldr	r7, [r7, #4]
 8004c22:	e7b6      	b.n	8004b92 <_malloc_r+0x4a>
 8004c24:	461a      	mov	r2, r3
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	d1fb      	bne.n	8004c24 <_malloc_r+0xdc>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6053      	str	r3, [r2, #4]
 8004c30:	e7de      	b.n	8004bf0 <_malloc_r+0xa8>
 8004c32:	230c      	movs	r3, #12
 8004c34:	6033      	str	r3, [r6, #0]
 8004c36:	4630      	mov	r0, r6
 8004c38:	f000 f80c 	bl	8004c54 <__malloc_unlock>
 8004c3c:	e794      	b.n	8004b68 <_malloc_r+0x20>
 8004c3e:	6005      	str	r5, [r0, #0]
 8004c40:	e7d6      	b.n	8004bf0 <_malloc_r+0xa8>
 8004c42:	bf00      	nop
 8004c44:	200015f4 	.word	0x200015f4

08004c48 <__malloc_lock>:
 8004c48:	4801      	ldr	r0, [pc, #4]	@ (8004c50 <__malloc_lock+0x8>)
 8004c4a:	f000 b8a9 	b.w	8004da0 <__retarget_lock_acquire_recursive>
 8004c4e:	bf00      	nop
 8004c50:	20001734 	.word	0x20001734

08004c54 <__malloc_unlock>:
 8004c54:	4801      	ldr	r0, [pc, #4]	@ (8004c5c <__malloc_unlock+0x8>)
 8004c56:	f000 b8a4 	b.w	8004da2 <__retarget_lock_release_recursive>
 8004c5a:	bf00      	nop
 8004c5c:	20001734 	.word	0x20001734

08004c60 <memmove>:
 8004c60:	4288      	cmp	r0, r1
 8004c62:	b510      	push	{r4, lr}
 8004c64:	eb01 0402 	add.w	r4, r1, r2
 8004c68:	d902      	bls.n	8004c70 <memmove+0x10>
 8004c6a:	4284      	cmp	r4, r0
 8004c6c:	4623      	mov	r3, r4
 8004c6e:	d807      	bhi.n	8004c80 <memmove+0x20>
 8004c70:	1e43      	subs	r3, r0, #1
 8004c72:	42a1      	cmp	r1, r4
 8004c74:	d008      	beq.n	8004c88 <memmove+0x28>
 8004c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c7e:	e7f8      	b.n	8004c72 <memmove+0x12>
 8004c80:	4402      	add	r2, r0
 8004c82:	4601      	mov	r1, r0
 8004c84:	428a      	cmp	r2, r1
 8004c86:	d100      	bne.n	8004c8a <memmove+0x2a>
 8004c88:	bd10      	pop	{r4, pc}
 8004c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c92:	e7f7      	b.n	8004c84 <memmove+0x24>

08004c94 <memset>:
 8004c94:	4402      	add	r2, r0
 8004c96:	4603      	mov	r3, r0
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d100      	bne.n	8004c9e <memset+0xa>
 8004c9c:	4770      	bx	lr
 8004c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ca2:	e7f9      	b.n	8004c98 <memset+0x4>

08004ca4 <_raise_r>:
 8004ca4:	291f      	cmp	r1, #31
 8004ca6:	b538      	push	{r3, r4, r5, lr}
 8004ca8:	4605      	mov	r5, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	d904      	bls.n	8004cb8 <_raise_r+0x14>
 8004cae:	2316      	movs	r3, #22
 8004cb0:	6003      	str	r3, [r0, #0]
 8004cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004cba:	b112      	cbz	r2, 8004cc2 <_raise_r+0x1e>
 8004cbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004cc0:	b94b      	cbnz	r3, 8004cd6 <_raise_r+0x32>
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 f830 	bl	8004d28 <_getpid_r>
 8004cc8:	4622      	mov	r2, r4
 8004cca:	4601      	mov	r1, r0
 8004ccc:	4628      	mov	r0, r5
 8004cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cd2:	f000 b817 	b.w	8004d04 <_kill_r>
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d00a      	beq.n	8004cf0 <_raise_r+0x4c>
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	d103      	bne.n	8004ce6 <_raise_r+0x42>
 8004cde:	2316      	movs	r3, #22
 8004ce0:	6003      	str	r3, [r0, #0]
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	e7e7      	b.n	8004cb6 <_raise_r+0x12>
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004cec:	4620      	mov	r0, r4
 8004cee:	4798      	blx	r3
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	e7e0      	b.n	8004cb6 <_raise_r+0x12>

08004cf4 <raise>:
 8004cf4:	4b02      	ldr	r3, [pc, #8]	@ (8004d00 <raise+0xc>)
 8004cf6:	4601      	mov	r1, r0
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	f7ff bfd3 	b.w	8004ca4 <_raise_r>
 8004cfe:	bf00      	nop
 8004d00:	20000010 	.word	0x20000010

08004d04 <_kill_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d07      	ldr	r5, [pc, #28]	@ (8004d24 <_kill_r+0x20>)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	602b      	str	r3, [r5, #0]
 8004d12:	f7fc feb3 	bl	8001a7c <_kill>
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	d102      	bne.n	8004d20 <_kill_r+0x1c>
 8004d1a:	682b      	ldr	r3, [r5, #0]
 8004d1c:	b103      	cbz	r3, 8004d20 <_kill_r+0x1c>
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	bd38      	pop	{r3, r4, r5, pc}
 8004d22:	bf00      	nop
 8004d24:	20001730 	.word	0x20001730

08004d28 <_getpid_r>:
 8004d28:	f7fc bea6 	b.w	8001a78 <_getpid>

08004d2c <_sbrk_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4d06      	ldr	r5, [pc, #24]	@ (8004d48 <_sbrk_r+0x1c>)
 8004d30:	2300      	movs	r3, #0
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	602b      	str	r3, [r5, #0]
 8004d38:	f7fc feae 	bl	8001a98 <_sbrk>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_sbrk_r+0x1a>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_sbrk_r+0x1a>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	20001730 	.word	0x20001730

08004d4c <__errno>:
 8004d4c:	4b01      	ldr	r3, [pc, #4]	@ (8004d54 <__errno+0x8>)
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000010 	.word	0x20000010

08004d58 <__libc_init_array>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8004d90 <__libc_init_array+0x38>)
 8004d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8004d94 <__libc_init_array+0x3c>)
 8004d5e:	1b64      	subs	r4, r4, r5
 8004d60:	10a4      	asrs	r4, r4, #2
 8004d62:	2600      	movs	r6, #0
 8004d64:	42a6      	cmp	r6, r4
 8004d66:	d109      	bne.n	8004d7c <__libc_init_array+0x24>
 8004d68:	4d0b      	ldr	r5, [pc, #44]	@ (8004d98 <__libc_init_array+0x40>)
 8004d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8004d9c <__libc_init_array+0x44>)
 8004d6c:	f000 f87a 	bl	8004e64 <_init>
 8004d70:	1b64      	subs	r4, r4, r5
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	2600      	movs	r6, #0
 8004d76:	42a6      	cmp	r6, r4
 8004d78:	d105      	bne.n	8004d86 <__libc_init_array+0x2e>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d80:	4798      	blx	r3
 8004d82:	3601      	adds	r6, #1
 8004d84:	e7ee      	b.n	8004d64 <__libc_init_array+0xc>
 8004d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8a:	4798      	blx	r3
 8004d8c:	3601      	adds	r6, #1
 8004d8e:	e7f2      	b.n	8004d76 <__libc_init_array+0x1e>
 8004d90:	080050ec 	.word	0x080050ec
 8004d94:	080050ec 	.word	0x080050ec
 8004d98:	080050ec 	.word	0x080050ec
 8004d9c:	080050f4 	.word	0x080050f4

08004da0 <__retarget_lock_acquire_recursive>:
 8004da0:	4770      	bx	lr

08004da2 <__retarget_lock_release_recursive>:
 8004da2:	4770      	bx	lr

08004da4 <strcpy>:
 8004da4:	4603      	mov	r3, r0
 8004da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004daa:	f803 2b01 	strb.w	r2, [r3], #1
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d1f9      	bne.n	8004da6 <strcpy+0x2>
 8004db2:	4770      	bx	lr

08004db4 <memcpy>:
 8004db4:	440a      	add	r2, r1
 8004db6:	4291      	cmp	r1, r2
 8004db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dbc:	d100      	bne.n	8004dc0 <memcpy+0xc>
 8004dbe:	4770      	bx	lr
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dca:	4291      	cmp	r1, r2
 8004dcc:	d1f9      	bne.n	8004dc2 <memcpy+0xe>
 8004dce:	bd10      	pop	{r4, pc}

08004dd0 <_free_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4605      	mov	r5, r0
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	d041      	beq.n	8004e5c <_free_r+0x8c>
 8004dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ddc:	1f0c      	subs	r4, r1, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bfb8      	it	lt
 8004de2:	18e4      	addlt	r4, r4, r3
 8004de4:	f7ff ff30 	bl	8004c48 <__malloc_lock>
 8004de8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e60 <_free_r+0x90>)
 8004dea:	6813      	ldr	r3, [r2, #0]
 8004dec:	b933      	cbnz	r3, 8004dfc <_free_r+0x2c>
 8004dee:	6063      	str	r3, [r4, #4]
 8004df0:	6014      	str	r4, [r2, #0]
 8004df2:	4628      	mov	r0, r5
 8004df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004df8:	f7ff bf2c 	b.w	8004c54 <__malloc_unlock>
 8004dfc:	42a3      	cmp	r3, r4
 8004dfe:	d908      	bls.n	8004e12 <_free_r+0x42>
 8004e00:	6820      	ldr	r0, [r4, #0]
 8004e02:	1821      	adds	r1, r4, r0
 8004e04:	428b      	cmp	r3, r1
 8004e06:	bf01      	itttt	eq
 8004e08:	6819      	ldreq	r1, [r3, #0]
 8004e0a:	685b      	ldreq	r3, [r3, #4]
 8004e0c:	1809      	addeq	r1, r1, r0
 8004e0e:	6021      	streq	r1, [r4, #0]
 8004e10:	e7ed      	b.n	8004dee <_free_r+0x1e>
 8004e12:	461a      	mov	r2, r3
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	b10b      	cbz	r3, 8004e1c <_free_r+0x4c>
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	d9fa      	bls.n	8004e12 <_free_r+0x42>
 8004e1c:	6811      	ldr	r1, [r2, #0]
 8004e1e:	1850      	adds	r0, r2, r1
 8004e20:	42a0      	cmp	r0, r4
 8004e22:	d10b      	bne.n	8004e3c <_free_r+0x6c>
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	4401      	add	r1, r0
 8004e28:	1850      	adds	r0, r2, r1
 8004e2a:	4283      	cmp	r3, r0
 8004e2c:	6011      	str	r1, [r2, #0]
 8004e2e:	d1e0      	bne.n	8004df2 <_free_r+0x22>
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	6053      	str	r3, [r2, #4]
 8004e36:	4408      	add	r0, r1
 8004e38:	6010      	str	r0, [r2, #0]
 8004e3a:	e7da      	b.n	8004df2 <_free_r+0x22>
 8004e3c:	d902      	bls.n	8004e44 <_free_r+0x74>
 8004e3e:	230c      	movs	r3, #12
 8004e40:	602b      	str	r3, [r5, #0]
 8004e42:	e7d6      	b.n	8004df2 <_free_r+0x22>
 8004e44:	6820      	ldr	r0, [r4, #0]
 8004e46:	1821      	adds	r1, r4, r0
 8004e48:	428b      	cmp	r3, r1
 8004e4a:	bf04      	itt	eq
 8004e4c:	6819      	ldreq	r1, [r3, #0]
 8004e4e:	685b      	ldreq	r3, [r3, #4]
 8004e50:	6063      	str	r3, [r4, #4]
 8004e52:	bf04      	itt	eq
 8004e54:	1809      	addeq	r1, r1, r0
 8004e56:	6021      	streq	r1, [r4, #0]
 8004e58:	6054      	str	r4, [r2, #4]
 8004e5a:	e7ca      	b.n	8004df2 <_free_r+0x22>
 8004e5c:	bd38      	pop	{r3, r4, r5, pc}
 8004e5e:	bf00      	nop
 8004e60:	200015f4 	.word	0x200015f4

08004e64 <_init>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	bf00      	nop
 8004e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6a:	bc08      	pop	{r3}
 8004e6c:	469e      	mov	lr, r3
 8004e6e:	4770      	bx	lr

08004e70 <_fini>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	bf00      	nop
 8004e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e76:	bc08      	pop	{r3}
 8004e78:	469e      	mov	lr, r3
 8004e7a:	4770      	bx	lr
