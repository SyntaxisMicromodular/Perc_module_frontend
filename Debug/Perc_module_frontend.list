
Perc_module_frontend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800774c  0800774c  0000874c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e4  080079e4  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  080079e4  080079e4  000089e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079ec  080079ec  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080079ec  080079ec  000089ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079f4  080079f4  000089f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080079f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001800  20000060  08007a58  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001860  08007a58  00009860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018768  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c9  00000000  00000000  000217f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00024fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fff  00000000  00000000  00026468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb60  00000000  00000000  00027467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0a3  00000000  00000000  00046fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1553  00000000  00000000  0006106a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001125bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b2c  00000000  00000000  00112600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007734 	.word	0x08007734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007734 	.word	0x08007734

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96a 	b.w	8000b68 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	460c      	mov	r4, r1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d14e      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008b8:	4694      	mov	ip, r2
 80008ba:	458c      	cmp	ip, r1
 80008bc:	4686      	mov	lr, r0
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	d962      	bls.n	800098a <__udivmoddi4+0xde>
 80008c4:	b14a      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c6:	f1c2 0320 	rsb	r3, r2, #32
 80008ca:	4091      	lsls	r1, r2
 80008cc:	fa20 f303 	lsr.w	r3, r0, r3
 80008d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d4:	4319      	orrs	r1, r3
 80008d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008de:	fa1f f68c 	uxth.w	r6, ip
 80008e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ea:	fb07 1114 	mls	r1, r7, r4, r1
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb04 f106 	mul.w	r1, r4, r6
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000902:	f080 8112 	bcs.w	8000b2a <__udivmoddi4+0x27e>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 810f 	bls.w	8000b2a <__udivmoddi4+0x27e>
 800090c:	3c02      	subs	r4, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a59      	subs	r1, r3, r1
 8000912:	fa1f f38e 	uxth.w	r3, lr
 8000916:	fbb1 f0f7 	udiv	r0, r1, r7
 800091a:	fb07 1110 	mls	r1, r7, r0, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb00 f606 	mul.w	r6, r0, r6
 8000926:	429e      	cmp	r6, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x94>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000932:	f080 80fc 	bcs.w	8000b2e <__udivmoddi4+0x282>
 8000936:	429e      	cmp	r6, r3
 8000938:	f240 80f9 	bls.w	8000b2e <__udivmoddi4+0x282>
 800093c:	4463      	add	r3, ip
 800093e:	3802      	subs	r0, #2
 8000940:	1b9b      	subs	r3, r3, r6
 8000942:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000946:	2100      	movs	r1, #0
 8000948:	b11d      	cbz	r5, 8000952 <__udivmoddi4+0xa6>
 800094a:	40d3      	lsrs	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	e9c5 3200 	strd	r3, r2, [r5]
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d905      	bls.n	8000966 <__udivmoddi4+0xba>
 800095a:	b10d      	cbz	r5, 8000960 <__udivmoddi4+0xb4>
 800095c:	e9c5 0100 	strd	r0, r1, [r5]
 8000960:	2100      	movs	r1, #0
 8000962:	4608      	mov	r0, r1
 8000964:	e7f5      	b.n	8000952 <__udivmoddi4+0xa6>
 8000966:	fab3 f183 	clz	r1, r3
 800096a:	2900      	cmp	r1, #0
 800096c:	d146      	bne.n	80009fc <__udivmoddi4+0x150>
 800096e:	42a3      	cmp	r3, r4
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xcc>
 8000972:	4290      	cmp	r0, r2
 8000974:	f0c0 80f0 	bcc.w	8000b58 <__udivmoddi4+0x2ac>
 8000978:	1a86      	subs	r6, r0, r2
 800097a:	eb64 0303 	sbc.w	r3, r4, r3
 800097e:	2001      	movs	r0, #1
 8000980:	2d00      	cmp	r5, #0
 8000982:	d0e6      	beq.n	8000952 <__udivmoddi4+0xa6>
 8000984:	e9c5 6300 	strd	r6, r3, [r5]
 8000988:	e7e3      	b.n	8000952 <__udivmoddi4+0xa6>
 800098a:	2a00      	cmp	r2, #0
 800098c:	f040 8090 	bne.w	8000ab0 <__udivmoddi4+0x204>
 8000990:	eba1 040c 	sub.w	r4, r1, ip
 8000994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000998:	fa1f f78c 	uxth.w	r7, ip
 800099c:	2101      	movs	r1, #1
 800099e:	fbb4 f6f8 	udiv	r6, r4, r8
 80009a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009a6:	fb08 4416 	mls	r4, r8, r6, r4
 80009aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ae:	fb07 f006 	mul.w	r0, r7, r6
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x11c>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x11a>
 80009c0:	4298      	cmp	r0, r3
 80009c2:	f200 80cd 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 80009c6:	4626      	mov	r6, r4
 80009c8:	1a1c      	subs	r4, r3, r0
 80009ca:	fa1f f38e 	uxth.w	r3, lr
 80009ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80009d2:	fb08 4410 	mls	r4, r8, r0, r4
 80009d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009da:	fb00 f707 	mul.w	r7, r0, r7
 80009de:	429f      	cmp	r7, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x148>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009ea:	d202      	bcs.n	80009f2 <__udivmoddi4+0x146>
 80009ec:	429f      	cmp	r7, r3
 80009ee:	f200 80b0 	bhi.w	8000b52 <__udivmoddi4+0x2a6>
 80009f2:	4620      	mov	r0, r4
 80009f4:	1bdb      	subs	r3, r3, r7
 80009f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fa:	e7a5      	b.n	8000948 <__udivmoddi4+0x9c>
 80009fc:	f1c1 0620 	rsb	r6, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 f706 	lsr.w	r7, r2, r6
 8000a06:	431f      	orrs	r7, r3
 8000a08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a10:	ea43 030c 	orr.w	r3, r3, ip
 8000a14:	40f4      	lsrs	r4, r6
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	0c38      	lsrs	r0, r7, #16
 8000a1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a20:	fbb4 fef0 	udiv	lr, r4, r0
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fb00 441e 	mls	r4, r0, lr, r4
 8000a2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a30:	fb0e f90c 	mul.w	r9, lr, ip
 8000a34:	45a1      	cmp	r9, r4
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90a      	bls.n	8000a52 <__udivmoddi4+0x1a6>
 8000a3c:	193c      	adds	r4, r7, r4
 8000a3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a42:	f080 8084 	bcs.w	8000b4e <__udivmoddi4+0x2a2>
 8000a46:	45a1      	cmp	r9, r4
 8000a48:	f240 8081 	bls.w	8000b4e <__udivmoddi4+0x2a2>
 8000a4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a50:	443c      	add	r4, r7
 8000a52:	eba4 0409 	sub.w	r4, r4, r9
 8000a56:	fa1f f983 	uxth.w	r9, r3
 8000a5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6a:	45a4      	cmp	ip, r4
 8000a6c:	d907      	bls.n	8000a7e <__udivmoddi4+0x1d2>
 8000a6e:	193c      	adds	r4, r7, r4
 8000a70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a74:	d267      	bcs.n	8000b46 <__udivmoddi4+0x29a>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	d965      	bls.n	8000b46 <__udivmoddi4+0x29a>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	443c      	add	r4, r7
 8000a7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a82:	fba0 9302 	umull	r9, r3, r0, r2
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	46ce      	mov	lr, r9
 8000a8e:	469c      	mov	ip, r3
 8000a90:	d351      	bcc.n	8000b36 <__udivmoddi4+0x28a>
 8000a92:	d04e      	beq.n	8000b32 <__udivmoddi4+0x286>
 8000a94:	b155      	cbz	r5, 8000aac <__udivmoddi4+0x200>
 8000a96:	ebb8 030e 	subs.w	r3, r8, lr
 8000a9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa2:	40cb      	lsrs	r3, r1
 8000aa4:	431e      	orrs	r6, r3
 8000aa6:	40cc      	lsrs	r4, r1
 8000aa8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	e750      	b.n	8000952 <__udivmoddi4+0xa6>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	430c      	orrs	r4, r1
 8000ac4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000acc:	fa1f f78c 	uxth.w	r7, ip
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f107 	mul.w	r1, r0, r7
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x24c>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aee:	d22c      	bcs.n	8000b4a <__udivmoddi4+0x29e>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d92a      	bls.n	8000b4a <__udivmoddi4+0x29e>
 8000af4:	3802      	subs	r0, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b00:	fb08 3311 	mls	r3, r8, r1, r3
 8000b04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b08:	fb01 f307 	mul.w	r3, r1, r7
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x276>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b18:	d213      	bcs.n	8000b42 <__udivmoddi4+0x296>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d911      	bls.n	8000b42 <__udivmoddi4+0x296>
 8000b1e:	3902      	subs	r1, #2
 8000b20:	4464      	add	r4, ip
 8000b22:	1ae4      	subs	r4, r4, r3
 8000b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b28:	e739      	b.n	800099e <__udivmoddi4+0xf2>
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	e6f0      	b.n	8000910 <__udivmoddi4+0x64>
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e706      	b.n	8000940 <__udivmoddi4+0x94>
 8000b32:	45c8      	cmp	r8, r9
 8000b34:	d2ae      	bcs.n	8000a94 <__udivmoddi4+0x1e8>
 8000b36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b3e:	3801      	subs	r0, #1
 8000b40:	e7a8      	b.n	8000a94 <__udivmoddi4+0x1e8>
 8000b42:	4631      	mov	r1, r6
 8000b44:	e7ed      	b.n	8000b22 <__udivmoddi4+0x276>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e799      	b.n	8000a7e <__udivmoddi4+0x1d2>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e7d4      	b.n	8000af8 <__udivmoddi4+0x24c>
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	e77f      	b.n	8000a52 <__udivmoddi4+0x1a6>
 8000b52:	4463      	add	r3, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	e74d      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e70f      	b.n	8000980 <__udivmoddi4+0xd4>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	4463      	add	r3, ip
 8000b64:	e730      	b.n	80009c8 <__udivmoddi4+0x11c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000b74:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <GFX_SetFont+0x1c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000007c 	.word	0x2000007c

08000b8c <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <GFX_SetFontSize+0x16>
		size = size_t;
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <GFX_SetFontSize+0x24>)
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	7013      	strb	r3, [r2, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000000 	.word	0x20000000

08000bb4 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b089      	sub	sp, #36	@ 0x24
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b7e      	cmp	r3, #126	@ 0x7e
 8000bce:	f200 80a3 	bhi.w	8000d18 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ )
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	75fb      	strb	r3, [r7, #23]
 8000bd6:	e096      	b.n	8000d06 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2];
 8000bd8:	4b51      	ldr	r3, [pc, #324]	@ (8000d20 <GFX_DrawChar+0x16c>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	3b20      	subs	r3, #32
 8000be0:	494f      	ldr	r1, [pc, #316]	@ (8000d20 <GFX_DrawChar+0x16c>)
 8000be2:	6809      	ldr	r1, [r1, #0]
 8000be4:	3101      	adds	r1, #1
 8000be6:	7809      	ldrb	r1, [r1, #0]
 8000be8:	fb03 f101 	mul.w	r1, r3, r1
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
 8000bee:	440b      	add	r3, r1
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	757b      	strb	r3, [r7, #21]
 8000bfc:	e078      	b.n	8000cf0 <GFX_DrawChar+0x13c>
        {
            if(line & 1)
 8000bfe:	7dbb      	ldrb	r3, [r7, #22]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d032      	beq.n	8000c6e <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000c08:	4b46      	ldr	r3, [pc, #280]	@ (8000d24 <GFX_DrawChar+0x170>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d113      	bne.n	8000c38 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color);
 8000c10:	7dfb      	ldrb	r3, [r7, #23]
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4413      	add	r3, r2
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b218      	sxth	r0, r3
 8000c1e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	79ba      	ldrb	r2, [r7, #6]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f000 faaf 	bl	8001194 <SSD1306_DrawPixel>
 8000c36:	e052      	b.n	8000cde <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
 8000c38:	7dfb      	ldrb	r3, [r7, #23]
 8000c3a:	4a3a      	ldr	r2, [pc, #232]	@ (8000d24 <GFX_DrawChar+0x170>)
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	fb03 f202 	mul.w	r2, r3, r2
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	18d0      	adds	r0, r2, r3
 8000c46:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000c4a:	4a36      	ldr	r2, [pc, #216]	@ (8000d24 <GFX_DrawChar+0x170>)
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	fb03 f202 	mul.w	r2, r3, r2
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	18d1      	adds	r1, r2, r3
 8000c56:	4b33      	ldr	r3, [pc, #204]	@ (8000d24 <GFX_DrawChar+0x170>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b31      	ldr	r3, [pc, #196]	@ (8000d24 <GFX_DrawChar+0x170>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461c      	mov	r4, r3
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	4623      	mov	r3, r4
 8000c68:	f000 f960 	bl	8000f2c <GFX_DrawFillRectangle>
 8000c6c:	e037      	b.n	8000cde <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8000c6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d133      	bne.n	8000cde <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8000c76:	4b2b      	ldr	r3, [pc, #172]	@ (8000d24 <GFX_DrawChar+0x170>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d114      	bne.n	8000ca8 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background);
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	4413      	add	r3, r2
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	b218      	sxth	r0, r3
 8000c8c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4413      	add	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f000 fa77 	bl	8001194 <SSD1306_DrawPixel>
 8000ca6:	e01a      	b.n	8000cde <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background);
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	4a1e      	ldr	r2, [pc, #120]	@ (8000d24 <GFX_DrawChar+0x170>)
 8000cac:	7812      	ldrb	r2, [r2, #0]
 8000cae:	fb03 f202 	mul.w	r2, r3, r2
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	18d0      	adds	r0, r2, r3
 8000cb6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000cba:	4a1a      	ldr	r2, [pc, #104]	@ (8000d24 <GFX_DrawChar+0x170>)
 8000cbc:	7812      	ldrb	r2, [r2, #0]
 8000cbe:	fb03 f202 	mul.w	r2, r3, r2
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	18d1      	adds	r1, r2, r3
 8000cc6:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <GFX_DrawChar+0x170>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <GFX_DrawChar+0x170>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461c      	mov	r4, r3
 8000cd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4623      	mov	r3, r4
 8000cda:	f000 f927 	bl	8000f2c <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 8000cde:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	757b      	strb	r3, [r7, #21]
 8000cea:	7dbb      	ldrb	r3, [r7, #22]
 8000cec:	085b      	lsrs	r3, r3, #1
 8000cee:	75bb      	strb	r3, [r7, #22]
 8000cf0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <GFX_DrawChar+0x16c>)
 8000cf6:	6812      	ldr	r2, [r2, #0]
 8000cf8:	7812      	ldrb	r2, [r2, #0]
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	f6ff af7f 	blt.w	8000bfe <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ )
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	3301      	adds	r3, #1
 8000d04:	75fb      	strb	r3, [r7, #23]
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <GFX_DrawChar+0x16c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	7dfa      	ldrb	r2, [r7, #23]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f4ff af61 	bcc.w	8000bd8 <GFX_DrawChar+0x24>
 8000d16:	e000      	b.n	8000d1a <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8000d18:	bf00      	nop
            }
        }
    }
}
 8000d1a:	371c      	adds	r7, #28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	2000007c 	.word	0x2000007c
 8000d24:	20000000 	.word	0x20000000

08000d28 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	617b      	str	r3, [r7, #20]
	char znak;
	znak = *str;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8000d40:	e03e      	b.n	8000dc0 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background);
 8000d42:	78f9      	ldrb	r1, [r7, #3]
 8000d44:	7cfa      	ldrb	r2, [r7, #19]
 8000d46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f7ff ff2f 	bl	8000bb4 <GFX_DrawChar>
		x_tmp += ((uint8_t)font[1] * size) + 1;
 8000d56:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <GFX_DrawString+0xb0>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <GFX_DrawString+0xb4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	fb02 f303 	mul.w	r3, r2, r3
 8000d68:	3301      	adds	r3, #1
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]
		if(background == 0)
 8000d70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d120      	bne.n	8000dba <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	74bb      	strb	r3, [r7, #18]
 8000d7c:	e012      	b.n	8000da4 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	b218      	sxth	r0, r3
 8000d88:	7cbb      	ldrb	r3, [r7, #18]
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	2200      	movs	r2, #0
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f000 f9fb 	bl	8001194 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000d9e:	7cbb      	ldrb	r3, [r7, #18]
 8000da0:	3301      	adds	r3, #1
 8000da2:	74bb      	strb	r3, [r7, #18]
 8000da4:	7cba      	ldrb	r2, [r7, #18]
 8000da6:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <GFX_DrawString+0xb0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <GFX_DrawString+0xb4>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	fb01 f303 	mul.w	r3, r1, r3
 8000db6:	429a      	cmp	r2, r3
 8000db8:	dbe1      	blt.n	8000d7e <GFX_DrawString+0x56>
			}
		}
		znak = *str;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1ba      	bne.n	8000d42 <GFX_DrawString+0x1a>
	}
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000007c 	.word	0x2000007c
 8000ddc:	20000000 	.word	0x20000000

08000de0 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	@ 0x30
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000df8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	1acb      	subs	r3, r1, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	bfb8      	it	lt
 8000e06:	425b      	neglt	r3, r3
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	bfcc      	ite	gt
 8000e0c:	2301      	movgt	r3, #1
 8000e0e:	2300      	movle	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	857b      	strh	r3, [r7, #42]	@ 0x2a

	    if (steep) {
 8000e14:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d00b      	beq.n	8000e34 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e26:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	623b      	str	r3, [r7, #32]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dd0b      	ble.n	8000e54 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bfb8      	it	lt
 8000e6c:	425b      	neglt	r3, r3
 8000e6e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000e70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e74:	0fda      	lsrs	r2, r3, #31
 8000e76:	4413      	add	r3, r2
 8000e78:	105b      	asrs	r3, r3, #1
 8000e7a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	da02      	bge.n	8000e8a <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000e88:	e030      	b.n	8000eec <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8000e8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e8e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000e90:	e02c      	b.n	8000eec <GFX_WriteLine+0x10c>
	        if (steep) {
 8000e92:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d009      	beq.n	8000eae <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	b211      	sxth	r1, r2
 8000ea2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f974 	bl	8001194 <SSD1306_DrawPixel>
 8000eac:	e008      	b.n	8000ec0 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	b211      	sxth	r1, r2
 8000eb6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f96a 	bl	8001194 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8000ec0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000ec2:	8abb      	ldrh	r3, [r7, #20]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	        if (err < 0) {
 8000eca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da09      	bge.n	8000ee6 <GFX_WriteLine+0x106>
	            y_start += ystep;
 8000ed2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	4413      	add	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000edc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000ede:	8afb      	ldrh	r3, [r7, #22]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	ddce      	ble.n	8000e92 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3730      	adds	r7, #48	@ 0x30
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af02      	add	r7, sp, #8
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	1e5a      	subs	r2, r3, #1
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f7ff ff5e 	bl	8000de0 <GFX_WriteLine>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	4611      	mov	r1, r2
 8000f38:	461a      	mov	r2, r3
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	80fb      	strh	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e009      	b.n	8000f5c <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8000f48:	88ba      	ldrh	r2, [r7, #4]
 8000f4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f7ff ffd4 	bl	8000efe <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	88fa      	ldrh	r2, [r7, #6]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4413      	add	r3, r2
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dbef      	blt.n	8000f48 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <SSD1306_SetOLED>:
SPI_HandleTypeDef *ssd1306_spi;
#endif

struct OLEDdefinition *currentOLED;

void SSD1306_SetOLED(struct OLEDdefinition *in){
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	currentOLED = in;
 8000f7c:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <SSD1306_SetOLED+0x1c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000084 	.word	0x20000084

08000f94 <SSD1306_Command>:

void SSD1306_Command(uint8_t com)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	// I2C
	HAL_I2C_Mem_Write(ssd1306_i2c, SSD1306_I2C_ADDRESS, 0x00, 1, &com, sizeof(com), 100);
#endif
#ifdef SSD1306_SPI_CONTROL
	//SPI
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa6:	f002 fb97 	bl	80036d8 <HAL_GPIO_WritePin>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <SSD1306_Command+0x5c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <SSD1306_Command+0x5c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f002 fb8b 	bl	80036d8 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <SSD1306_Command+0x60>)
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	1df9      	adds	r1, r7, #7
 8000fc8:	230a      	movs	r3, #10
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f003 fcaf 	bl	800492e <HAL_SPI_Transmit>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000fd0:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <SSD1306_Command+0x5c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SSD1306_Command+0x5c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f002 fb78 	bl	80036d8 <HAL_GPIO_WritePin>
#endif
#endif
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000084 	.word	0x20000084
 8000ff4:	20000080 	.word	0x20000080

08000ff8 <SSD1306_ResetOLEDS>:
	HAL_Delay(5);
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_SET);
}

void SSD1306_ResetOLEDS(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2120      	movs	r1, #32
 8001000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001004:	f002 fb68 	bl	80036d8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001008:	2005      	movs	r0, #5
 800100a:	f001 fe2f 	bl	8002c6c <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2120      	movs	r1, #32
 8001012:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001016:	f002 fb5f 	bl	80036d8 <HAL_GPIO_WritePin>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}

0800101e <SSD1306_RotateDisplay>:
{
	SSD1306_Command(Invert ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
}

void SSD1306_RotateDisplay(uint8_t Rotate)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
	if(Rotate > 1) Rotate = 1;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d901      	bls.n	8001032 <SSD1306_RotateDisplay+0x14>
 800102e:	2301      	movs	r3, #1
 8001030:	71fb      	strb	r3, [r7, #7]

	SSD1306_Command(0xA0 | (0x01 & Rotate));  // Set Segment Re-Map Default
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffa7 	bl	8000f94 <SSD1306_Command>
							// 0xA0 (0x00) => column Address 0 mapped to 127
                			// 0xA1 (0x01) => Column Address 127 mapped to 0

	SSD1306_Command(0xC0 | (0x08 & (Rotate<<3)));  // Set COM Output Scan Direction
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	b25b      	sxtb	r3, r3
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	b25b      	sxtb	r3, r3
 8001052:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001056:	b25b      	sxtb	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff9a 	bl	8000f94 <SSD1306_Command>
							// 0xC0	(0x00) => normal mode (RESET) Scan from COM0 to COM[N-1];Where N is the Multiplex ratio.
							// 0xC8	(0xC8) => remapped mode. Scan from COM[N-1] to COM0;;Where N is the Multiplex ratio.
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <SSD1306_DisplayON>:

void SSD1306_DisplayON(uint8_t On)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	SSD1306_Command(On ? SSD1306_DISPLAYON : SSD1306_DISPLAYOFF);
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SSD1306_DisplayON+0x14>
 8001078:	23af      	movs	r3, #175	@ 0xaf
 800107a:	e000      	b.n	800107e <SSD1306_DisplayON+0x16>
 800107c:	23ae      	movs	r3, #174	@ 0xae
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff88 	bl	8000f94 <SSD1306_Command>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <SSD1306_SetContrast>:

void SSD1306_SetContrast(uint8_t Contrast)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	SSD1306_Command(0x81);	// Set Contrast Control
 8001096:	2081      	movs	r0, #129	@ 0x81
 8001098:	f7ff ff7c 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(Contrast);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff78 	bl	8000f94 <SSD1306_Command>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <SSD1306_StopScroll>:
{
	SSD1306_ScrollingHorVer(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL, StartPage, EndPage, HorizontalSpeed, VerticalOffset);
}

void SSD1306_StopScroll(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80010b0:	202e      	movs	r0, #46	@ 0x2e
 80010b2:	f7ff ff6f 	bl	8000f94 <SSD1306_Command>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}

080010ba <SSD1306_StopFadeOutOrBlinking>:
	SSD1306_Command(SSD1306_FADE_OUT);
	SSD1306_Command(0x30 | (0x0F & Interval));
}

void SSD1306_StopFadeOutOrBlinking(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_FADE_OUT);
 80010be:	2023      	movs	r0, #35	@ 0x23
 80010c0:	f7ff ff68 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x00);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ff65 	bl	8000f94 <SSD1306_Command>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}

080010ce <SSD1306_Init>:

//
// Initialization
//
void SSD1306_Init(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
	SSD1306_Command(0xAE);  // Display Off
 80010d2:	20ae      	movs	r0, #174	@ 0xae
 80010d4:	f7ff ff5e 	bl	8000f94 <SSD1306_Command>

	SSD1306_Command(0x00);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff5b 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x10);
 80010de:	2010      	movs	r0, #16
 80010e0:	f7ff ff58 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x40);
 80010e4:	2040      	movs	r0, #64	@ 0x40
 80010e6:	f7ff ff55 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x20);  // Set addressing mode
 80010ea:	2020      	movs	r0, #32
 80010ec:	f7ff ff52 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x00);  // Horizontal Addressing Mode
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff ff4f 	bl	8000f94 <SSD1306_Command>

	SSD1306_SetContrast(0xFF);
 80010f6:	20ff      	movs	r0, #255	@ 0xff
 80010f8:	f7ff ffc8 	bl	800108c <SSD1306_SetContrast>

	SSD1306_RotateDisplay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff ff8e 	bl	800101e <SSD1306_RotateDisplay>

	SSD1306_Command(0xA6);  // Set Normal Display
 8001102:	20a6      	movs	r0, #166	@ 0xa6
 8001104:	f7ff ff46 	bl	8000f94 <SSD1306_Command>

	SSD1306_Command(0xA8);  // Select Multiplex Ratio
 8001108:	20a8      	movs	r0, #168	@ 0xa8
 800110a:	f7ff ff43 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x3F);  // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800110e:	203f      	movs	r0, #63	@ 0x3f
 8001110:	f7ff ff40 	bl	8000f94 <SSD1306_Command>

	SSD1306_Command(0xD3);  // Setting Display Offset
 8001114:	20d3      	movs	r0, #211	@ 0xd3
 8001116:	f7ff ff3d 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x00);  // 00H Reset
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff ff3a 	bl	8000f94 <SSD1306_Command>

	SSD1306_Command(0xD5);  // SET DISPLAY CLOCK
 8001120:	20d5      	movs	r0, #213	@ 0xd5
 8001122:	f7ff ff37 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x80);  // 105HZ
 8001126:	2080      	movs	r0, #128	@ 0x80
 8001128:	f7ff ff34 	bl	8000f94 <SSD1306_Command>

	SSD1306_Command(0xD9);	// Set Pre-Charge period
 800112c:	20d9      	movs	r0, #217	@ 0xd9
 800112e:	f7ff ff31 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x22);
 8001132:	2022      	movs	r0, #34	@ 0x22
 8001134:	f7ff ff2e 	bl	8000f94 <SSD1306_Command>

	SSD1306_Command(0xDA);  // Set COM Hardware Configuration
 8001138:	20da      	movs	r0, #218	@ 0xda
 800113a:	f7ff ff2b 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x12);  // Alternative COM Pin---See IC Spec page 34
 800113e:	2012      	movs	r0, #18
 8001140:	f7ff ff28 	bl	8000f94 <SSD1306_Command>
							// (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

	SSD1306_Command(0xDB);	// Set Deselect Vcomh level
 8001144:	20db      	movs	r0, #219	@ 0xdb
 8001146:	f7ff ff25 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x40);
 800114a:	2040      	movs	r0, #64	@ 0x40
 800114c:	f7ff ff22 	bl	8000f94 <SSD1306_Command>

	SSD1306_Command(0x8D);  // Set Charge Pump
 8001150:	208d      	movs	r0, #141	@ 0x8d
 8001152:	f7ff ff1f 	bl	8000f94 <SSD1306_Command>
	//SSD1306_Command(0x10);  // Disable Charge Pump
	SSD1306_Command(0x14);  // Endable Charge Pump
 8001156:	2014      	movs	r0, #20
 8001158:	f7ff ff1c 	bl	8000f94 <SSD1306_Command>

	SSD1306_Command(0xA4);  // Entire Display ON
 800115c:	20a4      	movs	r0, #164	@ 0xa4
 800115e:	f7ff ff19 	bl	8000f94 <SSD1306_Command>

#if GRAPHIC_ACCELERATION_COMMANDS == 1
	SSD1306_StopScroll();
 8001162:	f7ff ffa3 	bl	80010ac <SSD1306_StopScroll>
#endif

#if ADVANCED_GRAPHIC_COMMANDS == 1
	SSD1306_StopFadeOutOrBlinking();
 8001166:	f7ff ffa8 	bl	80010ba <SSD1306_StopFadeOutOrBlinking>
#endif

	SSD1306_DisplayON(1);
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff ff7c 	bl	8001068 <SSD1306_DisplayON>
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <SSD1306_SpiInit>:
}
#endif

#ifdef SSD1306_SPI_CONTROL
void SSD1306_SpiInit(SPI_HandleTypeDef *spi)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	ssd1306_spi = spi;
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <SSD1306_SpiInit+0x1c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]

#if defined(SSD1306_RESET_USE)
	//SSD1306_Reset();
#endif
	SSD1306_Init();
 8001182:	f7ff ffa4 	bl	80010ce <SSD1306_Init>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000080 	.word	0x20000080

08001194 <SSD1306_DrawPixel>:

//
// Draw pixel in the buffer
//
void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001194:	b490      	push	{r4, r7}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	460b      	mov	r3, r1
 80011a0:	80bb      	strh	r3, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	70fb      	strb	r3, [r7, #3]
	if (currentOLED->rotation_90)
 80011a6:	4b59      	ldr	r3, [pc, #356]	@ (800130c <SSD1306_DrawPixel+0x178>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d01f      	beq.n	80011f2 <SSD1306_DrawPixel+0x5e>
	{
		if ((x < 0) || (x >= SSD1306_LCDHEIGHT) || (y < 0) || (y >= SSD1306_LCDWIDTH))
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f2c0 80a0 	blt.w	80012fc <SSD1306_DrawPixel+0x168>
 80011bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80011c2:	f300 809b 	bgt.w	80012fc <SSD1306_DrawPixel+0x168>
 80011c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f2c0 8096 	blt.w	80012fc <SSD1306_DrawPixel+0x168>
 80011d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80011d6:	f300 8091 	bgt.w	80012fc <SSD1306_DrawPixel+0x168>
				 return;
		int16_t new_x = 127-y;
 80011da:	88bb      	ldrh	r3, [r7, #4]
 80011dc:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	81fb      	strh	r3, [r7, #14]
		int16_t new_y = x;
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	81bb      	strh	r3, [r7, #12]
		x = new_x;
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	80fb      	strh	r3, [r7, #6]
		y = new_y;
 80011ec:	89bb      	ldrh	r3, [r7, #12]
 80011ee:	80bb      	strh	r3, [r7, #4]
 80011f0:	e010      	b.n	8001214 <SSD1306_DrawPixel+0x80>
	}
	else{
		 if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f2c0 8082 	blt.w	8001300 <SSD1306_DrawPixel+0x16c>
 80011fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001200:	2b7f      	cmp	r3, #127	@ 0x7f
 8001202:	dc7d      	bgt.n	8001300 <SSD1306_DrawPixel+0x16c>
 8001204:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db79      	blt.n	8001300 <SSD1306_DrawPixel+0x16c>
 800120c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001210:	2b3f      	cmp	r3, #63	@ 0x3f
 8001212:	dc75      	bgt.n	8001300 <SSD1306_DrawPixel+0x16c>
			 return;
	}

	 switch(Color)
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d04d      	beq.n	80012b6 <SSD1306_DrawPixel+0x122>
 800121a:	2b02      	cmp	r3, #2
 800121c:	dc71      	bgt.n	8001302 <SSD1306_DrawPixel+0x16e>
 800121e:	2b00      	cmp	r3, #0
 8001220:	d024      	beq.n	800126c <SSD1306_DrawPixel+0xd8>
 8001222:	2b01      	cmp	r3, #1
 8001224:	d16d      	bne.n	8001302 <SSD1306_DrawPixel+0x16e>
	 {
		 case WHITE:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] |=  (1 << (y&7)); break;
 8001226:	4b39      	ldr	r3, [pc, #228]	@ (800130c <SSD1306_DrawPixel+0x178>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800122e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	da00      	bge.n	8001238 <SSD1306_DrawPixel+0xa4>
 8001236:	3307      	adds	r3, #7
 8001238:	10db      	asrs	r3, r3, #3
 800123a:	b218      	sxth	r0, r3
 800123c:	4603      	mov	r3, r0
 800123e:	01db      	lsls	r3, r3, #7
 8001240:	440b      	add	r3, r1
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	b25a      	sxtb	r2, r3
 8001246:	88bb      	ldrh	r3, [r7, #4]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	2101      	movs	r1, #1
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	b25b      	sxtb	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b25c      	sxtb	r4, r3
 8001258:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <SSD1306_DrawPixel+0x178>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001260:	4603      	mov	r3, r0
 8001262:	01db      	lsls	r3, r3, #7
 8001264:	440b      	add	r3, r1
 8001266:	b2e1      	uxtb	r1, r4
 8001268:	54d1      	strb	r1, [r2, r3]
 800126a:	e04a      	b.n	8001302 <SSD1306_DrawPixel+0x16e>
		 case BLACK:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); break;
 800126c:	4b27      	ldr	r3, [pc, #156]	@ (800130c <SSD1306_DrawPixel+0x178>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001274:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	da00      	bge.n	800127e <SSD1306_DrawPixel+0xea>
 800127c:	3307      	adds	r3, #7
 800127e:	10db      	asrs	r3, r3, #3
 8001280:	b218      	sxth	r0, r3
 8001282:	4603      	mov	r3, r0
 8001284:	01db      	lsls	r3, r3, #7
 8001286:	440b      	add	r3, r1
 8001288:	5cd3      	ldrb	r3, [r2, r3]
 800128a:	b25a      	sxtb	r2, r3
 800128c:	88bb      	ldrh	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	2101      	movs	r1, #1
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	b25b      	sxtb	r3, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	b25b      	sxtb	r3, r3
 800129e:	4013      	ands	r3, r2
 80012a0:	b25c      	sxtb	r4, r3
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <SSD1306_DrawPixel+0x178>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012aa:	4603      	mov	r3, r0
 80012ac:	01db      	lsls	r3, r3, #7
 80012ae:	440b      	add	r3, r1
 80012b0:	b2e1      	uxtb	r1, r4
 80012b2:	54d1      	strb	r1, [r2, r3]
 80012b4:	e025      	b.n	8001302 <SSD1306_DrawPixel+0x16e>
		 case INVERSE: currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] ^=  (1 << (y&7)); break;
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <SSD1306_DrawPixel+0x178>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da00      	bge.n	80012c8 <SSD1306_DrawPixel+0x134>
 80012c6:	3307      	adds	r3, #7
 80012c8:	10db      	asrs	r3, r3, #3
 80012ca:	b218      	sxth	r0, r3
 80012cc:	4603      	mov	r3, r0
 80012ce:	01db      	lsls	r3, r3, #7
 80012d0:	440b      	add	r3, r1
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	b25a      	sxtb	r2, r3
 80012d6:	88bb      	ldrh	r3, [r7, #4]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	2101      	movs	r1, #1
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	4053      	eors	r3, r2
 80012e6:	b25c      	sxtb	r4, r3
 80012e8:	4b08      	ldr	r3, [pc, #32]	@ (800130c <SSD1306_DrawPixel+0x178>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012f0:	4603      	mov	r3, r0
 80012f2:	01db      	lsls	r3, r3, #7
 80012f4:	440b      	add	r3, r1
 80012f6:	b2e1      	uxtb	r1, r4
 80012f8:	54d1      	strb	r1, [r2, r3]
 80012fa:	e002      	b.n	8001302 <SSD1306_DrawPixel+0x16e>
				 return;
 80012fc:	bf00      	nop
 80012fe:	e000      	b.n	8001302 <SSD1306_DrawPixel+0x16e>
			 return;
 8001300:	bf00      	nop
	 }
}
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bc90      	pop	{r4, r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000084 	.word	0x20000084

08001310 <SSD1306_Clear>:

//
// Clear the buffer
//
void SSD1306_Clear(uint8_t Color)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	switch (Color)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00a      	beq.n	8001336 <SSD1306_Clear+0x26>
 8001320:	2b01      	cmp	r3, #1
 8001322:	d111      	bne.n	8001348 <SSD1306_Clear+0x38>
	{
		case WHITE:
			memset(currentOLED->buffer, 0xFF, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8001324:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <SSD1306_Clear+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800132c:	21ff      	movs	r1, #255	@ 0xff
 800132e:	4618      	mov	r0, r3
 8001330:	f005 fd78 	bl	8006e24 <memset>
			break;
 8001334:	e008      	b.n	8001348 <SSD1306_Clear+0x38>
		case BLACK:
			memset(currentOLED->buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <SSD1306_Clear+0x40>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f005 fd6f 	bl	8006e24 <memset>
			break;
 8001346:	bf00      	nop
	}
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000084 	.word	0x20000084

08001354 <SSD1306_Display>:

//
// Send buffer to OLDE GCRAM
//
void SSD1306_Display(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	SSD1306_Command(0x22);
 8001358:	2022      	movs	r0, #34	@ 0x22
 800135a:	f7ff fe1b 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x00);
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fe18 	bl	8000f94 <SSD1306_Command>
	SSD1306_Command(0x07);
 8001364:	2007      	movs	r0, #7
 8001366:	f7ff fe15 	bl	8000f94 <SSD1306_Command>
	HAL_I2C_Mem_Write(ssd1306_i2c, SSD1306_I2C_ADDRESS, 0x40, 1, (uint8_t*)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
#endif
#endif
#ifdef SSD1306_SPI_CONTROL
#ifdef SSD1306_SPI_DMA_ENABLE
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	2110      	movs	r1, #16
 800136e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001372:	f002 f9b1 	bl	80036d8 <HAL_GPIO_WritePin>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <SSD1306_Display+0x74>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <SSD1306_Display+0x74>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8001386:	2200      	movs	r2, #0
 8001388:	4619      	mov	r1, r3
 800138a:	f002 f9a5 	bl	80036d8 <HAL_GPIO_WritePin>
#endif
	while (ssd1306_spi->hdmatx->State != HAL_DMA_STATE_READY){};
 800138e:	bf00      	nop
 8001390:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <SSD1306_Display+0x78>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001396:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d1f7      	bne.n	8001390 <SSD1306_Display+0x3c>
	if(ssd1306_spi->hdmatx->State == HAL_DMA_STATE_READY)
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <SSD1306_Display+0x78>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d109      	bne.n	80013c4 <SSD1306_Display+0x70>
	{
		HAL_SPI_Transmit_DMA(ssd1306_spi, (uint8_t*)&currentOLED->buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <SSD1306_Display+0x78>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <SSD1306_Display+0x74>)
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	4611      	mov	r1, r2
 80013ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fc2c 	bl	8004c1c <HAL_SPI_Transmit_DMA>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED.PortCS, currentOLED.PinCS, GPIO_PIN_SET);
#endif
#endif
#endif
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000084 	.word	0x20000084
 80013cc:	20000080 	.word	0x20000080

080013d0 <SSD1306_DmaEndCallback>:
#endif
}

#if defined(SSD1306_SPI_CONTROL) && defined(SSD1306_SPI_DMA_ENABLE) && !defined(SPI_CS_HARDWARE_CONTROL)
void SSD1306_DmaEndCallback(SPI_HandleTypeDef *hspi)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	if(hspi == ssd1306_spi)
 80013d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <SSD1306_DmaEndCallback+0x34>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d10b      	bne.n	80013fa <SSD1306_DmaEndCallback+0x2a>
	{
		HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <SSD1306_DmaEndCallback+0x38>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <SSD1306_DmaEndCallback+0x38>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 80013f2:	2201      	movs	r2, #1
 80013f4:	4619      	mov	r1, r3
 80013f6:	f002 f96f 	bl	80036d8 <HAL_GPIO_WritePin>
	}
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000080 	.word	0x20000080
 8001408:	20000084 	.word	0x20000084

0800140c <_ZN7EncoderC1Ev>:
	DataRising = 2,
	ClkFalling = 4,
	DataFalling = 6
};

class Encoder{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	731a      	strb	r2, [r3, #12]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	735a      	strb	r2, [r3, #13]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	739a      	strb	r2, [r3, #14]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	73da      	strb	r2, [r3, #15]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	741a      	strb	r2, [r3, #16]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	745a      	strb	r2, [r3, #17]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	749a      	strb	r2, [r3, #18]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	74da      	strb	r2, [r3, #19]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	619a      	str	r2, [r3, #24]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	22ff      	movs	r2, #255	@ 0xff
 8001460:	621a      	str	r2, [r3, #32]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	629a      	str	r2, [r3, #40]	@ 0x28
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2220      	movs	r2, #32
 8001472:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <_Z15initializeOLEDsv>:
bool state[16];
char msg[10] = "";
uint8_t currentReadChannel = 0;
bool readState = false;

void initializeOLEDs(){
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	oled[0].PortCS = SSD1306_CS_GPIO_Port;
 8001488:	4b68      	ldr	r3, [pc, #416]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 800148a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800148e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
	oled[0].PinCS = SSD1306_CS_Pin;
 8001492:	4b66      	ldr	r3, [pc, #408]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 8001494:	2240      	movs	r2, #64	@ 0x40
 8001496:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408
	oled[0].rotation_90 = false;
 800149a:	4b64      	ldr	r3, [pc, #400]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400

	oled[1].PortCS = SSD1306_CS2_GPIO_Port;
 80014a2:	4b62      	ldr	r3, [pc, #392]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 80014a4:	4a62      	ldr	r2, [pc, #392]	@ (8001630 <_Z15initializeOLEDsv+0x1ac>)
 80014a6:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
	oled[1].PinCS = SSD1306_CS2_Pin;
 80014aa:	4b60      	ldr	r3, [pc, #384]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	f8a3 2814 	strh.w	r2, [r3, #2068]	@ 0x814
	oled[1].rotation_90 = false;
 80014b2:	4b5e      	ldr	r3, [pc, #376]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 280c 	strb.w	r2, [r3, #2060]	@ 0x80c

	oled[2].PortCS = SSD1306_CS3_GPIO_Port;
 80014ba:	4b5c      	ldr	r3, [pc, #368]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 80014bc:	4a5c      	ldr	r2, [pc, #368]	@ (8001630 <_Z15initializeOLEDsv+0x1ac>)
 80014be:	f8c3 2c1c 	str.w	r2, [r3, #3100]	@ 0xc1c
	oled[2].PinCS = SSD1306_CS3_Pin;
 80014c2:	4b5a      	ldr	r3, [pc, #360]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 80014c4:	2202      	movs	r2, #2
 80014c6:	f8a3 2c20 	strh.w	r2, [r3, #3104]	@ 0xc20
	oled[2].rotation_90 = false;
 80014ca:	4b58      	ldr	r3, [pc, #352]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2c18 	strb.w	r2, [r3, #3096]	@ 0xc18

	oled[3].PortCS = SSD1306_CS4_GPIO_Port;
 80014d2:	4b56      	ldr	r3, [pc, #344]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 80014d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d8:	461a      	mov	r2, r3
 80014da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014de:	6293      	str	r3, [r2, #40]	@ 0x28
	oled[3].PinCS = SSD1306_CS4_Pin;
 80014e0:	4b52      	ldr	r3, [pc, #328]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 80014e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
	oled[3].rotation_90 = false;
 80014ec:	4b4f      	ldr	r3, [pc, #316]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 80014ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	sprintf(caption0, "Test 0");
 80014f8:	494e      	ldr	r1, [pc, #312]	@ (8001634 <_Z15initializeOLEDsv+0x1b0>)
 80014fa:	484f      	ldr	r0, [pc, #316]	@ (8001638 <_Z15initializeOLEDsv+0x1b4>)
 80014fc:	f005 fc72 	bl	8006de4 <siprintf>
	sprintf(caption1, "Test 1");
 8001500:	494e      	ldr	r1, [pc, #312]	@ (800163c <_Z15initializeOLEDsv+0x1b8>)
 8001502:	484f      	ldr	r0, [pc, #316]	@ (8001640 <_Z15initializeOLEDsv+0x1bc>)
 8001504:	f005 fc6e 	bl	8006de4 <siprintf>
	sprintf(caption2, "Test 2");
 8001508:	494e      	ldr	r1, [pc, #312]	@ (8001644 <_Z15initializeOLEDsv+0x1c0>)
 800150a:	484f      	ldr	r0, [pc, #316]	@ (8001648 <_Z15initializeOLEDsv+0x1c4>)
 800150c:	f005 fc6a 	bl	8006de4 <siprintf>
	sprintf(caption3, "Test 3");
 8001510:	494e      	ldr	r1, [pc, #312]	@ (800164c <_Z15initializeOLEDsv+0x1c8>)
 8001512:	484f      	ldr	r0, [pc, #316]	@ (8001650 <_Z15initializeOLEDsv+0x1cc>)
 8001514:	f005 fc66 	bl	8006de4 <siprintf>

	sprintf(value0, "123");
 8001518:	494e      	ldr	r1, [pc, #312]	@ (8001654 <_Z15initializeOLEDsv+0x1d0>)
 800151a:	484f      	ldr	r0, [pc, #316]	@ (8001658 <_Z15initializeOLEDsv+0x1d4>)
 800151c:	f005 fc62 	bl	8006de4 <siprintf>
	sprintf(value1, "456");
 8001520:	494e      	ldr	r1, [pc, #312]	@ (800165c <_Z15initializeOLEDsv+0x1d8>)
 8001522:	484f      	ldr	r0, [pc, #316]	@ (8001660 <_Z15initializeOLEDsv+0x1dc>)
 8001524:	f005 fc5e 	bl	8006de4 <siprintf>
	sprintf(value2, "789");
 8001528:	494e      	ldr	r1, [pc, #312]	@ (8001664 <_Z15initializeOLEDsv+0x1e0>)
 800152a:	484f      	ldr	r0, [pc, #316]	@ (8001668 <_Z15initializeOLEDsv+0x1e4>)
 800152c:	f005 fc5a 	bl	8006de4 <siprintf>
	sprintf(value3, "012");
 8001530:	494e      	ldr	r1, [pc, #312]	@ (800166c <_Z15initializeOLEDsv+0x1e8>)
 8001532:	484f      	ldr	r0, [pc, #316]	@ (8001670 <_Z15initializeOLEDsv+0x1ec>)
 8001534:	f005 fc56 	bl	8006de4 <siprintf>

	GFX_SetFont(font_8x5);
 8001538:	484e      	ldr	r0, [pc, #312]	@ (8001674 <_Z15initializeOLEDsv+0x1f0>)
 800153a:	f7ff fb17 	bl	8000b6c <GFX_SetFont>
	GFX_SetFontSize(1);
 800153e:	2001      	movs	r0, #1
 8001540:	f7ff fb24 	bl	8000b8c <GFX_SetFontSize>

	SSD1306_ResetOLEDS();
 8001544:	f7ff fd58 	bl	8000ff8 <SSD1306_ResetOLEDS>

	SSD1306_SetOLED(&oled[0]);
 8001548:	4838      	ldr	r0, [pc, #224]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 800154a:	f7ff fd13 	bl	8000f74 <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 800154e:	484a      	ldr	r0, [pc, #296]	@ (8001678 <_Z15initializeOLEDsv+0x1f4>)
 8001550:	f7ff fe10 	bl	8001174 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff fd62 	bl	800101e <SSD1306_RotateDisplay>
	SSD1306_Clear(BLACK);
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff fed8 	bl	8001310 <SSD1306_Clear>
	SSD1306_Display();
 8001560:	f7ff fef8 	bl	8001354 <SSD1306_Display>

	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 8001564:	bf00      	nop
 8001566:	4b44      	ldr	r3, [pc, #272]	@ (8001678 <_Z15initializeOLEDsv+0x1f4>)
 8001568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b01      	cmp	r3, #1
 8001572:	bf14      	ite	ne
 8001574:	2301      	movne	r3, #1
 8001576:	2300      	moveq	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f3      	bne.n	8001566 <_Z15initializeOLEDsv+0xe2>

	SSD1306_SetOLED(&oled[1]);
 800157e:	483f      	ldr	r0, [pc, #252]	@ (800167c <_Z15initializeOLEDsv+0x1f8>)
 8001580:	f7ff fcf8 	bl	8000f74 <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 8001584:	483c      	ldr	r0, [pc, #240]	@ (8001678 <_Z15initializeOLEDsv+0x1f4>)
 8001586:	f7ff fdf5 	bl	8001174 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f7ff fd47 	bl	800101e <SSD1306_RotateDisplay>
	SSD1306_Clear(BLACK);
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff febd 	bl	8001310 <SSD1306_Clear>
	SSD1306_Display();
 8001596:	f7ff fedd 	bl	8001354 <SSD1306_Display>

	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 800159a:	bf00      	nop
 800159c:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <_Z15initializeOLEDsv+0x1f4>)
 800159e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f3      	bne.n	800159c <_Z15initializeOLEDsv+0x118>

	SSD1306_SetOLED(&oled[2]);
 80015b4:	4832      	ldr	r0, [pc, #200]	@ (8001680 <_Z15initializeOLEDsv+0x1fc>)
 80015b6:	f7ff fcdd 	bl	8000f74 <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 80015ba:	482f      	ldr	r0, [pc, #188]	@ (8001678 <_Z15initializeOLEDsv+0x1f4>)
 80015bc:	f7ff fdda 	bl	8001174 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff fd2c 	bl	800101e <SSD1306_RotateDisplay>
	SSD1306_Clear(BLACK);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fea2 	bl	8001310 <SSD1306_Clear>
	SSD1306_Display();
 80015cc:	f7ff fec2 	bl	8001354 <SSD1306_Display>

	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 80015d0:	bf00      	nop
 80015d2:	4b29      	ldr	r3, [pc, #164]	@ (8001678 <_Z15initializeOLEDsv+0x1f4>)
 80015d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f3      	bne.n	80015d2 <_Z15initializeOLEDsv+0x14e>

	SSD1306_SetOLED(&oled[3]);
 80015ea:	4826      	ldr	r0, [pc, #152]	@ (8001684 <_Z15initializeOLEDsv+0x200>)
 80015ec:	f7ff fcc2 	bl	8000f74 <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 80015f0:	4821      	ldr	r0, [pc, #132]	@ (8001678 <_Z15initializeOLEDsv+0x1f4>)
 80015f2:	f7ff fdbf 	bl	8001174 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff fd11 	bl	800101e <SSD1306_RotateDisplay>
	SSD1306_Clear(BLACK);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fe87 	bl	8001310 <SSD1306_Clear>
	SSD1306_Display();
 8001602:	f7ff fea7 	bl	8001354 <SSD1306_Display>

	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 8001606:	bf00      	nop
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <_Z15initializeOLEDsv+0x1f4>)
 800160a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800160c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b01      	cmp	r3, #1
 8001614:	bf14      	ite	ne
 8001616:	2301      	movne	r3, #1
 8001618:	2300      	moveq	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f3      	bne.n	8001608 <_Z15initializeOLEDsv+0x184>

	SSD1306_SetOLED(&oled[0]);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <_Z15initializeOLEDsv+0x1a8>)
 8001622:	f7ff fca7 	bl	8000f74 <SSD1306_SetOLED>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000088 	.word	0x20000088
 8001630:	48000400 	.word	0x48000400
 8001634:	0800774c 	.word	0x0800774c
 8001638:	20001178 	.word	0x20001178
 800163c:	08007754 	.word	0x08007754
 8001640:	2000118c 	.word	0x2000118c
 8001644:	0800775c 	.word	0x0800775c
 8001648:	200011a0 	.word	0x200011a0
 800164c:	08007764 	.word	0x08007764
 8001650:	200011b4 	.word	0x200011b4
 8001654:	0800776c 	.word	0x0800776c
 8001658:	200011c8 	.word	0x200011c8
 800165c:	08007770 	.word	0x08007770
 8001660:	200011d0 	.word	0x200011d0
 8001664:	08007774 	.word	0x08007774
 8001668:	200011d8 	.word	0x200011d8
 800166c:	08007778 	.word	0x08007778
 8001670:	200011e0 	.word	0x200011e0
 8001674:	08007788 	.word	0x08007788
 8001678:	200013e8 	.word	0x200013e8
 800167c:	20000494 	.word	0x20000494
 8001680:	200008a0 	.word	0x200008a0
 8001684:	20000cac 	.word	0x20000cac

08001688 <_Z10drawScreenh>:

void drawScreen(uint8_t screenNumber){
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	@ 0x30
 800168c:	af02      	add	r7, sp, #8
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	while (hspi1.hdmatx->State != HAL_DMA_STATE_READY) {}
 8001692:	bf00      	nop
 8001694:	4b42      	ldr	r3, [pc, #264]	@ (80017a0 <_Z10drawScreenh+0x118>)
 8001696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001698:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f3      	bne.n	8001694 <_Z10drawScreenh+0xc>
	if(hspi1.hdmatx->State == HAL_DMA_STATE_READY)
 80016ac:	4b3c      	ldr	r3, [pc, #240]	@ (80017a0 <_Z10drawScreenh+0x118>)
 80016ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	bf0c      	ite	eq
 80016ba:	2301      	moveq	r3, #1
 80016bc:	2300      	movne	r3, #0
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d068      	beq.n	8001796 <_Z10drawScreenh+0x10e>
	{
		char caption[CAPTION_LENGTH];
		char value[VALUE_LENGTH];
		switch (screenNumber){
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d83e      	bhi.n	8001748 <_Z10drawScreenh+0xc0>
 80016ca:	a201      	add	r2, pc, #4	@ (adr r2, 80016d0 <_Z10drawScreenh+0x48>)
 80016cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d0:	080016e1 	.word	0x080016e1
 80016d4:	080016fb 	.word	0x080016fb
 80016d8:	08001715 	.word	0x08001715
 80016dc:	0800172f 	.word	0x0800172f
			case 0:
				strcpy(caption, caption0);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	492f      	ldr	r1, [pc, #188]	@ (80017a4 <_Z10drawScreenh+0x11c>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f005 fbd0 	bl	8006e8c <strcpy>
				strcpy(value, value0);
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	492d      	ldr	r1, [pc, #180]	@ (80017a8 <_Z10drawScreenh+0x120>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f005 fbca 	bl	8006e8c <strcpy>
				break;
 80016f8:	e026      	b.n	8001748 <_Z10drawScreenh+0xc0>
			case 1:
				strcpy(caption, caption1);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	492b      	ldr	r1, [pc, #172]	@ (80017ac <_Z10drawScreenh+0x124>)
 8001700:	4618      	mov	r0, r3
 8001702:	f005 fbc3 	bl	8006e8c <strcpy>
				strcpy(value, value1);
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	4929      	ldr	r1, [pc, #164]	@ (80017b0 <_Z10drawScreenh+0x128>)
 800170c:	4618      	mov	r0, r3
 800170e:	f005 fbbd 	bl	8006e8c <strcpy>
				break;
 8001712:	e019      	b.n	8001748 <_Z10drawScreenh+0xc0>
			case 2:
				strcpy(caption, caption2);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4926      	ldr	r1, [pc, #152]	@ (80017b4 <_Z10drawScreenh+0x12c>)
 800171a:	4618      	mov	r0, r3
 800171c:	f005 fbb6 	bl	8006e8c <strcpy>
				strcpy(value, value2);
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4924      	ldr	r1, [pc, #144]	@ (80017b8 <_Z10drawScreenh+0x130>)
 8001726:	4618      	mov	r0, r3
 8001728:	f005 fbb0 	bl	8006e8c <strcpy>
				break;
 800172c:	e00c      	b.n	8001748 <_Z10drawScreenh+0xc0>
			case 3:
				strcpy(caption, caption3);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4922      	ldr	r1, [pc, #136]	@ (80017bc <_Z10drawScreenh+0x134>)
 8001734:	4618      	mov	r0, r3
 8001736:	f005 fba9 	bl	8006e8c <strcpy>
				strcpy(value, value3);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4920      	ldr	r1, [pc, #128]	@ (80017c0 <_Z10drawScreenh+0x138>)
 8001740:	4618      	mov	r0, r3
 8001742:	f005 fba3 	bl	8006e8c <strcpy>
				break;
 8001746:	bf00      	nop
		}
		SSD1306_SetOLED(&oled[screenNumber]);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f240 420c 	movw	r2, #1036	@ 0x40c
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	4a1c      	ldr	r2, [pc, #112]	@ (80017c4 <_Z10drawScreenh+0x13c>)
 8001754:	4413      	add	r3, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fc0c 	bl	8000f74 <SSD1306_SetOLED>
		SSD1306_Clear(BLACK);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff fdd7 	bl	8001310 <SSD1306_Clear>
		GFX_SetFontSize(2);
 8001762:	2002      	movs	r0, #2
 8001764:	f7ff fa12 	bl	8000b8c <GFX_SetFontSize>
		GFX_DrawString(0,0, caption, WHITE, BLACK);
 8001768:	f107 0214 	add.w	r2, r7, #20
 800176c:	2300      	movs	r3, #0
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2301      	movs	r3, #1
 8001772:	2100      	movs	r1, #0
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fad7 	bl	8000d28 <GFX_DrawString>
		GFX_SetFontSize(3);
 800177a:	2003      	movs	r0, #3
 800177c:	f7ff fa06 	bl	8000b8c <GFX_SetFontSize>
		GFX_DrawString(0, 20, value, WHITE, BLACK);
 8001780:	f107 020c 	add.w	r2, r7, #12
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	2114      	movs	r1, #20
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff facb 	bl	8000d28 <GFX_DrawString>
		SSD1306_Display();
 8001792:	f7ff fddf 	bl	8001354 <SSD1306_Display>
	}
}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	@ 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200013e8 	.word	0x200013e8
 80017a4:	20001178 	.word	0x20001178
 80017a8:	200011c8 	.word	0x200011c8
 80017ac:	2000118c 	.word	0x2000118c
 80017b0:	200011d0 	.word	0x200011d0
 80017b4:	200011a0 	.word	0x200011a0
 80017b8:	200011d8 	.word	0x200011d8
 80017bc:	200011b4 	.word	0x200011b4
 80017c0:	200011e0 	.word	0x200011e0
 80017c4:	20000088 	.word	0x20000088

080017c8 <_Z12writeAddressh>:

void writeAddress(uint8_t channel){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin, (GPIO_PinState)bitRead(channel, 0));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e4:	f001 ff78 	bl	80036d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_B_GPIO_Port, MUX_B_Pin, (GPIO_PinState)bitRead(channel, 1));
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	085b      	lsrs	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fe:	f001 ff6b 	bl	80036d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_C_GPIO_Port, MUX_C_Pin, (GPIO_PinState)bitRead(channel, 2));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	2120      	movs	r1, #32
 8001812:	4809      	ldr	r0, [pc, #36]	@ (8001838 <_Z12writeAddressh+0x70>)
 8001814:	f001 ff60 	bl	80036d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_D_GPIO_Port, MUX_D_Pin, (GPIO_PinState)bitRead(channel, 3));
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	08db      	lsrs	r3, r3, #3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	2140      	movs	r1, #64	@ 0x40
 8001828:	4803      	ldr	r0, [pc, #12]	@ (8001838 <_Z12writeAddressh+0x70>)
 800182a:	f001 ff55 	bl	80036d8 <HAL_GPIO_WritePin>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	48000400 	.word	0x48000400

0800183c <_Z15sendEncoderDatah16EncoderDirectionh>:

void sendEncoderData(uint8_t encoderNumber, EncoderDirection dir, uint8_t velocity){
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af02      	add	r7, sp, #8
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	71bb      	strb	r3, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	717b      	strb	r3, [r7, #5]
	char tmp[10] = "";
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	809a      	strh	r2, [r3, #4]
	char sign = '+';
 800185c:	232b      	movs	r3, #43	@ 0x2b
 800185e:	75fb      	strb	r3, [r7, #23]
	if (dir == Decrement) sign = '-';
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <_Z15sendEncoderDatah16EncoderDirectionh+0x2e>
 8001866:	232d      	movs	r3, #45	@ 0x2d
 8001868:	75fb      	strb	r3, [r7, #23]
	sprintf(tmp, "E%d%c%d\r\n", encoderNumber, sign, velocity);
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	7df9      	ldrb	r1, [r7, #23]
 800186e:	797b      	ldrb	r3, [r7, #5]
 8001870:	f107 000c 	add.w	r0, r7, #12
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	460b      	mov	r3, r1
 8001878:	490a      	ldr	r1, [pc, #40]	@ (80018a4 <_Z15sendEncoderDatah16EncoderDirectionh+0x68>)
 800187a:	f005 fab3 	bl	8006de4 <siprintf>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)tmp, sizeof(tmp));
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	220a      	movs	r2, #10
 8001884:	4619      	mov	r1, r3
 8001886:	4808      	ldr	r0, [pc, #32]	@ (80018a8 <_Z15sendEncoderDatah16EncoderDirectionh+0x6c>)
 8001888:	f003 ffce 	bl	8005828 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)tmp, sizeof(tmp));
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	220a      	movs	r2, #10
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	@ (80018ac <_Z15sendEncoderDatah16EncoderDirectionh+0x70>)
 8001896:	f003 ffc7 	bl	8005828 <HAL_UART_Transmit_DMA>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	0800777c 	.word	0x0800777c
 80018a8:	200014e4 	.word	0x200014e4
 80018ac:	2000156c 	.word	0x2000156c

080018b0 <_Z12enc0Callback16EncoderDirectionh>:

void enc0Callback(EncoderDirection dir, uint8_t velocity){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	460a      	mov	r2, r1
 80018ba:	71fb      	strb	r3, [r7, #7]
 80018bc:	4613      	mov	r3, r2
 80018be:	71bb      	strb	r3, [r7, #6]
	sendEncoderData(0, dir, velocity);
 80018c0:	79ba      	ldrb	r2, [r7, #6]
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4619      	mov	r1, r3
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff ffb8 	bl	800183c <_Z15sendEncoderDatah16EncoderDirectionh>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_Z12enc1Callback16EncoderDirectionh>:

void enc1Callback(EncoderDirection dir, uint8_t velocity){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
	sendEncoderData(1, dir, velocity);
 80018e4:	79ba      	ldrb	r2, [r7, #6]
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	4619      	mov	r1, r3
 80018ea:	2001      	movs	r0, #1
 80018ec:	f7ff ffa6 	bl	800183c <_Z15sendEncoderDatah16EncoderDirectionh>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_Z12enc2Callback16EncoderDirectionh>:

void enc2Callback(EncoderDirection dir, uint8_t velocity){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	4613      	mov	r3, r2
 8001906:	71bb      	strb	r3, [r7, #6]
	sendEncoderData(2, dir, velocity);
 8001908:	79ba      	ldrb	r2, [r7, #6]
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4619      	mov	r1, r3
 800190e:	2002      	movs	r0, #2
 8001910:	f7ff ff94 	bl	800183c <_Z15sendEncoderDatah16EncoderDirectionh>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_Z12enc3Callback16EncoderDirectionh>:

void enc3Callback(EncoderDirection dir, uint8_t velocity){
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	460a      	mov	r2, r1
 8001926:	71fb      	strb	r3, [r7, #7]
 8001928:	4613      	mov	r3, r2
 800192a:	71bb      	strb	r3, [r7, #6]
	sendEncoderData(3, dir, velocity);
 800192c:	79ba      	ldrb	r2, [r7, #6]
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	4619      	mov	r1, r3
 8001932:	2003      	movs	r0, #3
 8001934:	f7ff ff82 	bl	800183c <_Z15sendEncoderDatah16EncoderDirectionh>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_Z18initializeEncodersv>:

void initializeEncoders(){
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
	enc[0].setConstrains(0, 1023);
 8001946:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800194a:	2100      	movs	r1, #0
 800194c:	483c      	ldr	r0, [pc, #240]	@ (8001a40 <_Z18initializeEncodersv+0x100>)
 800194e:	f000 fa8d 	bl	8001e6c <_ZN7Encoder13setConstrainsEll>
	enc[1].setConstrains(0, 1023);
 8001952:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001956:	2100      	movs	r1, #0
 8001958:	483a      	ldr	r0, [pc, #232]	@ (8001a44 <_Z18initializeEncodersv+0x104>)
 800195a:	f000 fa87 	bl	8001e6c <_ZN7Encoder13setConstrainsEll>
	enc[2].setConstrains(0, 1023);
 800195e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001962:	2100      	movs	r1, #0
 8001964:	4838      	ldr	r0, [pc, #224]	@ (8001a48 <_Z18initializeEncodersv+0x108>)
 8001966:	f000 fa81 	bl	8001e6c <_ZN7Encoder13setConstrainsEll>
	enc[3].setConstrains(0, 1023);
 800196a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800196e:	2100      	movs	r1, #0
 8001970:	4836      	ldr	r0, [pc, #216]	@ (8001a4c <_Z18initializeEncodersv+0x10c>)
 8001972:	f000 fa7b 	bl	8001e6c <_ZN7Encoder13setConstrainsEll>
	for (uint8_t i = 0; i < 4; i++){	//first scan to avoid "ghost rotations" before setting initial values
 8001976:	2300      	movs	r3, #0
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	e029      	b.n	80019d0 <_Z18initializeEncodersv+0x90>
		writeAddress(i);
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff22 	bl	80017c8 <_Z12writeAddressh>
		HAL_Delay(1);
 8001984:	2001      	movs	r0, #1
 8001986:	f001 f971 	bl	8002c6c <HAL_Delay>
		enc[i].refresh(HAL_GPIO_ReadPin(MUX_Common2_GPIO_Port, MUX_Common2_Pin) == GPIO_PIN_SET, HAL_GPIO_ReadPin(MUX_Common_GPIO_Port, MUX_Common_Pin) == GPIO_PIN_SET);
 800198a:	79fa      	ldrb	r2, [r7, #7]
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4a2a      	ldr	r2, [pc, #168]	@ (8001a40 <_Z18initializeEncodersv+0x100>)
 8001996:	189c      	adds	r4, r3, r2
 8001998:	2110      	movs	r1, #16
 800199a:	482d      	ldr	r0, [pc, #180]	@ (8001a50 <_Z18initializeEncodersv+0x110>)
 800199c:	f001 fe84 	bl	80036a8 <HAL_GPIO_ReadPin>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	bf0c      	ite	eq
 80019a6:	2301      	moveq	r3, #1
 80019a8:	2300      	movne	r3, #0
 80019aa:	b2dd      	uxtb	r5, r3
 80019ac:	2180      	movs	r1, #128	@ 0x80
 80019ae:	4828      	ldr	r0, [pc, #160]	@ (8001a50 <_Z18initializeEncodersv+0x110>)
 80019b0:	f001 fe7a 	bl	80036a8 <HAL_GPIO_ReadPin>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	bf0c      	ite	eq
 80019ba:	2301      	moveq	r3, #1
 80019bc:	2300      	movne	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	4629      	mov	r1, r5
 80019c4:	4620      	mov	r0, r4
 80019c6:	f000 facd 	bl	8001f64 <_ZN7Encoder7refreshEbb>
	for (uint8_t i = 0; i < 4; i++){	//first scan to avoid "ghost rotations" before setting initial values
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	3301      	adds	r3, #1
 80019ce:	71fb      	strb	r3, [r7, #7]
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d9d2      	bls.n	800197c <_Z18initializeEncodersv+0x3c>
	}

	enc[0].setCallback(enc0Callback);
 80019d6:	491f      	ldr	r1, [pc, #124]	@ (8001a54 <_Z18initializeEncodersv+0x114>)
 80019d8:	4819      	ldr	r0, [pc, #100]	@ (8001a40 <_Z18initializeEncodersv+0x100>)
 80019da:	f000 fb9a 	bl	8002112 <_ZN7Encoder11setCallbackEPFv16EncoderDirectionhE>
	enc[1].setCallback(enc1Callback);
 80019de:	491e      	ldr	r1, [pc, #120]	@ (8001a58 <_Z18initializeEncodersv+0x118>)
 80019e0:	4818      	ldr	r0, [pc, #96]	@ (8001a44 <_Z18initializeEncodersv+0x104>)
 80019e2:	f000 fb96 	bl	8002112 <_ZN7Encoder11setCallbackEPFv16EncoderDirectionhE>
	enc[2].setCallback(enc2Callback);
 80019e6:	491d      	ldr	r1, [pc, #116]	@ (8001a5c <_Z18initializeEncodersv+0x11c>)
 80019e8:	4817      	ldr	r0, [pc, #92]	@ (8001a48 <_Z18initializeEncodersv+0x108>)
 80019ea:	f000 fb92 	bl	8002112 <_ZN7Encoder11setCallbackEPFv16EncoderDirectionhE>
	enc[3].setCallback(enc3Callback);
 80019ee:	491c      	ldr	r1, [pc, #112]	@ (8001a60 <_Z18initializeEncodersv+0x120>)
 80019f0:	4816      	ldr	r0, [pc, #88]	@ (8001a4c <_Z18initializeEncodersv+0x10c>)
 80019f2:	f000 fb8e 	bl	8002112 <_ZN7Encoder11setCallbackEPFv16EncoderDirectionhE>
	enc[0].setCounter(1);
 80019f6:	2101      	movs	r1, #1
 80019f8:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <_Z18initializeEncodersv+0x100>)
 80019fa:	f000 fb69 	bl	80020d0 <_ZN7Encoder10setCounterEl>
	enc[1].setCounter(12);
 80019fe:	210c      	movs	r1, #12
 8001a00:	4810      	ldr	r0, [pc, #64]	@ (8001a44 <_Z18initializeEncodersv+0x104>)
 8001a02:	f000 fb65 	bl	80020d0 <_ZN7Encoder10setCounterEl>
	enc[2].setCounter(123);
 8001a06:	217b      	movs	r1, #123	@ 0x7b
 8001a08:	480f      	ldr	r0, [pc, #60]	@ (8001a48 <_Z18initializeEncodersv+0x108>)
 8001a0a:	f000 fb61 	bl	80020d0 <_ZN7Encoder10setCounterEl>
	enc[3].setCounter(256);
 8001a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a12:	480e      	ldr	r0, [pc, #56]	@ (8001a4c <_Z18initializeEncodersv+0x10c>)
 8001a14:	f000 fb5c 	bl	80020d0 <_ZN7Encoder10setCounterEl>
	enc[0].setMaximumVelocityIncrement(64);
 8001a18:	2140      	movs	r1, #64	@ 0x40
 8001a1a:	4809      	ldr	r0, [pc, #36]	@ (8001a40 <_Z18initializeEncodersv+0x100>)
 8001a1c:	f000 fa16 	bl	8001e4c <_ZN7Encoder27setMaximumVelocityIncrementEh>
	enc[1].setMaximumVelocityIncrement(32);
 8001a20:	2120      	movs	r1, #32
 8001a22:	4808      	ldr	r0, [pc, #32]	@ (8001a44 <_Z18initializeEncodersv+0x104>)
 8001a24:	f000 fa12 	bl	8001e4c <_ZN7Encoder27setMaximumVelocityIncrementEh>
	enc[2].setMaximumVelocityIncrement(16);
 8001a28:	2110      	movs	r1, #16
 8001a2a:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <_Z18initializeEncodersv+0x108>)
 8001a2c:	f000 fa0e 	bl	8001e4c <_ZN7Encoder27setMaximumVelocityIncrementEh>
	enc[3].setMaximumVelocityIncrement(8);
 8001a30:	2108      	movs	r1, #8
 8001a32:	4806      	ldr	r0, [pc, #24]	@ (8001a4c <_Z18initializeEncodersv+0x10c>)
 8001a34:	f000 fa0a 	bl	8001e4c <_ZN7Encoder27setMaximumVelocityIncrementEh>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a40:	200010b8 	.word	0x200010b8
 8001a44:	200010e8 	.word	0x200010e8
 8001a48:	20001118 	.word	0x20001118
 8001a4c:	20001148 	.word	0x20001148
 8001a50:	48000400 	.word	0x48000400
 8001a54:	080018b1 	.word	0x080018b1
 8001a58:	080018d5 	.word	0x080018d5
 8001a5c:	080018f9 	.word	0x080018f9
 8001a60:	0800191d 	.word	0x0800191d

08001a64 <setup>:

void setup(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
	initializeEncoders();
 8001a6a:	f7ff ff69 	bl	8001940 <_Z18initializeEncodersv>
	initializeOLEDs();
 8001a6e:	f7ff fd09 	bl	8001484 <_Z15initializeOLEDsv>
	for (uint8_t i = 0; i < 4; i++){
 8001a72:	2300      	movs	r3, #0
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	e013      	b.n	8001aa0 <setup+0x3c>
		while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 8001a78:	bf00      	nop
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab0 <setup+0x4c>)
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	bf14      	ite	ne
 8001a88:	2301      	movne	r3, #1
 8001a8a:	2300      	moveq	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f3      	bne.n	8001a7a <setup+0x16>
		drawScreen(i);
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fdf7 	bl	8001688 <_Z10drawScreenh>
	for (uint8_t i = 0; i < 4; i++){
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	71fb      	strb	r3, [r7, #7]
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d9e8      	bls.n	8001a78 <setup+0x14>
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200013e8 	.word	0x200013e8

08001ab4 <Timer6Interrupt>:

void Timer6Interrupt(){
 8001ab4:	b5b0      	push	{r4, r5, r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	if (!readState){
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <Timer6Interrupt+0xac>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	f083 0301 	eor.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <Timer6Interrupt+0x22>
		writeAddress(currentReadChannel);
 8001ac6:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <Timer6Interrupt+0xb0>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fe7c 	bl	80017c8 <_Z12writeAddressh>
		readState = true;
 8001ad0:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <Timer6Interrupt+0xac>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
	}
	if(readState){
 8001ad6:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <Timer6Interrupt+0xac>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d03d      	beq.n	8001b5a <Timer6Interrupt+0xa6>
		enc[currentReadChannel].refresh(HAL_GPIO_ReadPin(MUX_Common2_GPIO_Port, MUX_Common2_Pin) == GPIO_PIN_SET, HAL_GPIO_ReadPin(MUX_Common_GPIO_Port, MUX_Common_Pin) == GPIO_PIN_SET);
 8001ade:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <Timer6Interrupt+0xb0>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <Timer6Interrupt+0xb4>)
 8001aee:	189c      	adds	r4, r3, r2
 8001af0:	2110      	movs	r1, #16
 8001af2:	481e      	ldr	r0, [pc, #120]	@ (8001b6c <Timer6Interrupt+0xb8>)
 8001af4:	f001 fdd8 	bl	80036a8 <HAL_GPIO_ReadPin>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2dd      	uxtb	r5, r3
 8001b04:	2180      	movs	r1, #128	@ 0x80
 8001b06:	4819      	ldr	r0, [pc, #100]	@ (8001b6c <Timer6Interrupt+0xb8>)
 8001b08:	f001 fdce 	bl	80036a8 <HAL_GPIO_ReadPin>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	bf0c      	ite	eq
 8001b12:	2301      	moveq	r3, #1
 8001b14:	2300      	movne	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f000 fa21 	bl	8001f64 <_ZN7Encoder7refreshEbb>
		enc[currentReadChannel].execute();
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <Timer6Interrupt+0xb0>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <Timer6Interrupt+0xb4>)
 8001b32:	4413      	add	r3, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fa29 	bl	8001f8c <_ZN7Encoder7executeEv>
		++currentReadChannel;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <Timer6Interrupt+0xb0>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <Timer6Interrupt+0xb0>)
 8001b44:	701a      	strb	r2, [r3, #0]
		if (currentReadChannel == 4){
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <Timer6Interrupt+0xb0>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d102      	bne.n	8001b54 <Timer6Interrupt+0xa0>
			currentReadChannel = 0;
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <Timer6Interrupt+0xb0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
		}
		readState = false;
 8001b54:	4b02      	ldr	r3, [pc, #8]	@ (8001b60 <Timer6Interrupt+0xac>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
	}
}
 8001b5a:	bf00      	nop
 8001b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200011e6 	.word	0x200011e6
 8001b64:	200011e5 	.word	0x200011e5
 8001b68:	200010b8 	.word	0x200010b8
 8001b6c:	48000400 	.word	0x48000400

08001b70 <UART_received>:

void UART_received(char* buf, uint16_t size){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08e      	sub	sp, #56	@ 0x38
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
	uint8_t selectedDisplay = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	bool valuenotcaption = (buf[0] == 'V');
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b56      	cmp	r3, #86	@ 0x56
 8001b88:	bf0c      	ite	eq
 8001b8a:	2301      	moveq	r3, #1
 8001b8c:	2300      	movne	r3, #0
 8001b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	if(buf[1] == '0') selectedDisplay = 0;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3301      	adds	r3, #1
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b30      	cmp	r3, #48	@ 0x30
 8001b9a:	d102      	bne.n	8001ba2 <UART_received+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(buf[1] == '1') selectedDisplay = 1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b31      	cmp	r3, #49	@ 0x31
 8001baa:	d102      	bne.n	8001bb2 <UART_received+0x42>
 8001bac:	2301      	movs	r3, #1
 8001bae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(buf[1] == '2') selectedDisplay = 2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b32      	cmp	r3, #50	@ 0x32
 8001bba:	d102      	bne.n	8001bc2 <UART_received+0x52>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(buf[1] == '3') selectedDisplay = 3;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b33      	cmp	r3, #51	@ 0x33
 8001bca:	d102      	bne.n	8001bd2 <UART_received+0x62>
 8001bcc:	2303      	movs	r3, #3
 8001bce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (valuenotcaption){
 8001bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d052      	beq.n	8001c80 <UART_received+0x110>
		char value[VALUE_LENGTH];
		for (int i = 0; i < VALUE_LENGTH; i++) value[i] = ' ';
 8001bda:	2300      	movs	r3, #0
 8001bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bde:	e008      	b.n	8001bf2 <UART_received+0x82>
 8001be0:	f107 021c 	add.w	r2, r7, #28
 8001be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001be6:	4413      	add	r3, r2
 8001be8:	2220      	movs	r2, #32
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bee:	3301      	adds	r3, #1
 8001bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	ddf3      	ble.n	8001be0 <UART_received+0x70>
		for (int i = 0; i < size + 1 && i < VALUE_LENGTH ; i++) value[i] = buf[i+2];
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bfc:	e00d      	b.n	8001c1a <UART_received+0xaa>
 8001bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c00:	3302      	adds	r3, #2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	7819      	ldrb	r1, [r3, #0]
 8001c08:	f107 021c 	add.w	r2, r7, #28
 8001c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0e:	4413      	add	r3, r2
 8001c10:	460a      	mov	r2, r1
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c16:	3301      	adds	r3, #1
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dc02      	bgt.n	8001c28 <UART_received+0xb8>
 8001c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	ddea      	ble.n	8001bfe <UART_received+0x8e>
		switch (selectedDisplay){
 8001c28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d827      	bhi.n	8001c80 <UART_received+0x110>
 8001c30:	a201      	add	r2, pc, #4	@ (adr r2, 8001c38 <UART_received+0xc8>)
 8001c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c36:	bf00      	nop
 8001c38:	08001c49 	.word	0x08001c49
 8001c3c:	08001c57 	.word	0x08001c57
 8001c40:	08001c65 	.word	0x08001c65
 8001c44:	08001c73 	.word	0x08001c73
			case 0: strcpy(value0, value); break;
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	483b      	ldr	r0, [pc, #236]	@ (8001d3c <UART_received+0x1cc>)
 8001c50:	f005 f91c 	bl	8006e8c <strcpy>
 8001c54:	e014      	b.n	8001c80 <UART_received+0x110>
			case 1: strcpy(value1, value); break;
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4838      	ldr	r0, [pc, #224]	@ (8001d40 <UART_received+0x1d0>)
 8001c5e:	f005 f915 	bl	8006e8c <strcpy>
 8001c62:	e00d      	b.n	8001c80 <UART_received+0x110>
			case 2: strcpy(value2, value); break;
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4836      	ldr	r0, [pc, #216]	@ (8001d44 <UART_received+0x1d4>)
 8001c6c:	f005 f90e 	bl	8006e8c <strcpy>
 8001c70:	e006      	b.n	8001c80 <UART_received+0x110>
			case 3: strcpy(value3, value); break;
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4833      	ldr	r0, [pc, #204]	@ (8001d48 <UART_received+0x1d8>)
 8001c7a:	f005 f907 	bl	8006e8c <strcpy>
 8001c7e:	bf00      	nop
		}
	}
	if (!valuenotcaption){
 8001c80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c84:	f083 0301 	eor.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d052      	beq.n	8001d34 <UART_received+0x1c4>
		char caption[CAPTION_LENGTH];
		for (int i = 0; i < CAPTION_LENGTH; i++) caption[i] = ' ';
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c92:	e008      	b.n	8001ca6 <UART_received+0x136>
 8001c94:	f107 0208 	add.w	r2, r7, #8
 8001c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9a:	4413      	add	r3, r2
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca8:	2b13      	cmp	r3, #19
 8001caa:	ddf3      	ble.n	8001c94 <UART_received+0x124>
		for (int i = 0; i < size + 1 && i < CAPTION_LENGTH ; i++) caption[i] = buf[i+2];
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb0:	e00d      	b.n	8001cce <UART_received+0x15e>
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	7819      	ldrb	r1, [r3, #0]
 8001cbc:	f107 0208 	add.w	r2, r7, #8
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	4413      	add	r3, r2
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	701a      	strb	r2, [r3, #0]
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	3301      	adds	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	dc02      	bgt.n	8001cdc <UART_received+0x16c>
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	2b13      	cmp	r3, #19
 8001cda:	ddea      	ble.n	8001cb2 <UART_received+0x142>
		switch (selectedDisplay){
 8001cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d827      	bhi.n	8001d34 <UART_received+0x1c4>
 8001ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cec <UART_received+0x17c>)
 8001ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cea:	bf00      	nop
 8001cec:	08001cfd 	.word	0x08001cfd
 8001cf0:	08001d0b 	.word	0x08001d0b
 8001cf4:	08001d19 	.word	0x08001d19
 8001cf8:	08001d27 	.word	0x08001d27
			case 0: strcpy(caption0, caption); break;
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	4619      	mov	r1, r3
 8001d02:	4812      	ldr	r0, [pc, #72]	@ (8001d4c <UART_received+0x1dc>)
 8001d04:	f005 f8c2 	bl	8006e8c <strcpy>
 8001d08:	e014      	b.n	8001d34 <UART_received+0x1c4>
			case 1: strcpy(caption1, caption); break;
 8001d0a:	f107 0308 	add.w	r3, r7, #8
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480f      	ldr	r0, [pc, #60]	@ (8001d50 <UART_received+0x1e0>)
 8001d12:	f005 f8bb 	bl	8006e8c <strcpy>
 8001d16:	e00d      	b.n	8001d34 <UART_received+0x1c4>
			case 2: strcpy(caption2, caption); break;
 8001d18:	f107 0308 	add.w	r3, r7, #8
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480d      	ldr	r0, [pc, #52]	@ (8001d54 <UART_received+0x1e4>)
 8001d20:	f005 f8b4 	bl	8006e8c <strcpy>
 8001d24:	e006      	b.n	8001d34 <UART_received+0x1c4>
			case 3: strcpy(caption3, caption); break;
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480a      	ldr	r0, [pc, #40]	@ (8001d58 <UART_received+0x1e8>)
 8001d2e:	f005 f8ad 	bl	8006e8c <strcpy>
 8001d32:	bf00      	nop
		}
	}
}
 8001d34:	bf00      	nop
 8001d36:	3738      	adds	r7, #56	@ 0x38
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200011c8 	.word	0x200011c8
 8001d40:	200011d0 	.word	0x200011d0
 8001d44:	200011d8 	.word	0x200011d8
 8001d48:	200011e0 	.word	0x200011e0
 8001d4c:	20001178 	.word	0x20001178
 8001d50:	2000118c 	.word	0x2000118c
 8001d54:	200011a0 	.word	0x200011a0
 8001d58:	200011b4 	.word	0x200011b4

08001d5c <loop>:

void loop(){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	drawScreen(0);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff fc91 	bl	8001688 <_Z10drawScreenh>
	drawScreen(1);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f7ff fc8e 	bl	8001688 <_Z10drawScreenh>
	drawScreen(2);
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f7ff fc8b 	bl	8001688 <_Z10drawScreenh>
	drawScreen(3);
 8001d72:	2003      	movs	r0, #3
 8001d74:	f7ff fc88 	bl	8001688 <_Z10drawScreenh>
	HAL_Delay(20);
 8001d78:	2014      	movs	r0, #20
 8001d7a:	f000 ff77 	bl	8002c6c <HAL_Delay>
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <_Z41__static_initialization_and_destruction_0ii>:
 8001d84:	b5b0      	push	{r4, r5, r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d10f      	bne.n	8001db4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10a      	bne.n	8001db4 <_Z41__static_initialization_and_destruction_0ii+0x30>
Encoder enc[4];
 8001d9e:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001da0:	2403      	movs	r4, #3
 8001da2:	461d      	mov	r5, r3
 8001da4:	e004      	b.n	8001db0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001da6:	4628      	mov	r0, r5
 8001da8:	f7ff fb30 	bl	800140c <_ZN7EncoderC1Ev>
 8001dac:	3c01      	subs	r4, #1
 8001dae:	3530      	adds	r5, #48	@ 0x30
 8001db0:	2c00      	cmp	r4, #0
 8001db2:	daf8      	bge.n	8001da6 <_Z41__static_initialization_and_destruction_0ii+0x22>
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbc:	200010b8 	.word	0x200010b8

08001dc0 <_GLOBAL__sub_I_oled>:
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7ff ffdb 	bl	8001d84 <_Z41__static_initialization_and_destruction_0ii>
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <MX_DMA_Init+0x78>)
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dda:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <MX_DMA_Init+0x78>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001de2:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <MX_DMA_Init+0x78>)
 8001de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	200d      	movs	r0, #13
 8001df4:	f001 f839 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001df8:	200d      	movs	r0, #13
 8001dfa:	f001 f852 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	200e      	movs	r0, #14
 8001e04:	f001 f831 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001e08:	200e      	movs	r0, #14
 8001e0a:	f001 f84a 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	200f      	movs	r0, #15
 8001e14:	f001 f829 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e18:	200f      	movs	r0, #15
 8001e1a:	f001 f842 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	2010      	movs	r0, #16
 8001e24:	f001 f821 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e28:	2010      	movs	r0, #16
 8001e2a:	f001 f83a 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	2011      	movs	r0, #17
 8001e34:	f001 f819 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001e38:	2011      	movs	r0, #17
 8001e3a:	f001 f832 	bl	8002ea2 <HAL_NVIC_EnableIRQ>

}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000

08001e4c <_ZN7Encoder27setMaximumVelocityIncrementEh>:

void Encoder::setIncrementValue(int32_t val){
  incValue = val;
}

void Encoder::setMaximumVelocityIncrement(uint8_t val){
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
	maxinc = val;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_ZN7Encoder13setConstrainsEll>:

void Encoder::setConstrains(int32_t low, int32_t up){
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  lowerConstrain = low;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	61da      	str	r2, [r3, #28]
  upperConstrain = up;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	621a      	str	r2, [r3, #32]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_ZN7Encoder17calculateVelocityEv>:

void Encoder::setVelocityRecognition(bool input){
  allowVelocityRecognition = input;
}

uint8_t Encoder::calculateVelocity(){
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if (!allowVelocityRecognition) return 1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7c5b      	ldrb	r3, [r3, #17]
 8001e9c:	f083 0301 	eor.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <_ZN7Encoder17calculateVelocityEv+0x1a>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e04e      	b.n	8001f48 <_ZN7Encoder17calculateVelocityEv+0xb8>

  deltaT = HAL_GetTick() - lastMillis;
 8001eaa:	f000 fed3 	bl	8002c54 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	1ad2      	subs	r2, r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  lastMillis = HAL_GetTick();
 8001eba:	f000 fecb 	bl	8002c54 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (deltaT > 60) return 1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	2b3c      	cmp	r3, #60	@ 0x3c
 8001eca:	d901      	bls.n	8001ed0 <_ZN7Encoder17calculateVelocityEv+0x40>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e03b      	b.n	8001f48 <_ZN7Encoder17calculateVelocityEv+0xb8>
  else if (deltaT < 5)  return maxinc;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d803      	bhi.n	8001ee0 <_ZN7Encoder17calculateVelocityEv+0x50>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001ede:	e033      	b.n	8001f48 <_ZN7Encoder17calculateVelocityEv+0xb8>
  else return (-0.018 * deltaT + 1.091) * maxinc + 1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fc2f 	bl	8000748 <__aeabi_ui2d>
 8001eea:	a31a      	add	r3, pc, #104	@ (adr r3, 8001f54 <_ZN7Encoder17calculateVelocityEv+0xc4>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe f9be 	bl	8000270 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	a317      	add	r3, pc, #92	@ (adr r3, 8001f5c <_ZN7Encoder17calculateVelocityEv+0xcc>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	f7fe fae5 	bl	80004d0 <__adddf3>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4614      	mov	r4, r2
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fc27 	bl	8000768 <__aeabi_i2d>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4620      	mov	r0, r4
 8001f20:	4629      	mov	r1, r5
 8001f22:	f7fe f9a5 	bl	8000270 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <_ZN7Encoder17calculateVelocityEv+0xc0>)
 8001f34:	f7fe facc 	bl	80004d0 <__adddf3>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fc7c 	bl	800083c <__aeabi_d2uiz>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b2db      	uxtb	r3, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f50:	3ff00000 	.word	0x3ff00000
 8001f54:	8d4fdf3b 	.word	0x8d4fdf3b
 8001f58:	bf926e97 	.word	0xbf926e97
 8001f5c:	6a7ef9db 	.word	0x6a7ef9db
 8001f60:	3ff174bc 	.word	0x3ff174bc

08001f64 <_ZN7Encoder7refreshEbb>:

void Encoder::refresh(bool clk, bool data){
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	70fb      	strb	r3, [r7, #3]
 8001f70:	4613      	mov	r3, r2
 8001f72:	70bb      	strb	r3, [r7, #2]
  a = clk;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	731a      	strb	r2, [r3, #12]
  b = data;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	78ba      	ldrb	r2, [r7, #2]
 8001f7e:	735a      	strb	r2, [r3, #13]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_ZN7Encoder7executeEv>:

void Encoder::execute(){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint8_t velocity = 1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
  if (!pa && a) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7b9b      	ldrb	r3, [r3, #14]
 8001f9c:	f083 0301 	eor.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d02a      	beq.n	8001ffc <_ZN7Encoder7executeEv+0x70>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7b1b      	ldrb	r3, [r3, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d026      	beq.n	8001ffc <_ZN7Encoder7executeEv+0x70>
	  velocity = calculateVelocity();
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ff6e 	bl	8001e90 <_ZN7Encoder17calculateVelocityEv>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]
	  a ? OnChange(Increment, velocity) : OnChange(Decrement, velocity);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7b1b      	ldrb	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <_ZN7Encoder7executeEv+0x42>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	2001      	movs	r0, #1
 8001fca:	4798      	blx	r3
 8001fcc:	e005      	b.n	8001fda <_ZN7Encoder7executeEv+0x4e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	4798      	blx	r3
	  a ? counter+=velocity : counter-=velocity;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <_ZN7Encoder7executeEv+0x64>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	615a      	str	r2, [r3, #20]
 8001fee:	e005      	b.n	8001ffc <_ZN7Encoder7executeEv+0x70>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	1ad2      	subs	r2, r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	615a      	str	r2, [r3, #20]
  }
  if (pa && !a) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7b9b      	ldrb	r3, [r3, #14]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d033      	beq.n	800206c <_ZN7Encoder7executeEv+0xe0>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7b1b      	ldrb	r3, [r3, #12]
 8002008:	f083 0301 	eor.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d02c      	beq.n	800206c <_ZN7Encoder7executeEv+0xe0>
	  velocity = calculateVelocity();
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ff3c 	bl	8001e90 <_ZN7Encoder17calculateVelocityEv>
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]
	  !a ? OnChange(Increment, velocity) : OnChange(Decrement, velocity);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7b1b      	ldrb	r3, [r3, #12]
 8002020:	f083 0301 	eor.w	r3, r3, #1
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <_ZN7Encoder7executeEv+0xac>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	4611      	mov	r1, r2
 8002032:	2001      	movs	r0, #1
 8002034:	4798      	blx	r3
 8002036:	e005      	b.n	8002044 <_ZN7Encoder7executeEv+0xb8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	4611      	mov	r1, r2
 8002040:	2000      	movs	r0, #0
 8002042:	4798      	blx	r3
	  !a ? counter+=velocity : counter-=velocity;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7b1b      	ldrb	r3, [r3, #12]
 8002048:	f083 0301 	eor.w	r3, r3, #1
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <_ZN7Encoder7executeEv+0xd4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	441a      	add	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	615a      	str	r2, [r3, #20]
 800205e:	e005      	b.n	800206c <_ZN7Encoder7executeEv+0xe0>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	1ad2      	subs	r2, r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	615a      	str	r2, [r3, #20]
  }

  if (counter < lowerConstrain) {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	429a      	cmp	r2, r3
 8002076:	da0c      	bge.n	8002092 <_ZN7Encoder7executeEv+0x106>
	if (allowRollover)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7c1b      	ldrb	r3, [r3, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <_ZN7Encoder7executeEv+0xfe>
	{
	  counter = upperConstrain;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	615a      	str	r2, [r3, #20]
 8002088:	e003      	b.n	8002092 <_ZN7Encoder7executeEv+0x106>
	}
	else
	{
	  counter = lowerConstrain;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69da      	ldr	r2, [r3, #28]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	615a      	str	r2, [r3, #20]
	}
  }
  if (counter > upperConstrain) {
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	429a      	cmp	r2, r3
 800209c:	dd0c      	ble.n	80020b8 <_ZN7Encoder7executeEv+0x12c>
	if (allowRollover)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7c1b      	ldrb	r3, [r3, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <_ZN7Encoder7executeEv+0x124>
	{
	  counter = lowerConstrain;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	615a      	str	r2, [r3, #20]
 80020ae:	e003      	b.n	80020b8 <_ZN7Encoder7executeEv+0x12c>
	}
	else
	{
	  counter = upperConstrain;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1a      	ldr	r2, [r3, #32]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	615a      	str	r2, [r3, #20]
	}
  }

  pa = a;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7b1a      	ldrb	r2, [r3, #12]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	739a      	strb	r2, [r3, #14]
  pb = b;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7b5a      	ldrb	r2, [r3, #13]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	73da      	strb	r2, [r3, #15]
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_ZN7Encoder10setCounterEl>:

int32_t Encoder::getCounter(){
  return counter;
}

void Encoder::setCounter(int32_t value){
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    if (value > upperConstrain) {
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dd04      	ble.n	80020ee <_ZN7Encoder10setCounterEl+0x1e>
        counter = upperConstrain;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	615a      	str	r2, [r3, #20]
        return;
 80020ec:	e00c      	b.n	8002108 <_ZN7Encoder10setCounterEl+0x38>
    }
    if (value < lowerConstrain){
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	da04      	bge.n	8002102 <_ZN7Encoder10setCounterEl+0x32>
        counter = lowerConstrain;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	615a      	str	r2, [r3, #20]
        return;
 8002100:	e002      	b.n	8002108 <_ZN7Encoder10setCounterEl+0x38>
    }
    counter = value;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	615a      	str	r2, [r3, #20]
}
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_ZN7Encoder11setCallbackEPFv16EncoderDirectionhE>:

void Encoder::setCallback(void(*funcpointer)(EncoderDirection, uint8_t)){
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
  OnChange = funcpointer;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b29      	ldr	r3, [pc, #164]	@ (80021ec <MX_GPIO_Init+0xbc>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	4a28      	ldr	r2, [pc, #160]	@ (80021ec <MX_GPIO_Init+0xbc>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <MX_GPIO_Init+0xbc>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <MX_GPIO_Init+0xbc>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002162:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <MX_GPIO_Init+0xbc>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <MX_GPIO_Init+0xbc>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
 8002176:	2200      	movs	r2, #0
 8002178:	f641 1170 	movw	r1, #6512	@ 0x1970
 800217c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002180:	f001 faaa 	bl	80036d8 <HAL_GPIO_WritePin>
                          |MUX_A_Pin|MUX_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SSD1306_CS2_Pin|SSD1306_CS3_Pin|GPIO_PIN_3|MUX_C_Pin
 8002184:	2200      	movs	r2, #0
 8002186:	216b      	movs	r1, #107	@ 0x6b
 8002188:	4819      	ldr	r0, [pc, #100]	@ (80021f0 <MX_GPIO_Init+0xc0>)
 800218a:	f001 faa5 	bl	80036d8 <HAL_GPIO_WritePin>
                          |MUX_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
 800218e:	f641 1370 	movw	r3, #6512	@ 0x1970
 8002192:	60fb      	str	r3, [r7, #12]
                          |MUX_A_Pin|MUX_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	4619      	mov	r1, r3
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021aa:	f001 f90b 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB3 PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SSD1306_CS2_Pin|SSD1306_CS3_Pin|GPIO_PIN_3|MUX_C_Pin
 80021ae:	236b      	movs	r3, #107	@ 0x6b
 80021b0:	60fb      	str	r3, [r7, #12]
                          |MUX_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	4619      	mov	r1, r3
 80021c4:	480a      	ldr	r0, [pc, #40]	@ (80021f0 <MX_GPIO_Init+0xc0>)
 80021c6:	f001 f8fd 	bl	80033c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MUX_Common2_Pin|MUX_Common_Pin;
 80021ca:	2390      	movs	r3, #144	@ 0x90
 80021cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4619      	mov	r1, r3
 80021dc:	4804      	ldr	r0, [pc, #16]	@ (80021f0 <MX_GPIO_Init+0xc0>)
 80021de:	f001 f8f1 	bl	80033c4 <HAL_GPIO_Init>

}
 80021e2:	bf00      	nop
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	48000400 	.word	0x48000400

080021f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021f8:	f000 fcc3 	bl	8002b82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021fc:	f000 f82e 	bl	800225c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002200:	f7ff ff96 	bl	8002130 <MX_GPIO_Init>
  MX_DMA_Init();
 8002204:	f7ff fde4 	bl	8001dd0 <MX_DMA_Init>
  MX_SPI1_Init();
 8002208:	f000 f8cc 	bl	80023a4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800220c:	f000 fac0 	bl	8002790 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002210:	f000 faee 	bl	80027f0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002214:	f000 fa60 	bl	80026d8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8002218:	f7ff fc24 	bl	8001a64 <setup>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uartbuffer1, buffersize);
 800221c:	22ff      	movs	r2, #255	@ 0xff
 800221e:	490a      	ldr	r1, [pc, #40]	@ (8002248 <main+0x54>)
 8002220:	480a      	ldr	r0, [pc, #40]	@ (800224c <main+0x58>)
 8002222:	f004 fd8a 	bl	8006d3a <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uartbuffer2, buffersize);
 8002226:	22ff      	movs	r2, #255	@ 0xff
 8002228:	4909      	ldr	r1, [pc, #36]	@ (8002250 <main+0x5c>)
 800222a:	480a      	ldr	r0, [pc, #40]	@ (8002254 <main+0x60>)
 800222c:	f004 fd85 	bl	8006d3a <HAL_UARTEx_ReceiveToIdle_DMA>
  if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 8002230:	4809      	ldr	r0, [pc, #36]	@ (8002258 <main+0x64>)
 8002232:	f003 f833 	bl	800529c <HAL_TIM_Base_Start_IT>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <main+0x4c>
  {
	/* Starting Error */
	Error_Handler();
 800223c:	f000 f8ac 	bl	8002398 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	 loop();
 8002240:	f7ff fd8c 	bl	8001d5c <loop>
 8002244:	e7fc      	b.n	8002240 <main+0x4c>
 8002246:	bf00      	nop
 8002248:	200011e8 	.word	0x200011e8
 800224c:	200014e4 	.word	0x200014e4
 8002250:	200012e8 	.word	0x200012e8
 8002254:	2000156c 	.word	0x2000156c
 8002258:	20001498 	.word	0x20001498

0800225c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b096      	sub	sp, #88	@ 0x58
 8002260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	2244      	movs	r2, #68	@ 0x44
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f004 fdda 	bl	8006e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002270:	463b      	mov	r3, r7
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800227e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002282:	f001 fa4f 	bl	8003724 <HAL_PWREx_ControlVoltageScaling>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800228c:	f000 f884 	bl	8002398 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002290:	2302      	movs	r3, #2
 8002292:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002298:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800229a:	2340      	movs	r3, #64	@ 0x40
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800229e:	2302      	movs	r3, #2
 80022a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022a2:	2302      	movs	r3, #2
 80022a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 80022aa:	230a      	movs	r3, #10
 80022ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022ae:	2302      	movs	r3, #2
 80022b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022b2:	2302      	movs	r3, #2
 80022b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 fa88 	bl	80037d0 <HAL_RCC_OscConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80022c6:	f000 f867 	bl	8002398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ca:	230f      	movs	r3, #15
 80022cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ce:	2303      	movs	r3, #3
 80022d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022de:	463b      	mov	r3, r7
 80022e0:	2104      	movs	r1, #4
 80022e2:	4618      	mov	r0, r3
 80022e4:	f001 fed6 	bl	8004094 <HAL_RCC_ClockConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80022ee:	f000 f853 	bl	8002398 <Error_Handler>
  }
}
 80022f2:	bf00      	nop
 80022f4:	3758      	adds	r7, #88	@ 0x58
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
#if defined(SSD1306_SPI_CONTROL) && defined(SSD1306_SPI_DMA_ENABLE)
	SSD1306_DmaEndCallback(hspi);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff f864 	bl	80013d0 <SSD1306_DmaEndCallback>
#endif
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	if (htim == &htim6){
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a04      	ldr	r2, [pc, #16]	@ (800232c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_TIM_PeriodElapsedCallback+0x14>
		Timer6Interrupt();
 8002320:	f7ff fbc8 	bl	8001ab4 <Timer6Interrupt>
	}
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20001498 	.word	0x20001498

08002330 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
    if(huart == &huart1)		//robimy to samo co przy UART2 (to do kompa), ale bez retransmisji bo i po co?
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <HAL_UARTEx_RxEventCallback+0x58>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d109      	bne.n	8002358 <HAL_UARTEx_RxEventCallback+0x28>
    {
    	UART_received(&uartbuffer1, Size);
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	4619      	mov	r1, r3
 8002348:	4810      	ldr	r0, [pc, #64]	@ (800238c <HAL_UARTEx_RxEventCallback+0x5c>)
 800234a:	f7ff fc11 	bl	8001b70 <UART_received>
    	//HAL_UART_Transmit_DMA(&huart2, uartbuffer2, Size);
        // Start to listening again - IMPORTANT!
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uartbuffer1, buffersize);
 800234e:	22ff      	movs	r2, #255	@ 0xff
 8002350:	490e      	ldr	r1, [pc, #56]	@ (800238c <HAL_UARTEx_RxEventCallback+0x5c>)
 8002352:	480d      	ldr	r0, [pc, #52]	@ (8002388 <HAL_UARTEx_RxEventCallback+0x58>)
 8002354:	f004 fcf1 	bl	8006d3a <HAL_UARTEx_ReceiveToIdle_DMA>
    }
    if(huart == &huart2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a0d      	ldr	r2, [pc, #52]	@ (8002390 <HAL_UARTEx_RxEventCallback+0x60>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d10f      	bne.n	8002380 <HAL_UARTEx_RxEventCallback+0x50>
	{
		UART_received(&uartbuffer2, Size);
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	4619      	mov	r1, r3
 8002364:	480b      	ldr	r0, [pc, #44]	@ (8002394 <HAL_UARTEx_RxEventCallback+0x64>)
 8002366:	f7ff fc03 	bl	8001b70 <UART_received>
		HAL_UART_Transmit_DMA(&huart2, uartbuffer2, Size);
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	461a      	mov	r2, r3
 800236e:	4909      	ldr	r1, [pc, #36]	@ (8002394 <HAL_UARTEx_RxEventCallback+0x64>)
 8002370:	4807      	ldr	r0, [pc, #28]	@ (8002390 <HAL_UARTEx_RxEventCallback+0x60>)
 8002372:	f003 fa59 	bl	8005828 <HAL_UART_Transmit_DMA>
		// Start to listening again - IMPORTANT!
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uartbuffer2, buffersize);
 8002376:	22ff      	movs	r2, #255	@ 0xff
 8002378:	4906      	ldr	r1, [pc, #24]	@ (8002394 <HAL_UARTEx_RxEventCallback+0x64>)
 800237a:	4805      	ldr	r0, [pc, #20]	@ (8002390 <HAL_UARTEx_RxEventCallback+0x60>)
 800237c:	f004 fcdd 	bl	8006d3a <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200014e4 	.word	0x200014e4
 800238c:	200011e8 	.word	0x200011e8
 8002390:	2000156c 	.word	0x2000156c
 8002394:	200012e8 	.word	0x200012e8

08002398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800239c:	b672      	cpsid	i
}
 800239e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <Error_Handler+0x8>

080023a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023aa:	4a1c      	ldr	r2, [pc, #112]	@ (800241c <MX_SPI1_Init+0x78>)
 80023ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023b6:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023bc:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023be:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80023c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c4:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023da:	2228      	movs	r2, #40	@ 0x28
 80023dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023de:	4b0e      	ldr	r3, [pc, #56]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023f0:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023f2:	2207      	movs	r2, #7
 80023f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023f6:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <MX_SPI1_Init+0x74>)
 80023fe:	2208      	movs	r2, #8
 8002400:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002402:	4805      	ldr	r0, [pc, #20]	@ (8002418 <MX_SPI1_Init+0x74>)
 8002404:	f002 f9f0 	bl	80047e8 <HAL_SPI_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800240e:	f7ff ffc3 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200013e8 	.word	0x200013e8
 800241c:	40013000 	.word	0x40013000

08002420 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a2c      	ldr	r2, [pc, #176]	@ (80024f0 <HAL_SPI_MspInit+0xd0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d151      	bne.n	80024e6 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002442:	4b2c      	ldr	r3, [pc, #176]	@ (80024f4 <HAL_SPI_MspInit+0xd4>)
 8002444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002446:	4a2b      	ldr	r2, [pc, #172]	@ (80024f4 <HAL_SPI_MspInit+0xd4>)
 8002448:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800244c:	6613      	str	r3, [r2, #96]	@ 0x60
 800244e:	4b29      	ldr	r3, [pc, #164]	@ (80024f4 <HAL_SPI_MspInit+0xd4>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002452:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b26      	ldr	r3, [pc, #152]	@ (80024f4 <HAL_SPI_MspInit+0xd4>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	4a25      	ldr	r2, [pc, #148]	@ (80024f4 <HAL_SPI_MspInit+0xd4>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002466:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <HAL_SPI_MspInit+0xd4>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8002472:	2382      	movs	r3, #130	@ 0x82
 8002474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002482:	2305      	movs	r3, #5
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4619      	mov	r1, r3
 800248c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002490:	f000 ff98 	bl	80033c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002494:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 8002496:	4a19      	ldr	r2, [pc, #100]	@ (80024fc <HAL_SPI_MspInit+0xdc>)
 8002498:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800249a:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 800249c:	2201      	movs	r2, #1
 800249e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a0:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 80024a2:	2210      	movs	r2, #16
 80024a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a6:	4b14      	ldr	r3, [pc, #80]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ac:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 80024ae:	2280      	movs	r2, #128	@ 0x80
 80024b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b2:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80024be:	4b0e      	ldr	r3, [pc, #56]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024ca:	480b      	ldr	r0, [pc, #44]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 80024cc:	f000 fd04 	bl	8002ed8 <HAL_DMA_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80024d6:	f7ff ff5f 	bl	8002398 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a06      	ldr	r2, [pc, #24]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 80024de:	655a      	str	r2, [r3, #84]	@ 0x54
 80024e0:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <HAL_SPI_MspInit+0xd8>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024e6:	bf00      	nop
 80024e8:	3728      	adds	r7, #40	@ 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40013000 	.word	0x40013000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	2000144c 	.word	0x2000144c
 80024fc:	40020030 	.word	0x40020030

08002500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002506:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <HAL_MspInit+0x44>)
 8002508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250a:	4a0e      	ldr	r2, [pc, #56]	@ (8002544 <HAL_MspInit+0x44>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6613      	str	r3, [r2, #96]	@ 0x60
 8002512:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <HAL_MspInit+0x44>)
 8002514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <HAL_MspInit+0x44>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	4a08      	ldr	r2, [pc, #32]	@ (8002544 <HAL_MspInit+0x44>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002528:	6593      	str	r3, [r2, #88]	@ 0x58
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_MspInit+0x44>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000

08002548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <NMI_Handler+0x4>

08002550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <HardFault_Handler+0x4>

08002558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <MemManage_Handler+0x4>

08002560 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <BusFault_Handler+0x4>

08002568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <UsageFault_Handler+0x4>

08002570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800259e:	f000 fb45 	bl	8002c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025ac:	4802      	ldr	r0, [pc, #8]	@ (80025b8 <DMA1_Channel3_IRQHandler+0x10>)
 80025ae:	f000 fe2a 	bl	8003206 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2000144c 	.word	0x2000144c

080025bc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025c0:	4802      	ldr	r0, [pc, #8]	@ (80025cc <DMA1_Channel4_IRQHandler+0x10>)
 80025c2:	f000 fe20 	bl	8003206 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	2000163c 	.word	0x2000163c

080025d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025d4:	4802      	ldr	r0, [pc, #8]	@ (80025e0 <DMA1_Channel5_IRQHandler+0x10>)
 80025d6:	f000 fe16 	bl	8003206 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200015f4 	.word	0x200015f4

080025e4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <DMA1_Channel6_IRQHandler+0x10>)
 80025ea:	f000 fe0c 	bl	8003206 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20001684 	.word	0x20001684

080025f8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80025fc:	4802      	ldr	r0, [pc, #8]	@ (8002608 <DMA1_Channel7_IRQHandler+0x10>)
 80025fe:	f000 fe02 	bl	8003206 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	200016cc 	.word	0x200016cc

0800260c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002610:	4802      	ldr	r0, [pc, #8]	@ (800261c <USART1_IRQHandler+0x10>)
 8002612:	f003 f985 	bl	8005920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200014e4 	.word	0x200014e4

08002620 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <USART2_IRQHandler+0x10>)
 8002626:	f003 f97b 	bl	8005920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2000156c 	.word	0x2000156c

08002634 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <TIM6_IRQHandler+0x10>)
 800263a:	f002 fe83 	bl	8005344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20001498 	.word	0x20001498

08002648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002650:	4a14      	ldr	r2, [pc, #80]	@ (80026a4 <_sbrk+0x5c>)
 8002652:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <_sbrk+0x60>)
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800265c:	4b13      	ldr	r3, [pc, #76]	@ (80026ac <_sbrk+0x64>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002664:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <_sbrk+0x64>)
 8002666:	4a12      	ldr	r2, [pc, #72]	@ (80026b0 <_sbrk+0x68>)
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266a:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	429a      	cmp	r2, r3
 8002676:	d207      	bcs.n	8002688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002678:	f004 fbdc 	bl	8006e34 <__errno>
 800267c:	4603      	mov	r3, r0
 800267e:	220c      	movs	r2, #12
 8002680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	e009      	b.n	800269c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002688:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800268e:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	4a05      	ldr	r2, [pc, #20]	@ (80026ac <_sbrk+0x64>)
 8002698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20008000 	.word	0x20008000
 80026a8:	00000400 	.word	0x00000400
 80026ac:	20001494 	.word	0x20001494
 80026b0:	20001860 	.word	0x20001860

080026b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <SystemInit+0x20>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	4a05      	ldr	r2, [pc, #20]	@ (80026d4 <SystemInit+0x20>)
 80026c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026e8:	4b14      	ldr	r3, [pc, #80]	@ (800273c <MX_TIM6_Init+0x64>)
 80026ea:	4a15      	ldr	r2, [pc, #84]	@ (8002740 <MX_TIM6_Init+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 80026ee:	4b13      	ldr	r3, [pc, #76]	@ (800273c <MX_TIM6_Init+0x64>)
 80026f0:	2250      	movs	r2, #80	@ 0x50
 80026f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f4:	4b11      	ldr	r3, [pc, #68]	@ (800273c <MX_TIM6_Init+0x64>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80026fa:	4b10      	ldr	r3, [pc, #64]	@ (800273c <MX_TIM6_Init+0x64>)
 80026fc:	2264      	movs	r2, #100	@ 0x64
 80026fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002700:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <MX_TIM6_Init+0x64>)
 8002702:	2200      	movs	r2, #0
 8002704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002706:	480d      	ldr	r0, [pc, #52]	@ (800273c <MX_TIM6_Init+0x64>)
 8002708:	f002 fd70 	bl	80051ec <HAL_TIM_Base_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002712:	f7ff fe41 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	4619      	mov	r1, r3
 8002722:	4806      	ldr	r0, [pc, #24]	@ (800273c <MX_TIM6_Init+0x64>)
 8002724:	f002 ffae 	bl	8005684 <HAL_TIMEx_MasterConfigSynchronization>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800272e:	f7ff fe33 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20001498 	.word	0x20001498
 8002740:	40001000 	.word	0x40001000

08002744 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0d      	ldr	r2, [pc, #52]	@ (8002788 <HAL_TIM_Base_MspInit+0x44>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d113      	bne.n	800277e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002756:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <HAL_TIM_Base_MspInit+0x48>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	4a0c      	ldr	r2, [pc, #48]	@ (800278c <HAL_TIM_Base_MspInit+0x48>)
 800275c:	f043 0310 	orr.w	r3, r3, #16
 8002760:	6593      	str	r3, [r2, #88]	@ 0x58
 8002762:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <HAL_TIM_Base_MspInit+0x48>)
 8002764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	2036      	movs	r0, #54	@ 0x36
 8002774:	f000 fb79 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002778:	2036      	movs	r0, #54	@ 0x36
 800277a:	f000 fb92 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40001000 	.word	0x40001000
 800278c:	40021000 	.word	0x40021000

08002790 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002794:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <MX_USART1_UART_Init+0x58>)
 8002796:	4a15      	ldr	r2, [pc, #84]	@ (80027ec <MX_USART1_UART_Init+0x5c>)
 8002798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800279a:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <MX_USART1_UART_Init+0x58>)
 800279c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <MX_USART1_UART_Init+0x58>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <MX_USART1_UART_Init+0x58>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <MX_USART1_UART_Init+0x58>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <MX_USART1_UART_Init+0x58>)
 80027b6:	220c      	movs	r2, #12
 80027b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <MX_USART1_UART_Init+0x58>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c0:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <MX_USART1_UART_Init+0x58>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027c6:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <MX_USART1_UART_Init+0x58>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027cc:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <MX_USART1_UART_Init+0x58>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027d2:	4805      	ldr	r0, [pc, #20]	@ (80027e8 <MX_USART1_UART_Init+0x58>)
 80027d4:	f002 ffda 	bl	800578c <HAL_UART_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80027de:	f7ff fddb 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200014e4 	.word	0x200014e4
 80027ec:	40013800 	.word	0x40013800

080027f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027f4:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <MX_USART2_UART_Init+0x58>)
 80027f6:	4a15      	ldr	r2, [pc, #84]	@ (800284c <MX_USART2_UART_Init+0x5c>)
 80027f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027fa:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <MX_USART2_UART_Init+0x58>)
 80027fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002802:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <MX_USART2_UART_Init+0x58>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002808:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <MX_USART2_UART_Init+0x58>)
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800280e:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <MX_USART2_UART_Init+0x58>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002814:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <MX_USART2_UART_Init+0x58>)
 8002816:	220c      	movs	r2, #12
 8002818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <MX_USART2_UART_Init+0x58>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002820:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <MX_USART2_UART_Init+0x58>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002826:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <MX_USART2_UART_Init+0x58>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <MX_USART2_UART_Init+0x58>)
 800282e:	2200      	movs	r2, #0
 8002830:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002832:	4805      	ldr	r0, [pc, #20]	@ (8002848 <MX_USART2_UART_Init+0x58>)
 8002834:	f002 ffaa 	bl	800578c <HAL_UART_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800283e:	f7ff fdab 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2000156c 	.word	0x2000156c
 800284c:	40004400 	.word	0x40004400

08002850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b098      	sub	sp, #96	@ 0x60
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002868:	f107 0318 	add.w	r3, r7, #24
 800286c:	2234      	movs	r2, #52	@ 0x34
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f004 fad7 	bl	8006e24 <memset>
  if(uartHandle->Instance==USART1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4aa2      	ldr	r2, [pc, #648]	@ (8002b04 <HAL_UART_MspInit+0x2b4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	f040 8093 	bne.w	80029a8 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002882:	2301      	movs	r3, #1
 8002884:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800288a:	f107 0318 	add.w	r3, r7, #24
 800288e:	4618      	mov	r0, r3
 8002890:	f001 fe24 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800289a:	f7ff fd7d 	bl	8002398 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800289e:	4b9a      	ldr	r3, [pc, #616]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80028a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a2:	4a99      	ldr	r2, [pc, #612]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80028aa:	4b97      	ldr	r3, [pc, #604]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80028ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	4b94      	ldr	r3, [pc, #592]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	4a93      	ldr	r2, [pc, #588]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028c2:	4b91      	ldr	r3, [pc, #580]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028e0:	2307      	movs	r3, #7
 80028e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ee:	f000 fd69 	bl	80033c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80028f2:	4b86      	ldr	r3, [pc, #536]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 80028f4:	4a86      	ldr	r2, [pc, #536]	@ (8002b10 <HAL_UART_MspInit+0x2c0>)
 80028f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80028f8:	4b84      	ldr	r3, [pc, #528]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 80028fa:	2202      	movs	r2, #2
 80028fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028fe:	4b83      	ldr	r3, [pc, #524]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002904:	4b81      	ldr	r3, [pc, #516]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800290a:	4b80      	ldr	r3, [pc, #512]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 800290c:	2280      	movs	r2, #128	@ 0x80
 800290e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002910:	4b7e      	ldr	r3, [pc, #504]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 8002912:	2200      	movs	r2, #0
 8002914:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002916:	4b7d      	ldr	r3, [pc, #500]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800291c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002922:	4b7a      	ldr	r3, [pc, #488]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 8002924:	2200      	movs	r2, #0
 8002926:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002928:	4878      	ldr	r0, [pc, #480]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 800292a:	f000 fad5 	bl	8002ed8 <HAL_DMA_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002934:	f7ff fd30 	bl	8002398 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a74      	ldr	r2, [pc, #464]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 800293c:	675a      	str	r2, [r3, #116]	@ 0x74
 800293e:	4a73      	ldr	r2, [pc, #460]	@ (8002b0c <HAL_UART_MspInit+0x2bc>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002944:	4b73      	ldr	r3, [pc, #460]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 8002946:	4a74      	ldr	r2, [pc, #464]	@ (8002b18 <HAL_UART_MspInit+0x2c8>)
 8002948:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800294a:	4b72      	ldr	r3, [pc, #456]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 800294c:	2202      	movs	r2, #2
 800294e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002950:	4b70      	ldr	r3, [pc, #448]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 8002952:	2210      	movs	r2, #16
 8002954:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002956:	4b6f      	ldr	r3, [pc, #444]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 8002958:	2200      	movs	r2, #0
 800295a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800295c:	4b6d      	ldr	r3, [pc, #436]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 800295e:	2280      	movs	r2, #128	@ 0x80
 8002960:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002962:	4b6c      	ldr	r3, [pc, #432]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 8002964:	2200      	movs	r2, #0
 8002966:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002968:	4b6a      	ldr	r3, [pc, #424]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800296e:	4b69      	ldr	r3, [pc, #420]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002974:	4b67      	ldr	r3, [pc, #412]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 8002976:	2200      	movs	r2, #0
 8002978:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800297a:	4866      	ldr	r0, [pc, #408]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 800297c:	f000 faac 	bl	8002ed8 <HAL_DMA_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002986:	f7ff fd07 	bl	8002398 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a61      	ldr	r2, [pc, #388]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 800298e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002990:	4a60      	ldr	r2, [pc, #384]	@ (8002b14 <HAL_UART_MspInit+0x2c4>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	2025      	movs	r0, #37	@ 0x25
 800299c:	f000 fa65 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029a0:	2025      	movs	r0, #37	@ 0x25
 80029a2:	f000 fa7e 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029a6:	e0a8      	b.n	8002afa <HAL_UART_MspInit+0x2aa>
  else if(uartHandle->Instance==USART2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a5b      	ldr	r2, [pc, #364]	@ (8002b1c <HAL_UART_MspInit+0x2cc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	f040 80a3 	bne.w	8002afa <HAL_UART_MspInit+0x2aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029b4:	2302      	movs	r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029bc:	f107 0318 	add.w	r3, r7, #24
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fd8b 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80029cc:	f7ff fce4 	bl	8002398 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80029d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029da:	6593      	str	r3, [r2, #88]	@ 0x58
 80029dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e8:	4b47      	ldr	r3, [pc, #284]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80029ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ec:	4a46      	ldr	r2, [pc, #280]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029f4:	4b44      	ldr	r3, [pc, #272]	@ (8002b08 <HAL_UART_MspInit+0x2b8>)
 80029f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a00:	2304      	movs	r3, #4
 8002a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a10:	2307      	movs	r3, #7
 8002a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a1e:	f000 fcd1 	bl	80033c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002a34:	2303      	movs	r3, #3
 8002a36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a38:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a42:	f000 fcbf 	bl	80033c4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002a46:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a48:	4a36      	ldr	r2, [pc, #216]	@ (8002b24 <HAL_UART_MspInit+0x2d4>)
 8002a4a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002a4c:	4b34      	ldr	r3, [pc, #208]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a4e:	2202      	movs	r2, #2
 8002a50:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a52:	4b33      	ldr	r3, [pc, #204]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a58:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a5e:	4b30      	ldr	r3, [pc, #192]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a60:	2280      	movs	r2, #128	@ 0x80
 8002a62:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a64:	4b2e      	ldr	r3, [pc, #184]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a70:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a76:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a7c:	4828      	ldr	r0, [pc, #160]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a7e:	f000 fa2b 	bl	8002ed8 <HAL_DMA_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_UART_MspInit+0x23c>
      Error_Handler();
 8002a88:	f7ff fc86 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a24      	ldr	r2, [pc, #144]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a90:	675a      	str	r2, [r3, #116]	@ 0x74
 8002a92:	4a23      	ldr	r2, [pc, #140]	@ (8002b20 <HAL_UART_MspInit+0x2d0>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002a98:	4b23      	ldr	r3, [pc, #140]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002a9a:	4a24      	ldr	r2, [pc, #144]	@ (8002b2c <HAL_UART_MspInit+0x2dc>)
 8002a9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002a9e:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aa4:	4b20      	ldr	r3, [pc, #128]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002ab2:	2280      	movs	r2, #128	@ 0x80
 8002ab4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ac2:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ac8:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ace:	4816      	ldr	r0, [pc, #88]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002ad0:	f000 fa02 	bl	8002ed8 <HAL_DMA_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8002ada:	f7ff fc5d 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a11      	ldr	r2, [pc, #68]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002ae2:	671a      	str	r2, [r3, #112]	@ 0x70
 8002ae4:	4a10      	ldr	r2, [pc, #64]	@ (8002b28 <HAL_UART_MspInit+0x2d8>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2100      	movs	r1, #0
 8002aee:	2026      	movs	r0, #38	@ 0x26
 8002af0:	f000 f9bb 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002af4:	2026      	movs	r0, #38	@ 0x26
 8002af6:	f000 f9d4 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
}
 8002afa:	bf00      	nop
 8002afc:	3760      	adds	r7, #96	@ 0x60
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40013800 	.word	0x40013800
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	200015f4 	.word	0x200015f4
 8002b10:	40020058 	.word	0x40020058
 8002b14:	2000163c 	.word	0x2000163c
 8002b18:	40020044 	.word	0x40020044
 8002b1c:	40004400 	.word	0x40004400
 8002b20:	20001684 	.word	0x20001684
 8002b24:	4002006c 	.word	0x4002006c
 8002b28:	200016cc 	.word	0x200016cc
 8002b2c:	40020080 	.word	0x40020080

08002b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b34:	f7ff fdbe 	bl	80026b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b38:	480c      	ldr	r0, [pc, #48]	@ (8002b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b3a:	490d      	ldr	r1, [pc, #52]	@ (8002b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b74 <LoopForever+0xe>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b40:	e002      	b.n	8002b48 <LoopCopyDataInit>

08002b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b46:	3304      	adds	r3, #4

08002b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b4c:	d3f9      	bcc.n	8002b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b50:	4c0a      	ldr	r4, [pc, #40]	@ (8002b7c <LoopForever+0x16>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b54:	e001      	b.n	8002b5a <LoopFillZerobss>

08002b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b58:	3204      	adds	r2, #4

08002b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b5c:	d3fb      	bcc.n	8002b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b5e:	f004 f96f 	bl	8006e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b62:	f7ff fb47 	bl	80021f4 <main>

08002b66 <LoopForever>:

LoopForever:
    b LoopForever
 8002b66:	e7fe      	b.n	8002b66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b68:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002b74:	080079f8 	.word	0x080079f8
  ldr r2, =_sbss
 8002b78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002b7c:	20001860 	.word	0x20001860

08002b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b80:	e7fe      	b.n	8002b80 <ADC1_2_IRQHandler>

08002b82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b8c:	2003      	movs	r0, #3
 8002b8e:	f000 f961 	bl	8002e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b92:	200f      	movs	r0, #15
 8002b94:	f000 f80e 	bl	8002bb4 <HAL_InitTick>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	71fb      	strb	r3, [r7, #7]
 8002ba2:	e001      	b.n	8002ba8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ba4:	f7ff fcac 	bl	8002500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002bc0:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <HAL_InitTick+0x6c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d023      	beq.n	8002c10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002bc8:	4b16      	ldr	r3, [pc, #88]	@ (8002c24 <HAL_InitTick+0x70>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b14      	ldr	r3, [pc, #80]	@ (8002c20 <HAL_InitTick+0x6c>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f96d 	bl	8002ebe <HAL_SYSTICK_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b0f      	cmp	r3, #15
 8002bee:	d809      	bhi.n	8002c04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	f000 f937 	bl	8002e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <HAL_InitTick+0x74>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e007      	b.n	8002c14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	e004      	b.n	8002c14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	e001      	b.n	8002c14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2000000c 	.word	0x2000000c
 8002c24:	20000004 	.word	0x20000004
 8002c28:	20000008 	.word	0x20000008

08002c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c30:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_IncTick+0x20>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_IncTick+0x24>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a04      	ldr	r2, [pc, #16]	@ (8002c50 <HAL_IncTick+0x24>)
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	2000000c 	.word	0x2000000c
 8002c50:	20001714 	.word	0x20001714

08002c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return uwTick;
 8002c58:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <HAL_GetTick+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20001714 	.word	0x20001714

08002c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff ffee 	bl	8002c54 <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d005      	beq.n	8002c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_Delay+0x44>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c92:	bf00      	nop
 8002c94:	f7ff ffde 	bl	8002c54 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d8f7      	bhi.n	8002c94 <HAL_Delay+0x28>
  {
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	2000000c 	.word	0x2000000c

08002cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce6:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60d3      	str	r3, [r2, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <__NVIC_GetPriorityGrouping+0x18>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	f003 0307 	and.w	r3, r3, #7
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db0b      	blt.n	8002d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4907      	ldr	r1, [pc, #28]	@ (8002d50 <__NVIC_EnableIRQ+0x38>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2001      	movs	r0, #1
 8002d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000e100 	.word	0xe000e100

08002d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	db0a      	blt.n	8002d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	490c      	ldr	r1, [pc, #48]	@ (8002da0 <__NVIC_SetPriority+0x4c>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	440b      	add	r3, r1
 8002d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d7c:	e00a      	b.n	8002d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4908      	ldr	r1, [pc, #32]	@ (8002da4 <__NVIC_SetPriority+0x50>)
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	3b04      	subs	r3, #4
 8002d8c:	0112      	lsls	r2, r2, #4
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	440b      	add	r3, r1
 8002d92:	761a      	strb	r2, [r3, #24]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000e100 	.word	0xe000e100
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	@ 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f1c3 0307 	rsb	r3, r3, #7
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	bf28      	it	cs
 8002dc6:	2304      	movcs	r3, #4
 8002dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d902      	bls.n	8002dd8 <NVIC_EncodePriority+0x30>
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3b03      	subs	r3, #3
 8002dd6:	e000      	b.n	8002dda <NVIC_EncodePriority+0x32>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	401a      	ands	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df0:	f04f 31ff 	mov.w	r1, #4294967295
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	43d9      	mvns	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	4313      	orrs	r3, r2
         );
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	@ 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e20:	d301      	bcc.n	8002e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00f      	b.n	8002e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e26:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <SysTick_Config+0x40>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2e:	210f      	movs	r1, #15
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f7ff ff8e 	bl	8002d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <SysTick_Config+0x40>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3e:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <SysTick_Config+0x40>)
 8002e40:	2207      	movs	r2, #7
 8002e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	e000e010 	.word	0xe000e010

08002e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ff29 	bl	8002cb4 <__NVIC_SetPriorityGrouping>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e7c:	f7ff ff3e 	bl	8002cfc <__NVIC_GetPriorityGrouping>
 8002e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	6978      	ldr	r0, [r7, #20]
 8002e88:	f7ff ff8e 	bl	8002da8 <NVIC_EncodePriority>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff5d 	bl	8002d54 <__NVIC_SetPriority>
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff31 	bl	8002d18 <__NVIC_EnableIRQ>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ffa2 	bl	8002e10 <SysTick_Config>
 8002ecc:	4603      	mov	r3, r0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e098      	b.n	800301c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8003028 <HAL_DMA_Init+0x150>)
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d80f      	bhi.n	8002f16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b4b      	ldr	r3, [pc, #300]	@ (800302c <HAL_DMA_Init+0x154>)
 8002efe:	4413      	add	r3, r2
 8002f00:	4a4b      	ldr	r2, [pc, #300]	@ (8003030 <HAL_DMA_Init+0x158>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	009a      	lsls	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a48      	ldr	r2, [pc, #288]	@ (8003034 <HAL_DMA_Init+0x15c>)
 8002f12:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f14:	e00e      	b.n	8002f34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b46      	ldr	r3, [pc, #280]	@ (8003038 <HAL_DMA_Init+0x160>)
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a43      	ldr	r2, [pc, #268]	@ (8003030 <HAL_DMA_Init+0x158>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	009a      	lsls	r2, r3, #2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a42      	ldr	r2, [pc, #264]	@ (800303c <HAL_DMA_Init+0x164>)
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f8e:	d039      	beq.n	8003004 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <HAL_DMA_Init+0x15c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d11a      	bne.n	8002fd0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f9a:	4b29      	ldr	r3, [pc, #164]	@ (8003040 <HAL_DMA_Init+0x168>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	f003 031c 	and.w	r3, r3, #28
 8002fa6:	210f      	movs	r1, #15
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	4924      	ldr	r1, [pc, #144]	@ (8003040 <HAL_DMA_Init+0x168>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fb4:	4b22      	ldr	r3, [pc, #136]	@ (8003040 <HAL_DMA_Init+0x168>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc0:	f003 031c 	and.w	r3, r3, #28
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	491d      	ldr	r1, [pc, #116]	@ (8003040 <HAL_DMA_Init+0x168>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]
 8002fce:	e019      	b.n	8003004 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8003044 <HAL_DMA_Init+0x16c>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd8:	f003 031c 	and.w	r3, r3, #28
 8002fdc:	210f      	movs	r1, #15
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	4917      	ldr	r1, [pc, #92]	@ (8003044 <HAL_DMA_Init+0x16c>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fea:	4b16      	ldr	r3, [pc, #88]	@ (8003044 <HAL_DMA_Init+0x16c>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6859      	ldr	r1, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff6:	f003 031c 	and.w	r3, r3, #28
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	4911      	ldr	r1, [pc, #68]	@ (8003044 <HAL_DMA_Init+0x16c>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	40020407 	.word	0x40020407
 800302c:	bffdfff8 	.word	0xbffdfff8
 8003030:	cccccccd 	.word	0xcccccccd
 8003034:	40020000 	.word	0x40020000
 8003038:	bffdfbf8 	.word	0xbffdfbf8
 800303c:	40020400 	.word	0x40020400
 8003040:	400200a8 	.word	0x400200a8
 8003044:	400204a8 	.word	0x400204a8

08003048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_DMA_Start_IT+0x20>
 8003064:	2302      	movs	r3, #2
 8003066:	e04b      	b.n	8003100 <HAL_DMA_Start_IT+0xb8>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d13a      	bne.n	80030f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f95f 	bl	8003364 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 020e 	orr.w	r2, r2, #14
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e00f      	b.n	80030e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0204 	bic.w	r2, r2, #4
 80030ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 020a 	orr.w	r2, r2, #10
 80030de:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e005      	b.n	80030fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
 80030fc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d008      	beq.n	8003132 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2204      	movs	r2, #4
 8003124:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e022      	b.n	8003178 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 020e 	bic.w	r2, r2, #14
 8003140:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	f003 021c 	and.w	r2, r3, #28
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	2101      	movs	r1, #1
 8003160:	fa01 f202 	lsl.w	r2, r1, r2
 8003164:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d005      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2204      	movs	r2, #4
 80031a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	e029      	b.n	80031fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 020e 	bic.w	r2, r2, #14
 80031b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031cc:	f003 021c 	and.w	r2, r3, #28
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
    }
  }
  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	f003 031c 	and.w	r3, r3, #28
 8003226:	2204      	movs	r2, #4
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d026      	beq.n	8003280 <HAL_DMA_IRQHandler+0x7a>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d021      	beq.n	8003280 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d107      	bne.n	800325a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0204 	bic.w	r2, r2, #4
 8003258:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325e:	f003 021c 	and.w	r2, r3, #28
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2104      	movs	r1, #4
 8003268:	fa01 f202 	lsl.w	r2, r1, r2
 800326c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	2b00      	cmp	r3, #0
 8003274:	d071      	beq.n	800335a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800327e:	e06c      	b.n	800335a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003284:	f003 031c 	and.w	r3, r3, #28
 8003288:	2202      	movs	r2, #2
 800328a:	409a      	lsls	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d02e      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xec>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d029      	beq.n	80032f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 020a 	bic.w	r2, r2, #10
 80032ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c8:	f003 021c 	and.w	r2, r3, #28
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	2102      	movs	r1, #2
 80032d2:	fa01 f202 	lsl.w	r2, r1, r2
 80032d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d038      	beq.n	800335a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032f0:	e033      	b.n	800335a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f6:	f003 031c 	and.w	r3, r3, #28
 80032fa:	2208      	movs	r2, #8
 80032fc:	409a      	lsls	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d02a      	beq.n	800335c <HAL_DMA_IRQHandler+0x156>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d025      	beq.n	800335c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 020e 	bic.w	r2, r2, #14
 800331e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003324:	f003 021c 	and.w	r2, r3, #28
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800334e:	2b00      	cmp	r3, #0
 8003350:	d004      	beq.n	800335c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800335a:	bf00      	nop
 800335c:	bf00      	nop
}
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	f003 021c 	and.w	r2, r3, #28
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f202 	lsl.w	r2, r1, r2
 8003384:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b10      	cmp	r3, #16
 8003394:	d108      	bne.n	80033a8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033a6:	e007      	b.n	80033b8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d2:	e14e      	b.n	8003672 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2101      	movs	r1, #1
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	4013      	ands	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8140 	beq.w	800366c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d005      	beq.n	8003404 <HAL_GPIO_Init+0x40>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d130      	bne.n	8003466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800343a:	2201      	movs	r2, #1
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	f003 0201 	and.w	r2, r3, #1
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b03      	cmp	r3, #3
 8003470:	d017      	beq.n	80034a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d123      	bne.n	80034f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	08da      	lsrs	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3208      	adds	r2, #8
 80034b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	220f      	movs	r2, #15
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	08da      	lsrs	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3208      	adds	r2, #8
 80034f0:	6939      	ldr	r1, [r7, #16]
 80034f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	2203      	movs	r2, #3
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0203 	and.w	r2, r3, #3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 809a 	beq.w	800366c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003538:	4b55      	ldr	r3, [pc, #340]	@ (8003690 <HAL_GPIO_Init+0x2cc>)
 800353a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353c:	4a54      	ldr	r2, [pc, #336]	@ (8003690 <HAL_GPIO_Init+0x2cc>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6613      	str	r3, [r2, #96]	@ 0x60
 8003544:	4b52      	ldr	r3, [pc, #328]	@ (8003690 <HAL_GPIO_Init+0x2cc>)
 8003546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003550:	4a50      	ldr	r2, [pc, #320]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	089b      	lsrs	r3, r3, #2
 8003556:	3302      	adds	r3, #2
 8003558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	220f      	movs	r2, #15
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800357a:	d013      	beq.n	80035a4 <HAL_GPIO_Init+0x1e0>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a46      	ldr	r2, [pc, #280]	@ (8003698 <HAL_GPIO_Init+0x2d4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00d      	beq.n	80035a0 <HAL_GPIO_Init+0x1dc>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a45      	ldr	r2, [pc, #276]	@ (800369c <HAL_GPIO_Init+0x2d8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d007      	beq.n	800359c <HAL_GPIO_Init+0x1d8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a44      	ldr	r2, [pc, #272]	@ (80036a0 <HAL_GPIO_Init+0x2dc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_GPIO_Init+0x1d4>
 8003594:	2303      	movs	r3, #3
 8003596:	e006      	b.n	80035a6 <HAL_GPIO_Init+0x1e2>
 8003598:	2307      	movs	r3, #7
 800359a:	e004      	b.n	80035a6 <HAL_GPIO_Init+0x1e2>
 800359c:	2302      	movs	r3, #2
 800359e:	e002      	b.n	80035a6 <HAL_GPIO_Init+0x1e2>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_GPIO_Init+0x1e2>
 80035a4:	2300      	movs	r3, #0
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	f002 0203 	and.w	r2, r2, #3
 80035ac:	0092      	lsls	r2, r2, #2
 80035ae:	4093      	lsls	r3, r2
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035b6:	4937      	ldr	r1, [pc, #220]	@ (8003694 <HAL_GPIO_Init+0x2d0>)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	3302      	adds	r3, #2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035c4:	4b37      	ldr	r3, [pc, #220]	@ (80036a4 <HAL_GPIO_Init+0x2e0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035e8:	4a2e      	ldr	r2, [pc, #184]	@ (80036a4 <HAL_GPIO_Init+0x2e0>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035ee:	4b2d      	ldr	r3, [pc, #180]	@ (80036a4 <HAL_GPIO_Init+0x2e0>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003612:	4a24      	ldr	r2, [pc, #144]	@ (80036a4 <HAL_GPIO_Init+0x2e0>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003618:	4b22      	ldr	r3, [pc, #136]	@ (80036a4 <HAL_GPIO_Init+0x2e0>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800363c:	4a19      	ldr	r2, [pc, #100]	@ (80036a4 <HAL_GPIO_Init+0x2e0>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003642:	4b18      	ldr	r3, [pc, #96]	@ (80036a4 <HAL_GPIO_Init+0x2e0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003666:	4a0f      	ldr	r2, [pc, #60]	@ (80036a4 <HAL_GPIO_Init+0x2e0>)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3301      	adds	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	f47f aea9 	bne.w	80033d4 <HAL_GPIO_Init+0x10>
  }
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40021000 	.word	0x40021000
 8003694:	40010000 	.word	0x40010000
 8003698:	48000400 	.word	0x48000400
 800369c:	48000800 	.word	0x48000800
 80036a0:	48000c00 	.word	0x48000c00
 80036a4:	40010400 	.word	0x40010400

080036a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	887b      	ldrh	r3, [r7, #2]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
 80036c4:	e001      	b.n	80036ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
 80036e4:	4613      	mov	r3, r2
 80036e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e8:	787b      	ldrb	r3, [r7, #1]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ee:	887a      	ldrh	r2, [r7, #2]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036f4:	e002      	b.n	80036fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036f6:	887a      	ldrh	r2, [r7, #2]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800370c:	4b04      	ldr	r3, [pc, #16]	@ (8003720 <HAL_PWREx_GetVoltageRange+0x18>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40007000 	.word	0x40007000

08003724 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003732:	d130      	bne.n	8003796 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003734:	4b23      	ldr	r3, [pc, #140]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800373c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003740:	d038      	beq.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003742:	4b20      	ldr	r3, [pc, #128]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800374a:	4a1e      	ldr	r2, [pc, #120]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003750:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003752:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2232      	movs	r2, #50	@ 0x32
 8003758:	fb02 f303 	mul.w	r3, r2, r3
 800375c:	4a1b      	ldr	r2, [pc, #108]	@ (80037cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0c9b      	lsrs	r3, r3, #18
 8003764:	3301      	adds	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003768:	e002      	b.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3b01      	subs	r3, #1
 800376e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003770:	4b14      	ldr	r3, [pc, #80]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377c:	d102      	bne.n	8003784 <HAL_PWREx_ControlVoltageScaling+0x60>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f2      	bne.n	800376a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003784:	4b0f      	ldr	r3, [pc, #60]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800378c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003790:	d110      	bne.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e00f      	b.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003796:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a2:	d007      	beq.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037a4:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037ac:	4a05      	ldr	r2, [pc, #20]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40007000 	.word	0x40007000
 80037c8:	20000004 	.word	0x20000004
 80037cc:	431bde83 	.word	0x431bde83

080037d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	@ 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f000 bc4f 	b.w	8004082 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e4:	4b97      	ldr	r3, [pc, #604]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ee:	4b95      	ldr	r3, [pc, #596]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80e6 	beq.w	80039d2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <HAL_RCC_OscConfig+0x4c>
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	f040 808d 	bne.w	800392e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b01      	cmp	r3, #1
 8003818:	f040 8089 	bne.w	800392e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800381c:	4b89      	ldr	r3, [pc, #548]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d006      	beq.n	8003836 <HAL_RCC_OscConfig+0x66>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f000 bc26 	b.w	8004082 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800383a:	4b82      	ldr	r3, [pc, #520]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <HAL_RCC_OscConfig+0x80>
 8003846:	4b7f      	ldr	r3, [pc, #508]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800384e:	e005      	b.n	800385c <HAL_RCC_OscConfig+0x8c>
 8003850:	4b7c      	ldr	r3, [pc, #496]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800385c:	4293      	cmp	r3, r2
 800385e:	d224      	bcs.n	80038aa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fdd9 	bl	800441c <RCC_SetFlashLatencyFromMSIRange>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f000 bc06 	b.w	8004082 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003876:	4b73      	ldr	r3, [pc, #460]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a72      	ldr	r2, [pc, #456]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800387c:	f043 0308 	orr.w	r3, r3, #8
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b70      	ldr	r3, [pc, #448]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	496d      	ldr	r1, [pc, #436]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003894:	4b6b      	ldr	r3, [pc, #428]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	4968      	ldr	r1, [pc, #416]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]
 80038a8:	e025      	b.n	80038f6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038aa:	4b66      	ldr	r3, [pc, #408]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a65      	ldr	r2, [pc, #404]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b63      	ldr	r3, [pc, #396]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	4960      	ldr	r1, [pc, #384]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	495b      	ldr	r1, [pc, #364]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fd98 	bl	800441c <RCC_SetFlashLatencyFromMSIRange>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e3c5      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038f6:	f000 fccd 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 80038fa:	4602      	mov	r2, r0
 80038fc:	4b51      	ldr	r3, [pc, #324]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	4950      	ldr	r1, [pc, #320]	@ (8003a48 <HAL_RCC_OscConfig+0x278>)
 8003908:	5ccb      	ldrb	r3, [r1, r3]
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	4a4e      	ldr	r2, [pc, #312]	@ (8003a4c <HAL_RCC_OscConfig+0x27c>)
 8003914:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003916:	4b4e      	ldr	r3, [pc, #312]	@ (8003a50 <HAL_RCC_OscConfig+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff f94a 	bl	8002bb4 <HAL_InitTick>
 8003920:	4603      	mov	r3, r0
 8003922:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d052      	beq.n	80039d0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	e3a9      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d032      	beq.n	800399c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003936:	4b43      	ldr	r3, [pc, #268]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a42      	ldr	r2, [pc, #264]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003942:	f7ff f987 	bl	8002c54 <HAL_GetTick>
 8003946:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800394a:	f7ff f983 	bl	8002c54 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e392      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800395c:	4b39      	ldr	r3, [pc, #228]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003968:	4b36      	ldr	r3, [pc, #216]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a35      	ldr	r2, [pc, #212]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800396e:	f043 0308 	orr.w	r3, r3, #8
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b33      	ldr	r3, [pc, #204]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	4930      	ldr	r1, [pc, #192]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003986:	4b2f      	ldr	r3, [pc, #188]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	492b      	ldr	r1, [pc, #172]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
 800399a:	e01a      	b.n	80039d2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800399c:	4b29      	ldr	r3, [pc, #164]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a28      	ldr	r2, [pc, #160]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039a8:	f7ff f954 	bl	8002c54 <HAL_GetTick>
 80039ac:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039b0:	f7ff f950 	bl	8002c54 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e35f      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039c2:	4b20      	ldr	r3, [pc, #128]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x1e0>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d073      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_OscConfig+0x220>
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d10e      	bne.n	8003a08 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d10b      	bne.n	8003a08 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f0:	4b14      	ldr	r3, [pc, #80]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d063      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x2f4>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d15f      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e33c      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a10:	d106      	bne.n	8003a20 <HAL_RCC_OscConfig+0x250>
 8003a12:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a0b      	ldr	r2, [pc, #44]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e025      	b.n	8003a6c <HAL_RCC_OscConfig+0x29c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a28:	d114      	bne.n	8003a54 <HAL_RCC_OscConfig+0x284>
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a05      	ldr	r2, [pc, #20]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	4b03      	ldr	r3, [pc, #12]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a02      	ldr	r2, [pc, #8]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	e013      	b.n	8003a6c <HAL_RCC_OscConfig+0x29c>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	08007968 	.word	0x08007968
 8003a4c:	20000004 	.word	0x20000004
 8003a50:	20000008 	.word	0x20000008
 8003a54:	4b8f      	ldr	r3, [pc, #572]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a8e      	ldr	r2, [pc, #568]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b8c      	ldr	r3, [pc, #560]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a8b      	ldr	r2, [pc, #556]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7ff f8ee 	bl	8002c54 <HAL_GetTick>
 8003a78:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7ff f8ea 	bl	8002c54 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	@ 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e2f9      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8e:	4b81      	ldr	r3, [pc, #516]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x2ac>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7ff f8da 	bl	8002c54 <HAL_GetTick>
 8003aa0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7ff f8d6 	bl	8002c54 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	@ 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e2e5      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ab6:	4b77      	ldr	r3, [pc, #476]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d060      	beq.n	8003b94 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x314>
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d119      	bne.n	8003b12 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d116      	bne.n	8003b12 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ae4:	4b6b      	ldr	r3, [pc, #428]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_OscConfig+0x32c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e2c2      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b65      	ldr	r3, [pc, #404]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	4962      	ldr	r1, [pc, #392]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b10:	e040      	b.n	8003b94 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d023      	beq.n	8003b62 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a5d      	ldr	r2, [pc, #372]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7ff f895 	bl	8002c54 <HAL_GetTick>
 8003b2a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7ff f891 	bl	8002c54 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e2a0      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b40:	4b54      	ldr	r3, [pc, #336]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b51      	ldr	r3, [pc, #324]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	494e      	ldr	r1, [pc, #312]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
 8003b60:	e018      	b.n	8003b94 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b62:	4b4c      	ldr	r3, [pc, #304]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a4b      	ldr	r2, [pc, #300]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7ff f871 	bl	8002c54 <HAL_GetTick>
 8003b72:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b76:	f7ff f86d 	bl	8002c54 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e27c      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b88:	4b42      	ldr	r3, [pc, #264]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8082 	beq.w	8003ca6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d05f      	beq.n	8003c6a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003baa:	4b3a      	ldr	r3, [pc, #232]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d037      	beq.n	8003c30 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d006      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e254      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d01b      	beq.n	8003c1a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003be2:	4b2c      	ldr	r3, [pc, #176]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003be8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bf2:	f7ff f82f 	bl	8002c54 <HAL_GetTick>
 8003bf6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bfa:	f7ff f82b 	bl	8002c54 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b11      	cmp	r3, #17
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e23a      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c0c:	4b21      	ldr	r3, [pc, #132]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1ef      	bne.n	8003bfa <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c20:	f023 0210 	bic.w	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	491a      	ldr	r1, [pc, #104]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c30:	4b18      	ldr	r3, [pc, #96]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c36:	4a17      	ldr	r2, [pc, #92]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7ff f808 	bl	8002c54 <HAL_GetTick>
 8003c44:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c48:	f7ff f804 	bl	8002c54 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b11      	cmp	r3, #17
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e213      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ef      	beq.n	8003c48 <HAL_RCC_OscConfig+0x478>
 8003c68:	e01d      	b.n	8003ca6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c70:	4a08      	ldr	r2, [pc, #32]	@ (8003c94 <HAL_RCC_OscConfig+0x4c4>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7a:	f7fe ffeb 	bl	8002c54 <HAL_GetTick>
 8003c7e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c80:	e00a      	b.n	8003c98 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c82:	f7fe ffe7 	bl	8002c54 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b11      	cmp	r3, #17
 8003c8e:	d903      	bls.n	8003c98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e1f6      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
 8003c94:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c98:	4ba9      	ldr	r3, [pc, #676]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1ed      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80bd 	beq.w	8003e2e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cba:	4ba1      	ldr	r3, [pc, #644]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	4b9e      	ldr	r3, [pc, #632]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cca:	4a9d      	ldr	r2, [pc, #628]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cd2:	4b9b      	ldr	r3, [pc, #620]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce4:	4b97      	ldr	r3, [pc, #604]	@ (8003f44 <HAL_RCC_OscConfig+0x774>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d118      	bne.n	8003d22 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf0:	4b94      	ldr	r3, [pc, #592]	@ (8003f44 <HAL_RCC_OscConfig+0x774>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a93      	ldr	r2, [pc, #588]	@ (8003f44 <HAL_RCC_OscConfig+0x774>)
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfc:	f7fe ffaa 	bl	8002c54 <HAL_GetTick>
 8003d00:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d04:	f7fe ffa6 	bl	8002c54 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e1b5      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d16:	4b8b      	ldr	r3, [pc, #556]	@ (8003f44 <HAL_RCC_OscConfig+0x774>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d02c      	beq.n	8003d88 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003d2e:	4b84      	ldr	r3, [pc, #528]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d34:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d40:	497f      	ldr	r1, [pc, #508]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d010      	beq.n	8003d76 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d54:	4b7a      	ldr	r3, [pc, #488]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5a:	4a79      	ldr	r2, [pc, #484]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d64:	4b76      	ldr	r3, [pc, #472]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6a:	4a75      	ldr	r2, [pc, #468]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d74:	e018      	b.n	8003da8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d76:	4b72      	ldr	r3, [pc, #456]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7c:	4a70      	ldr	r2, [pc, #448]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d86:	e00f      	b.n	8003da8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d88:	4b6d      	ldr	r3, [pc, #436]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d98:	4b69      	ldr	r3, [pc, #420]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9e:	4a68      	ldr	r2, [pc, #416]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003da0:	f023 0304 	bic.w	r3, r3, #4
 8003da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d016      	beq.n	8003dde <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fe ff50 	bl	8002c54 <HAL_GetTick>
 8003db4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db8:	f7fe ff4c 	bl	8002c54 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e159      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dce:	4b5c      	ldr	r3, [pc, #368]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ed      	beq.n	8003db8 <HAL_RCC_OscConfig+0x5e8>
 8003ddc:	e01d      	b.n	8003e1a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fe ff39 	bl	8002c54 <HAL_GetTick>
 8003de2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f7fe ff35 	bl	8002c54 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e142      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dfc:	4b50      	ldr	r3, [pc, #320]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1ed      	bne.n	8003de6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e10:	4a4b      	ldr	r2, [pc, #300]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4b47      	ldr	r3, [pc, #284]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e26:	4a46      	ldr	r2, [pc, #280]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d03c      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01c      	beq.n	8003e7c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e42:	4b3f      	ldr	r3, [pc, #252]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e48:	4a3d      	ldr	r2, [pc, #244]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fe feff 	bl	8002c54 <HAL_GetTick>
 8003e56:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e5a:	f7fe fefb 	bl	8002c54 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e10a      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e6c:	4b34      	ldr	r3, [pc, #208]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ef      	beq.n	8003e5a <HAL_RCC_OscConfig+0x68a>
 8003e7a:	e01b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e7c:	4b30      	ldr	r3, [pc, #192]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e82:	4a2f      	ldr	r2, [pc, #188]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fe fee2 	bl	8002c54 <HAL_GetTick>
 8003e90:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e94:	f7fe fede 	bl	8002c54 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e0ed      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ea6:	4b26      	ldr	r3, [pc, #152]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ef      	bne.n	8003e94 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80e1 	beq.w	8004080 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	f040 80b5 	bne.w	8004032 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f003 0203 	and.w	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d124      	bne.n	8003f26 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d11b      	bne.n	8003f26 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d113      	bne.n	8003f26 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d05f      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	d05a      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f2c:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a03      	ldr	r2, [pc, #12]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003f32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f38:	f7fe fe8c 	bl	8002c54 <HAL_GetTick>
 8003f3c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3e:	e00c      	b.n	8003f5a <HAL_RCC_OscConfig+0x78a>
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fe fe84 	bl	8002c54 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e093      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f66:	4b49      	ldr	r3, [pc, #292]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	4b49      	ldr	r3, [pc, #292]	@ (8004090 <HAL_RCC_OscConfig+0x8c0>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f76:	3a01      	subs	r2, #1
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	4311      	orrs	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f80:	0212      	lsls	r2, r2, #8
 8003f82:	4311      	orrs	r1, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f88:	0852      	lsrs	r2, r2, #1
 8003f8a:	3a01      	subs	r2, #1
 8003f8c:	0552      	lsls	r2, r2, #21
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f94:	0852      	lsrs	r2, r2, #1
 8003f96:	3a01      	subs	r2, #1
 8003f98:	0652      	lsls	r2, r2, #25
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	493b      	ldr	r1, [pc, #236]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a39      	ldr	r2, [pc, #228]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8003fa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fac:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fae:	4b37      	ldr	r3, [pc, #220]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	4a36      	ldr	r2, [pc, #216]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8003fb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fb8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fba:	f7fe fe4b 	bl	8002c54 <HAL_GetTick>
 8003fbe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7fe fe47 	bl	8002c54 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e056      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fe0:	e04e      	b.n	8004080 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e04d      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe6:	4b29      	ldr	r3, [pc, #164]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d146      	bne.n	8004080 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ff2:	4b26      	ldr	r3, [pc, #152]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a25      	ldr	r2, [pc, #148]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8003ff8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ffc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ffe:	4b23      	ldr	r3, [pc, #140]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	4a22      	ldr	r2, [pc, #136]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8004004:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004008:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800400a:	f7fe fe23 	bl	8002c54 <HAL_GetTick>
 800400e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004012:	f7fe fe1f 	bl	8002c54 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e02e      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004024:	4b19      	ldr	r3, [pc, #100]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <HAL_RCC_OscConfig+0x842>
 8004030:	e026      	b.n	8004080 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d021      	beq.n	800407c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004038:	4b14      	ldr	r3, [pc, #80]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a13      	ldr	r2, [pc, #76]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 800403e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fe fe06 	bl	8002c54 <HAL_GetTick>
 8004048:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404c:	f7fe fe02 	bl	8002c54 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e011      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405e:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	4a07      	ldr	r2, [pc, #28]	@ (800408c <HAL_RCC_OscConfig+0x8bc>)
 8004070:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004074:	f023 0303 	bic.w	r3, r3, #3
 8004078:	60d3      	str	r3, [r2, #12]
 800407a:	e001      	b.n	8004080 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3728      	adds	r7, #40	@ 0x28
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
 8004090:	f99f808c 	.word	0xf99f808c

08004094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0e7      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a8:	4b75      	ldr	r3, [pc, #468]	@ (8004280 <HAL_RCC_ClockConfig+0x1ec>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d910      	bls.n	80040d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b72      	ldr	r3, [pc, #456]	@ (8004280 <HAL_RCC_ClockConfig+0x1ec>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 0207 	bic.w	r2, r3, #7
 80040be:	4970      	ldr	r1, [pc, #448]	@ (8004280 <HAL_RCC_ClockConfig+0x1ec>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004280 <HAL_RCC_ClockConfig+0x1ec>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0cf      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d010      	beq.n	8004106 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	4b66      	ldr	r3, [pc, #408]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d908      	bls.n	8004106 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f4:	4b63      	ldr	r3, [pc, #396]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4960      	ldr	r1, [pc, #384]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04c      	beq.n	80041ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411a:	4b5a      	ldr	r3, [pc, #360]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d121      	bne.n	800416a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e0a6      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004132:	4b54      	ldr	r3, [pc, #336]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d115      	bne.n	800416a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e09a      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800414a:	4b4e      	ldr	r3, [pc, #312]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e08e      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800415a:	4b4a      	ldr	r3, [pc, #296]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e086      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800416a:	4b46      	ldr	r3, [pc, #280]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f023 0203 	bic.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4943      	ldr	r1, [pc, #268]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 8004178:	4313      	orrs	r3, r2
 800417a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417c:	f7fe fd6a 	bl	8002c54 <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	e00a      	b.n	800419a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004184:	f7fe fd66 	bl	8002c54 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e06e      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	4b3a      	ldr	r3, [pc, #232]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 020c 	and.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1eb      	bne.n	8004184 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d010      	beq.n	80041da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4b31      	ldr	r3, [pc, #196]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d208      	bcs.n	80041da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	492b      	ldr	r1, [pc, #172]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041da:	4b29      	ldr	r3, [pc, #164]	@ (8004280 <HAL_RCC_ClockConfig+0x1ec>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d210      	bcs.n	800420a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e8:	4b25      	ldr	r3, [pc, #148]	@ (8004280 <HAL_RCC_ClockConfig+0x1ec>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 0207 	bic.w	r2, r3, #7
 80041f0:	4923      	ldr	r1, [pc, #140]	@ (8004280 <HAL_RCC_ClockConfig+0x1ec>)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f8:	4b21      	ldr	r3, [pc, #132]	@ (8004280 <HAL_RCC_ClockConfig+0x1ec>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d001      	beq.n	800420a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e036      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004216:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	4918      	ldr	r1, [pc, #96]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 8004224:	4313      	orrs	r3, r2
 8004226:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d009      	beq.n	8004248 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004234:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4910      	ldr	r1, [pc, #64]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 8004244:	4313      	orrs	r3, r2
 8004246:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004248:	f000 f824 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 800424c:	4602      	mov	r2, r0
 800424e:	4b0d      	ldr	r3, [pc, #52]	@ (8004284 <HAL_RCC_ClockConfig+0x1f0>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	490b      	ldr	r1, [pc, #44]	@ (8004288 <HAL_RCC_ClockConfig+0x1f4>)
 800425a:	5ccb      	ldrb	r3, [r1, r3]
 800425c:	f003 031f 	and.w	r3, r3, #31
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
 8004264:	4a09      	ldr	r2, [pc, #36]	@ (800428c <HAL_RCC_ClockConfig+0x1f8>)
 8004266:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004268:	4b09      	ldr	r3, [pc, #36]	@ (8004290 <HAL_RCC_ClockConfig+0x1fc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe fca1 	bl	8002bb4 <HAL_InitTick>
 8004272:	4603      	mov	r3, r0
 8004274:	72fb      	strb	r3, [r7, #11]

  return status;
 8004276:	7afb      	ldrb	r3, [r7, #11]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40022000 	.word	0x40022000
 8004284:	40021000 	.word	0x40021000
 8004288:	08007968 	.word	0x08007968
 800428c:	20000004 	.word	0x20000004
 8004290:	20000008 	.word	0x20000008

08004294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	@ 0x24
 8004298:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	2300      	movs	r3, #0
 80042a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a2:	4b3e      	ldr	r3, [pc, #248]	@ (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ac:	4b3b      	ldr	r3, [pc, #236]	@ (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x34>
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b0c      	cmp	r3, #12
 80042c0:	d121      	bne.n	8004306 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d11e      	bne.n	8004306 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042c8:	4b34      	ldr	r3, [pc, #208]	@ (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042d4:	4b31      	ldr	r3, [pc, #196]	@ (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 80042d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e005      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042e4:	4b2d      	ldr	r3, [pc, #180]	@ (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042f0:	4a2b      	ldr	r2, [pc, #172]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10d      	bne.n	800431c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004304:	e00a      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b04      	cmp	r3, #4
 800430a:	d102      	bne.n	8004312 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800430c:	4b25      	ldr	r3, [pc, #148]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	e004      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d101      	bne.n	800431c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004318:	4b23      	ldr	r3, [pc, #140]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800431a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d134      	bne.n	800438c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004322:	4b1e      	ldr	r3, [pc, #120]	@ (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d003      	beq.n	800433a <HAL_RCC_GetSysClockFreq+0xa6>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d003      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0xac>
 8004338:	e005      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800433a:	4b1a      	ldr	r3, [pc, #104]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800433c:	617b      	str	r3, [r7, #20]
      break;
 800433e:	e005      	b.n	800434c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004340:	4b19      	ldr	r3, [pc, #100]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004342:	617b      	str	r3, [r7, #20]
      break;
 8004344:	e002      	b.n	800434c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	617b      	str	r3, [r7, #20]
      break;
 800434a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800434c:	4b13      	ldr	r3, [pc, #76]	@ (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	3301      	adds	r3, #1
 8004358:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800435a:	4b10      	ldr	r3, [pc, #64]	@ (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	fb03 f202 	mul.w	r2, r3, r2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004372:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	0e5b      	lsrs	r3, r3, #25
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	3301      	adds	r3, #1
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800438c:	69bb      	ldr	r3, [r7, #24]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3724      	adds	r7, #36	@ 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	08007980 	.word	0x08007980
 80043a4:	00f42400 	.word	0x00f42400
 80043a8:	007a1200 	.word	0x007a1200

080043ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b0:	4b03      	ldr	r3, [pc, #12]	@ (80043c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000004 	.word	0x20000004

080043c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043c8:	f7ff fff0 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b06      	ldr	r3, [pc, #24]	@ (80043e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4904      	ldr	r1, [pc, #16]	@ (80043ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	08007978 	.word	0x08007978

080043f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043f4:	f7ff ffda 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	0adb      	lsrs	r3, r3, #11
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	4904      	ldr	r1, [pc, #16]	@ (8004418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004406:	5ccb      	ldrb	r3, [r1, r3]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000
 8004418:	08007978 	.word	0x08007978

0800441c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004428:	4b2a      	ldr	r3, [pc, #168]	@ (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004434:	f7ff f968 	bl	8003708 <HAL_PWREx_GetVoltageRange>
 8004438:	6178      	str	r0, [r7, #20]
 800443a:	e014      	b.n	8004466 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800443c:	4b25      	ldr	r3, [pc, #148]	@ (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004440:	4a24      	ldr	r2, [pc, #144]	@ (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004446:	6593      	str	r3, [r2, #88]	@ 0x58
 8004448:	4b22      	ldr	r3, [pc, #136]	@ (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004454:	f7ff f958 	bl	8003708 <HAL_PWREx_GetVoltageRange>
 8004458:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800445a:	4b1e      	ldr	r3, [pc, #120]	@ (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445e:	4a1d      	ldr	r2, [pc, #116]	@ (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004464:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800446c:	d10b      	bne.n	8004486 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b80      	cmp	r3, #128	@ 0x80
 8004472:	d919      	bls.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2ba0      	cmp	r3, #160	@ 0xa0
 8004478:	d902      	bls.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800447a:	2302      	movs	r3, #2
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	e013      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004480:	2301      	movs	r3, #1
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	e010      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b80      	cmp	r3, #128	@ 0x80
 800448a:	d902      	bls.n	8004492 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800448c:	2303      	movs	r3, #3
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	e00a      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b80      	cmp	r3, #128	@ 0x80
 8004496:	d102      	bne.n	800449e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004498:	2302      	movs	r3, #2
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	e004      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b70      	cmp	r3, #112	@ 0x70
 80044a2:	d101      	bne.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044a4:	2301      	movs	r3, #1
 80044a6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044a8:	4b0b      	ldr	r3, [pc, #44]	@ (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f023 0207 	bic.w	r2, r3, #7
 80044b0:	4909      	ldr	r1, [pc, #36]	@ (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044b8:	4b07      	ldr	r3, [pc, #28]	@ (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d001      	beq.n	80044ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40022000 	.word	0x40022000

080044dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e4:	2300      	movs	r3, #0
 80044e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044e8:	2300      	movs	r3, #0
 80044ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 809e 	beq.w	8004636 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044fe:	4b46      	ldr	r3, [pc, #280]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00d      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004514:	4b40      	ldr	r3, [pc, #256]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004518:	4a3f      	ldr	r2, [pc, #252]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800451e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004520:	4b3d      	ldr	r3, [pc, #244]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452c:	2301      	movs	r3, #1
 800452e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004530:	4b3a      	ldr	r3, [pc, #232]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a39      	ldr	r2, [pc, #228]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800453c:	f7fe fb8a 	bl	8002c54 <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004542:	e009      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004544:	f7fe fb86 	bl	8002c54 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d902      	bls.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	74fb      	strb	r3, [r7, #19]
        break;
 8004556:	e005      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004558:	4b30      	ldr	r3, [pc, #192]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0ef      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d15a      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800456a:	4b2b      	ldr	r3, [pc, #172]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004570:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004574:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01e      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	429a      	cmp	r2, r3
 8004584:	d019      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004586:	4b24      	ldr	r3, [pc, #144]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004590:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004592:	4b21      	ldr	r3, [pc, #132]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004598:	4a1f      	ldr	r2, [pc, #124]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800459a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800459e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045b2:	4a19      	ldr	r2, [pc, #100]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d016      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fe fb46 	bl	8002c54 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ca:	e00b      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045cc:	f7fe fb42 	bl	8002c54 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045da:	4293      	cmp	r3, r2
 80045dc:	d902      	bls.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	74fb      	strb	r3, [r7, #19]
            break;
 80045e2:	e006      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0ec      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80045f2:	7cfb      	ldrb	r3, [r7, #19]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10b      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f8:	4b07      	ldr	r3, [pc, #28]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004606:	4904      	ldr	r1, [pc, #16]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800460e:	e009      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004610:	7cfb      	ldrb	r3, [r7, #19]
 8004612:	74bb      	strb	r3, [r7, #18]
 8004614:	e006      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004624:	7c7b      	ldrb	r3, [r7, #17]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462a:	4b6e      	ldr	r3, [pc, #440]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462e:	4a6d      	ldr	r2, [pc, #436]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004634:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004642:	4b68      	ldr	r3, [pc, #416]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004648:	f023 0203 	bic.w	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4964      	ldr	r1, [pc, #400]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004664:	4b5f      	ldr	r3, [pc, #380]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466a:	f023 020c 	bic.w	r2, r3, #12
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	495c      	ldr	r1, [pc, #368]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004686:	4b57      	ldr	r3, [pc, #348]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4953      	ldr	r1, [pc, #332]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046a8:	4b4e      	ldr	r3, [pc, #312]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	494b      	ldr	r1, [pc, #300]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ca:	4b46      	ldr	r3, [pc, #280]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	4942      	ldr	r1, [pc, #264]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046ec:	4b3d      	ldr	r3, [pc, #244]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	493a      	ldr	r1, [pc, #232]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800470e:	4b35      	ldr	r3, [pc, #212]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004714:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	4931      	ldr	r1, [pc, #196]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004730:	4b2c      	ldr	r3, [pc, #176]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004736:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	4929      	ldr	r1, [pc, #164]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004752:	4b24      	ldr	r3, [pc, #144]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004758:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	4920      	ldr	r1, [pc, #128]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d015      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004774:	4b1b      	ldr	r3, [pc, #108]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	4918      	ldr	r1, [pc, #96]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004792:	d105      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004794:	4b13      	ldr	r3, [pc, #76]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4a12      	ldr	r2, [pc, #72]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800479a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800479e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d015      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047ac:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ba:	490a      	ldr	r1, [pc, #40]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047ca:	d105      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047cc:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a04      	ldr	r2, [pc, #16]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000

080047e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e095      	b.n	8004926 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d108      	bne.n	8004814 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800480a:	d009      	beq.n	8004820 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	61da      	str	r2, [r3, #28]
 8004812:	e005      	b.n	8004820 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fd fdf0 	bl	8002420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004856:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004860:	d902      	bls.n	8004868 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e002      	b.n	800486e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800486c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004876:	d007      	beq.n	8004888 <HAL_SPI_Init+0xa0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004880:	d002      	beq.n	8004888 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ca:	ea42 0103 	orr.w	r1, r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	f003 0204 	and.w	r2, r3, #4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004904:	ea42 0103 	orr.w	r1, r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b088      	sub	sp, #32
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800493e:	f7fe f989 	bl	8002c54 <HAL_GetTick>
 8004942:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004944:	88fb      	ldrh	r3, [r7, #6]
 8004946:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d001      	beq.n	8004958 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004954:	2302      	movs	r3, #2
 8004956:	e15c      	b.n	8004c12 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_SPI_Transmit+0x36>
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e154      	b.n	8004c12 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_SPI_Transmit+0x48>
 8004972:	2302      	movs	r3, #2
 8004974:	e14d      	b.n	8004c12 <HAL_SPI_Transmit+0x2e4>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2203      	movs	r2, #3
 8004982:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c8:	d10f      	bne.n	80049ea <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	d007      	beq.n	8004a08 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a10:	d952      	bls.n	8004ab8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_SPI_Transmit+0xf2>
 8004a1a:	8b7b      	ldrh	r3, [r7, #26]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d145      	bne.n	8004aac <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	881a      	ldrh	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	1c9a      	adds	r2, r3, #2
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a44:	e032      	b.n	8004aac <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d112      	bne.n	8004a7a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a78:	e018      	b.n	8004aac <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a7a:	f7fe f8eb 	bl	8002c54 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d803      	bhi.n	8004a92 <HAL_SPI_Transmit+0x164>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d102      	bne.n	8004a98 <HAL_SPI_Transmit+0x16a>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e0b2      	b.n	8004c12 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1c7      	bne.n	8004a46 <HAL_SPI_Transmit+0x118>
 8004ab6:	e083      	b.n	8004bc0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_SPI_Transmit+0x198>
 8004ac0:	8b7b      	ldrh	r3, [r7, #26]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d177      	bne.n	8004bb6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d912      	bls.n	8004af6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad4:	881a      	ldrh	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae0:	1c9a      	adds	r2, r3, #2
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b02      	subs	r3, #2
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004af4:	e05f      	b.n	8004bb6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	7812      	ldrb	r2, [r2, #0]
 8004b02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b1c:	e04b      	b.n	8004bb6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d12b      	bne.n	8004b84 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d912      	bls.n	8004b5c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3a:	881a      	ldrh	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b46:	1c9a      	adds	r2, r3, #2
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b02      	subs	r3, #2
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b5a:	e02c      	b.n	8004bb6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	7812      	ldrb	r2, [r2, #0]
 8004b68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b82:	e018      	b.n	8004bb6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b84:	f7fe f866 	bl	8002c54 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d803      	bhi.n	8004b9c <HAL_SPI_Transmit+0x26e>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9a:	d102      	bne.n	8004ba2 <HAL_SPI_Transmit+0x274>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e02d      	b.n	8004c12 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1ae      	bne.n	8004b1e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 facb 	bl	8005160 <SPI_EndRxTxTransaction>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004c10:	2300      	movs	r3, #0
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d001      	beq.n	8004c3a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004c36:	2302      	movs	r3, #2
 8004c38:	e0d4      	b.n	8004de4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_SPI_Transmit_DMA+0x2a>
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e0cc      	b.n	8004de4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_SPI_Transmit_DMA+0x3c>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e0c5      	b.n	8004de4 <HAL_SPI_Transmit_DMA+0x1c8>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2203      	movs	r2, #3
 8004c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	88fa      	ldrh	r2, [r7, #6]
 8004c78:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004caa:	d10f      	bne.n	8004ccc <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	4a46      	ldr	r2, [pc, #280]	@ (8004dec <HAL_SPI_Transmit_DMA+0x1d0>)
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd8:	4a45      	ldr	r2, [pc, #276]	@ (8004df0 <HAL_SPI_Transmit_DMA+0x1d4>)
 8004cda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce0:	4a44      	ldr	r2, [pc, #272]	@ (8004df4 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004ce2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce8:	2200      	movs	r2, #0
 8004cea:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004cfa:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d04:	d82d      	bhi.n	8004d62 <HAL_SPI_Transmit_DMA+0x146>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d10:	d127      	bne.n	8004d62 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10f      	bne.n	8004d40 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d2e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d3e:	e010      	b.n	8004d62 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d4e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d78:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d7a:	f7fe f965 	bl	8003048 <HAL_DMA_Start_IT>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d88:	f043 0210 	orr.w	r2, r3, #16
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e023      	b.n	8004de4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da6:	2b40      	cmp	r3, #64	@ 0x40
 8004da8:	d007      	beq.n	8004dba <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004db8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0220 	orr.w	r2, r2, #32
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0202 	orr.w	r2, r2, #2
 8004de0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	08004ec7 	.word	0x08004ec7
 8004df0:	08004e21 	.word	0x08004e21
 8004df4:	08004ee3 	.word	0x08004ee3

08004df8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e2e:	f7fd ff11 	bl	8002c54 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	d03b      	beq.n	8004eba <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0220 	bic.w	r2, r2, #32
 8004e50:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0202 	bic.w	r2, r2, #2
 8004e60:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	2164      	movs	r1, #100	@ 0x64
 8004e66:	6978      	ldr	r0, [r7, #20]
 8004e68:	f000 f97a 	bl	8005160 <SPI_EndRxTxTransaction>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e76:	f043 0220 	orr.w	r2, r3, #32
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004eb2:	6978      	ldr	r0, [r7, #20]
 8004eb4:	f7ff ffaa 	bl	8004e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004eb8:	e002      	b.n	8004ec0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004eba:	6978      	ldr	r0, [r7, #20]
 8004ebc:	f7fd fa1d 	bl	80022fa <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff ff8f 	bl	8004df8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004eda:	bf00      	nop
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0203 	bic.w	r2, r2, #3
 8004efe:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f04:	f043 0210 	orr.w	r2, r3, #16
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff ff79 	bl	8004e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f1a:	bf00      	nop
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f34:	f7fd fe8e 	bl	8002c54 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	4413      	add	r3, r2
 8004f42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f44:	f7fd fe86 	bl	8002c54 <HAL_GetTick>
 8004f48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f4a:	4b39      	ldr	r3, [pc, #228]	@ (8005030 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	015b      	lsls	r3, r3, #5
 8004f50:	0d1b      	lsrs	r3, r3, #20
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	fb02 f303 	mul.w	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f5a:	e054      	b.n	8005006 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d050      	beq.n	8005006 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f64:	f7fd fe76 	bl	8002c54 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d902      	bls.n	8004f7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d13d      	bne.n	8004ff6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f92:	d111      	bne.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f9c:	d004      	beq.n	8004fa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa6:	d107      	bne.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fc0:	d10f      	bne.n	8004fe2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fe0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e017      	b.n	8005026 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	3b01      	subs	r3, #1
 8005004:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4013      	ands	r3, r2
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	429a      	cmp	r2, r3
 8005022:	d19b      	bne.n	8004f5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000004 	.word	0x20000004

08005034 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	@ 0x28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005046:	f7fd fe05 	bl	8002c54 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	4413      	add	r3, r2
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005056:	f7fd fdfd 	bl	8002c54 <HAL_GetTick>
 800505a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005064:	4b3d      	ldr	r3, [pc, #244]	@ (800515c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	00da      	lsls	r2, r3, #3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	0d1b      	lsrs	r3, r3, #20
 8005074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800507c:	e060      	b.n	8005140 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005084:	d107      	bne.n	8005096 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005094:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d050      	beq.n	8005140 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800509e:	f7fd fdd9 	bl	8002c54 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d902      	bls.n	80050b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d13d      	bne.n	8005130 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050cc:	d111      	bne.n	80050f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d6:	d004      	beq.n	80050e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e0:	d107      	bne.n	80050f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050fa:	d10f      	bne.n	800511c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800511a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e010      	b.n	8005152 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	3b01      	subs	r3, #1
 800513e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	d196      	bne.n	800507e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3728      	adds	r7, #40	@ 0x28
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000004 	.word	0x20000004

08005160 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2200      	movs	r2, #0
 8005174:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff ff5b 	bl	8005034 <SPI_WaitFifoStateUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e027      	b.n	80051e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2200      	movs	r2, #0
 800519c:	2180      	movs	r1, #128	@ 0x80
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff fec0 	bl	8004f24 <SPI_WaitFlagStateUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e014      	b.n	80051e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f7ff ff34 	bl	8005034 <SPI_WaitFifoStateUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d6:	f043 0220 	orr.w	r2, r3, #32
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e000      	b.n	80051e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e049      	b.n	8005292 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fd fa96 	bl	8002744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3304      	adds	r3, #4
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f000 f9ba 	bl	80055a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d001      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e03b      	b.n	800532c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a19      	ldr	r2, [pc, #100]	@ (8005338 <HAL_TIM_Base_Start_IT+0x9c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_TIM_Base_Start_IT+0x4e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052de:	d004      	beq.n	80052ea <HAL_TIM_Base_Start_IT+0x4e>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a15      	ldr	r2, [pc, #84]	@ (800533c <HAL_TIM_Base_Start_IT+0xa0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d115      	bne.n	8005316 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	4b13      	ldr	r3, [pc, #76]	@ (8005340 <HAL_TIM_Base_Start_IT+0xa4>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b06      	cmp	r3, #6
 80052fa:	d015      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0x8c>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005302:	d011      	beq.n	8005328 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005314:	e008      	b.n	8005328 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0201 	orr.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	e000      	b.n	800532a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005328:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40014000 	.word	0x40014000
 8005340:	00010007 	.word	0x00010007

08005344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d020      	beq.n	80053a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01b      	beq.n	80053a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0202 	mvn.w	r2, #2
 8005378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f8e9 	bl	8005566 <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f8db 	bl	8005552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f8ec 	bl	800557a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d020      	beq.n	80053f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01b      	beq.n	80053f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0204 	mvn.w	r2, #4
 80053c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8c3 	bl	8005566 <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8b5 	bl	8005552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f8c6 	bl	800557a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d020      	beq.n	8005440 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01b      	beq.n	8005440 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0208 	mvn.w	r2, #8
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2204      	movs	r2, #4
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f89d 	bl	8005566 <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f88f 	bl	8005552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f8a0 	bl	800557a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 0310 	and.w	r3, r3, #16
 8005446:	2b00      	cmp	r3, #0
 8005448:	d020      	beq.n	800548c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01b      	beq.n	800548c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0210 	mvn.w	r2, #16
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2208      	movs	r2, #8
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f877 	bl	8005566 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f869 	bl	8005552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f87a 	bl	800557a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00c      	beq.n	80054b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0201 	mvn.w	r2, #1
 80054a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fc ff30 	bl	8002310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00c      	beq.n	80054de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80054d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f943 	bl	8005764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00c      	beq.n	8005502 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f93b 	bl	8005778 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00c      	beq.n	8005526 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800551e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f834 	bl	800558e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00c      	beq.n	800554a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f06f 0220 	mvn.w	r2, #32
 8005542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f903 	bl	8005750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a30      	ldr	r2, [pc, #192]	@ (8005678 <TIM_Base_SetConfig+0xd4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_Base_SetConfig+0x20>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c2:	d108      	bne.n	80055d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a27      	ldr	r2, [pc, #156]	@ (8005678 <TIM_Base_SetConfig+0xd4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00b      	beq.n	80055f6 <TIM_Base_SetConfig+0x52>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e4:	d007      	beq.n	80055f6 <TIM_Base_SetConfig+0x52>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a24      	ldr	r2, [pc, #144]	@ (800567c <TIM_Base_SetConfig+0xd8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_Base_SetConfig+0x52>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a23      	ldr	r2, [pc, #140]	@ (8005680 <TIM_Base_SetConfig+0xdc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d108      	bne.n	8005608 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a12      	ldr	r2, [pc, #72]	@ (8005678 <TIM_Base_SetConfig+0xd4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d007      	beq.n	8005644 <TIM_Base_SetConfig+0xa0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a11      	ldr	r2, [pc, #68]	@ (800567c <TIM_Base_SetConfig+0xd8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_Base_SetConfig+0xa0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a10      	ldr	r2, [pc, #64]	@ (8005680 <TIM_Base_SetConfig+0xdc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d103      	bne.n	800564c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b01      	cmp	r3, #1
 800565c:	d105      	bne.n	800566a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	611a      	str	r2, [r3, #16]
  }
}
 800566a:	bf00      	nop
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40012c00 	.word	0x40012c00
 800567c:	40014000 	.word	0x40014000
 8005680:	40014400 	.word	0x40014400

08005684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005698:	2302      	movs	r3, #2
 800569a:	e04f      	b.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a21      	ldr	r2, [pc, #132]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d108      	bne.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80056cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a14      	ldr	r2, [pc, #80]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d009      	beq.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005704:	d004      	beq.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a10      	ldr	r2, [pc, #64]	@ (800574c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d10c      	bne.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005716:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	4313      	orrs	r3, r2
 8005720:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40012c00 	.word	0x40012c00
 800574c:	40014000 	.word	0x40014000

08005750 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e040      	b.n	8005820 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fd f84e 	bl	8002850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2224      	movs	r2, #36	@ 0x24
 80057b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0201 	bic.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fe36 	bl	8006444 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fbd9 	bl	8005f90 <UART_SetConfig>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e01b      	b.n	8005820 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 feb5 	bl	8006588 <UART_CheckIdleState>
 800581e:	4603      	mov	r3, r0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	@ 0x28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800583a:	2b20      	cmp	r3, #32
 800583c:	d165      	bne.n	800590a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_UART_Transmit_DMA+0x22>
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e05e      	b.n	800590c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2221      	movs	r2, #33	@ 0x21
 8005870:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005876:	2b00      	cmp	r3, #0
 8005878:	d027      	beq.n	80058ca <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587e:	4a25      	ldr	r2, [pc, #148]	@ (8005914 <HAL_UART_Transmit_DMA+0xec>)
 8005880:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005886:	4a24      	ldr	r2, [pc, #144]	@ (8005918 <HAL_UART_Transmit_DMA+0xf0>)
 8005888:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588e:	4a23      	ldr	r2, [pc, #140]	@ (800591c <HAL_UART_Transmit_DMA+0xf4>)
 8005890:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005896:	2200      	movs	r2, #0
 8005898:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a2:	4619      	mov	r1, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3328      	adds	r3, #40	@ 0x28
 80058aa:	461a      	mov	r2, r3
 80058ac:	88fb      	ldrh	r3, [r7, #6]
 80058ae:	f7fd fbcb 	bl	8003048 <HAL_DMA_Start_IT>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2210      	movs	r2, #16
 80058bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e020      	b.n	800590c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2240      	movs	r2, #64	@ 0x40
 80058d0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	613b      	str	r3, [r7, #16]
   return(result);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f2:	623a      	str	r2, [r7, #32]
 80058f4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	69f9      	ldr	r1, [r7, #28]
 80058f8:	6a3a      	ldr	r2, [r7, #32]
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e000      	b.n	800590c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800590a:	2302      	movs	r3, #2
  }
}
 800590c:	4618      	mov	r0, r3
 800590e:	3728      	adds	r7, #40	@ 0x28
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	08006a09 	.word	0x08006a09
 8005918:	08006aa3 	.word	0x08006aa3
 800591c:	08006c29 	.word	0x08006c29

08005920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b0ba      	sub	sp, #232	@ 0xe8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800594a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800594e:	4013      	ands	r3, r2
 8005950:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005958:	2b00      	cmp	r3, #0
 800595a:	d115      	bne.n	8005988 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800595c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00f      	beq.n	8005988 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d009      	beq.n	8005988 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 82ca 	beq.w	8005f12 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
      }
      return;
 8005986:	e2c4      	b.n	8005f12 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8117 	beq.w	8005bc0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800599e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80059a2:	4b85      	ldr	r3, [pc, #532]	@ (8005bb8 <HAL_UART_IRQHandler+0x298>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 810a 	beq.w	8005bc0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d011      	beq.n	80059dc <HAL_UART_IRQHandler+0xbc>
 80059b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00b      	beq.n	80059dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059d2:	f043 0201 	orr.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d011      	beq.n	8005a0c <HAL_UART_IRQHandler+0xec>
 80059e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2202      	movs	r2, #2
 80059fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a02:	f043 0204 	orr.w	r2, r3, #4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d011      	beq.n	8005a3c <HAL_UART_IRQHandler+0x11c>
 8005a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00b      	beq.n	8005a3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2204      	movs	r2, #4
 8005a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a32:	f043 0202 	orr.w	r2, r3, #2
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d017      	beq.n	8005a78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d105      	bne.n	8005a60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2208      	movs	r2, #8
 8005a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a6e:	f043 0208 	orr.w	r2, r3, #8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d012      	beq.n	8005aaa <HAL_UART_IRQHandler+0x18a>
 8005a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aa0:	f043 0220 	orr.w	r2, r3, #32
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8230 	beq.w	8005f16 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00d      	beq.n	8005ade <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af2:	2b40      	cmp	r3, #64	@ 0x40
 8005af4:	d005      	beq.n	8005b02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005afa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d04f      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 ff1c 	bl	8006940 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b12:	2b40      	cmp	r3, #64	@ 0x40
 8005b14:	d141      	bne.n	8005b9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1d9      	bne.n	8005b16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d013      	beq.n	8005b92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b6e:	4a13      	ldr	r2, [pc, #76]	@ (8005bbc <HAL_UART_IRQHandler+0x29c>)
 8005b70:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fd fb04 	bl	8003184 <HAL_DMA_Abort_IT>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d017      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b90:	e00f      	b.n	8005bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f9f2 	bl	8005f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	e00b      	b.n	8005bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f9ee 	bl	8005f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba0:	e007      	b.n	8005bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f9ea 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005bb0:	e1b1      	b.n	8005f16 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb2:	bf00      	nop
    return;
 8005bb4:	e1af      	b.n	8005f16 <HAL_UART_IRQHandler+0x5f6>
 8005bb6:	bf00      	nop
 8005bb8:	04000120 	.word	0x04000120
 8005bbc:	08006ca7 	.word	0x08006ca7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	f040 816a 	bne.w	8005e9e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bce:	f003 0310 	and.w	r3, r3, #16
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8163 	beq.w	8005e9e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 815c 	beq.w	8005e9e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2210      	movs	r2, #16
 8005bec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf8:	2b40      	cmp	r3, #64	@ 0x40
 8005bfa:	f040 80d4 	bne.w	8005da6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 80ad 	beq.w	8005d6e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	f080 80a5 	bcs.w	8005d6e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f040 8086 	bne.w	8005d4c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c6e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1da      	bne.n	8005c40 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3308      	adds	r3, #8
 8005c90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005cae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005cb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005cb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005cc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e1      	bne.n	8005c8a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3308      	adds	r3, #8
 8005ccc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005cea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005cf0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e3      	bne.n	8005cc6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d1c:	f023 0310 	bic.w	r3, r3, #16
 8005d20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e4      	bne.n	8005d0c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fd f9de 	bl	8003108 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fc fae2 	bl	8002330 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d6c:	e0d5      	b.n	8005f1a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	f040 80ce 	bne.w	8005f1a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	f040 80c5 	bne.w	8005f1a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fc fac6 	bl	8002330 <HAL_UARTEx_RxEventCallback>
      return;
 8005da4:	e0b9      	b.n	8005f1a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 80ab 	beq.w	8005f1e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80a6 	beq.w	8005f1e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005de6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005df6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e4      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e12:	e853 3f00 	ldrex	r3, [r3]
 8005e16:	623b      	str	r3, [r7, #32]
   return(result);
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3308      	adds	r3, #8
 8005e28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e3      	bne.n	8005e08 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f023 0310 	bic.w	r3, r3, #16
 8005e68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	69b9      	ldr	r1, [r7, #24]
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	617b      	str	r3, [r7, #20]
   return(result);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e4      	bne.n	8005e54 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fc fa4a 	bl	8002330 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e9c:	e03f      	b.n	8005f1e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00e      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x5a8>
 8005eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d008      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ebe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 ff30 	bl	8006d26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ec6:	e02d      	b.n	8005f24 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00e      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d008      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01c      	beq.n	8005f22 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
    }
    return;
 8005ef0:	e017      	b.n	8005f22 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d012      	beq.n	8005f24 <HAL_UART_IRQHandler+0x604>
 8005efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00c      	beq.n	8005f24 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fee1 	bl	8006cd2 <UART_EndTransmit_IT>
    return;
 8005f10:	e008      	b.n	8005f24 <HAL_UART_IRQHandler+0x604>
      return;
 8005f12:	bf00      	nop
 8005f14:	e006      	b.n	8005f24 <HAL_UART_IRQHandler+0x604>
    return;
 8005f16:	bf00      	nop
 8005f18:	e004      	b.n	8005f24 <HAL_UART_IRQHandler+0x604>
      return;
 8005f1a:	bf00      	nop
 8005f1c:	e002      	b.n	8005f24 <HAL_UART_IRQHandler+0x604>
      return;
 8005f1e:	bf00      	nop
 8005f20:	e000      	b.n	8005f24 <HAL_UART_IRQHandler+0x604>
    return;
 8005f22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005f24:	37e8      	adds	r7, #232	@ 0xe8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop

08005f2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f94:	b08a      	sub	sp, #40	@ 0x28
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	4b9e      	ldr	r3, [pc, #632]	@ (8006238 <UART_SetConfig+0x2a8>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a93      	ldr	r2, [pc, #588]	@ (800623c <UART_SetConfig+0x2ac>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800600c:	430a      	orrs	r2, r1
 800600e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a8a      	ldr	r2, [pc, #552]	@ (8006240 <UART_SetConfig+0x2b0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d126      	bne.n	8006068 <UART_SetConfig+0xd8>
 800601a:	4b8a      	ldr	r3, [pc, #552]	@ (8006244 <UART_SetConfig+0x2b4>)
 800601c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	2b03      	cmp	r3, #3
 8006026:	d81b      	bhi.n	8006060 <UART_SetConfig+0xd0>
 8006028:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <UART_SetConfig+0xa0>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006041 	.word	0x08006041
 8006034:	08006051 	.word	0x08006051
 8006038:	08006049 	.word	0x08006049
 800603c:	08006059 	.word	0x08006059
 8006040:	2301      	movs	r3, #1
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006046:	e0ab      	b.n	80061a0 <UART_SetConfig+0x210>
 8006048:	2302      	movs	r3, #2
 800604a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800604e:	e0a7      	b.n	80061a0 <UART_SetConfig+0x210>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006056:	e0a3      	b.n	80061a0 <UART_SetConfig+0x210>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800605e:	e09f      	b.n	80061a0 <UART_SetConfig+0x210>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006066:	e09b      	b.n	80061a0 <UART_SetConfig+0x210>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a76      	ldr	r2, [pc, #472]	@ (8006248 <UART_SetConfig+0x2b8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d138      	bne.n	80060e4 <UART_SetConfig+0x154>
 8006072:	4b74      	ldr	r3, [pc, #464]	@ (8006244 <UART_SetConfig+0x2b4>)
 8006074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006078:	f003 030c 	and.w	r3, r3, #12
 800607c:	2b0c      	cmp	r3, #12
 800607e:	d82d      	bhi.n	80060dc <UART_SetConfig+0x14c>
 8006080:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <UART_SetConfig+0xf8>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060bd 	.word	0x080060bd
 800608c:	080060dd 	.word	0x080060dd
 8006090:	080060dd 	.word	0x080060dd
 8006094:	080060dd 	.word	0x080060dd
 8006098:	080060cd 	.word	0x080060cd
 800609c:	080060dd 	.word	0x080060dd
 80060a0:	080060dd 	.word	0x080060dd
 80060a4:	080060dd 	.word	0x080060dd
 80060a8:	080060c5 	.word	0x080060c5
 80060ac:	080060dd 	.word	0x080060dd
 80060b0:	080060dd 	.word	0x080060dd
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060d5 	.word	0x080060d5
 80060bc:	2300      	movs	r3, #0
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c2:	e06d      	b.n	80061a0 <UART_SetConfig+0x210>
 80060c4:	2302      	movs	r3, #2
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ca:	e069      	b.n	80061a0 <UART_SetConfig+0x210>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d2:	e065      	b.n	80061a0 <UART_SetConfig+0x210>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060da:	e061      	b.n	80061a0 <UART_SetConfig+0x210>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060e2:	e05d      	b.n	80061a0 <UART_SetConfig+0x210>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a58      	ldr	r2, [pc, #352]	@ (800624c <UART_SetConfig+0x2bc>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d125      	bne.n	800613a <UART_SetConfig+0x1aa>
 80060ee:	4b55      	ldr	r3, [pc, #340]	@ (8006244 <UART_SetConfig+0x2b4>)
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060f8:	2b30      	cmp	r3, #48	@ 0x30
 80060fa:	d016      	beq.n	800612a <UART_SetConfig+0x19a>
 80060fc:	2b30      	cmp	r3, #48	@ 0x30
 80060fe:	d818      	bhi.n	8006132 <UART_SetConfig+0x1a2>
 8006100:	2b20      	cmp	r3, #32
 8006102:	d00a      	beq.n	800611a <UART_SetConfig+0x18a>
 8006104:	2b20      	cmp	r3, #32
 8006106:	d814      	bhi.n	8006132 <UART_SetConfig+0x1a2>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <UART_SetConfig+0x182>
 800610c:	2b10      	cmp	r3, #16
 800610e:	d008      	beq.n	8006122 <UART_SetConfig+0x192>
 8006110:	e00f      	b.n	8006132 <UART_SetConfig+0x1a2>
 8006112:	2300      	movs	r3, #0
 8006114:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006118:	e042      	b.n	80061a0 <UART_SetConfig+0x210>
 800611a:	2302      	movs	r3, #2
 800611c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006120:	e03e      	b.n	80061a0 <UART_SetConfig+0x210>
 8006122:	2304      	movs	r3, #4
 8006124:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006128:	e03a      	b.n	80061a0 <UART_SetConfig+0x210>
 800612a:	2308      	movs	r3, #8
 800612c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006130:	e036      	b.n	80061a0 <UART_SetConfig+0x210>
 8006132:	2310      	movs	r3, #16
 8006134:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006138:	e032      	b.n	80061a0 <UART_SetConfig+0x210>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a3f      	ldr	r2, [pc, #252]	@ (800623c <UART_SetConfig+0x2ac>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d12a      	bne.n	800619a <UART_SetConfig+0x20a>
 8006144:	4b3f      	ldr	r3, [pc, #252]	@ (8006244 <UART_SetConfig+0x2b4>)
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800614e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006152:	d01a      	beq.n	800618a <UART_SetConfig+0x1fa>
 8006154:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006158:	d81b      	bhi.n	8006192 <UART_SetConfig+0x202>
 800615a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800615e:	d00c      	beq.n	800617a <UART_SetConfig+0x1ea>
 8006160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006164:	d815      	bhi.n	8006192 <UART_SetConfig+0x202>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <UART_SetConfig+0x1e2>
 800616a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800616e:	d008      	beq.n	8006182 <UART_SetConfig+0x1f2>
 8006170:	e00f      	b.n	8006192 <UART_SetConfig+0x202>
 8006172:	2300      	movs	r3, #0
 8006174:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006178:	e012      	b.n	80061a0 <UART_SetConfig+0x210>
 800617a:	2302      	movs	r3, #2
 800617c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006180:	e00e      	b.n	80061a0 <UART_SetConfig+0x210>
 8006182:	2304      	movs	r3, #4
 8006184:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006188:	e00a      	b.n	80061a0 <UART_SetConfig+0x210>
 800618a:	2308      	movs	r3, #8
 800618c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006190:	e006      	b.n	80061a0 <UART_SetConfig+0x210>
 8006192:	2310      	movs	r3, #16
 8006194:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006198:	e002      	b.n	80061a0 <UART_SetConfig+0x210>
 800619a:	2310      	movs	r3, #16
 800619c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a25      	ldr	r2, [pc, #148]	@ (800623c <UART_SetConfig+0x2ac>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	f040 808a 	bne.w	80062c0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d824      	bhi.n	80061fe <UART_SetConfig+0x26e>
 80061b4:	a201      	add	r2, pc, #4	@ (adr r2, 80061bc <UART_SetConfig+0x22c>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061e1 	.word	0x080061e1
 80061c0:	080061ff 	.word	0x080061ff
 80061c4:	080061e9 	.word	0x080061e9
 80061c8:	080061ff 	.word	0x080061ff
 80061cc:	080061ef 	.word	0x080061ef
 80061d0:	080061ff 	.word	0x080061ff
 80061d4:	080061ff 	.word	0x080061ff
 80061d8:	080061ff 	.word	0x080061ff
 80061dc:	080061f7 	.word	0x080061f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e0:	f7fe f8f0 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 80061e4:	61f8      	str	r0, [r7, #28]
        break;
 80061e6:	e010      	b.n	800620a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e8:	4b19      	ldr	r3, [pc, #100]	@ (8006250 <UART_SetConfig+0x2c0>)
 80061ea:	61fb      	str	r3, [r7, #28]
        break;
 80061ec:	e00d      	b.n	800620a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ee:	f7fe f851 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 80061f2:	61f8      	str	r0, [r7, #28]
        break;
 80061f4:	e009      	b.n	800620a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061fa:	61fb      	str	r3, [r7, #28]
        break;
 80061fc:	e005      	b.n	800620a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006208:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8109 	beq.w	8006424 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	4413      	add	r3, r2
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	429a      	cmp	r2, r3
 8006220:	d305      	bcc.n	800622e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	429a      	cmp	r2, r3
 800622c:	d912      	bls.n	8006254 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006234:	e0f6      	b.n	8006424 <UART_SetConfig+0x494>
 8006236:	bf00      	nop
 8006238:	efff69f3 	.word	0xefff69f3
 800623c:	40008000 	.word	0x40008000
 8006240:	40013800 	.word	0x40013800
 8006244:	40021000 	.word	0x40021000
 8006248:	40004400 	.word	0x40004400
 800624c:	40004800 	.word	0x40004800
 8006250:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	2200      	movs	r2, #0
 8006258:	461c      	mov	r4, r3
 800625a:	4615      	mov	r5, r2
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	022b      	lsls	r3, r5, #8
 8006266:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800626a:	0222      	lsls	r2, r4, #8
 800626c:	68f9      	ldr	r1, [r7, #12]
 800626e:	6849      	ldr	r1, [r1, #4]
 8006270:	0849      	lsrs	r1, r1, #1
 8006272:	2000      	movs	r0, #0
 8006274:	4688      	mov	r8, r1
 8006276:	4681      	mov	r9, r0
 8006278:	eb12 0a08 	adds.w	sl, r2, r8
 800627c:	eb43 0b09 	adc.w	fp, r3, r9
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800628e:	4650      	mov	r0, sl
 8006290:	4659      	mov	r1, fp
 8006292:	f7fa faf3 	bl	800087c <__aeabi_uldivmod>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4613      	mov	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062a4:	d308      	bcc.n	80062b8 <UART_SetConfig+0x328>
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ac:	d204      	bcs.n	80062b8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	60da      	str	r2, [r3, #12]
 80062b6:	e0b5      	b.n	8006424 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062be:	e0b1      	b.n	8006424 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c8:	d15d      	bne.n	8006386 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80062ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d827      	bhi.n	8006322 <UART_SetConfig+0x392>
 80062d2:	a201      	add	r2, pc, #4	@ (adr r2, 80062d8 <UART_SetConfig+0x348>)
 80062d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d8:	080062fd 	.word	0x080062fd
 80062dc:	08006305 	.word	0x08006305
 80062e0:	0800630d 	.word	0x0800630d
 80062e4:	08006323 	.word	0x08006323
 80062e8:	08006313 	.word	0x08006313
 80062ec:	08006323 	.word	0x08006323
 80062f0:	08006323 	.word	0x08006323
 80062f4:	08006323 	.word	0x08006323
 80062f8:	0800631b 	.word	0x0800631b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062fc:	f7fe f862 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 8006300:	61f8      	str	r0, [r7, #28]
        break;
 8006302:	e014      	b.n	800632e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006304:	f7fe f874 	bl	80043f0 <HAL_RCC_GetPCLK2Freq>
 8006308:	61f8      	str	r0, [r7, #28]
        break;
 800630a:	e010      	b.n	800632e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800630c:	4b4c      	ldr	r3, [pc, #304]	@ (8006440 <UART_SetConfig+0x4b0>)
 800630e:	61fb      	str	r3, [r7, #28]
        break;
 8006310:	e00d      	b.n	800632e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006312:	f7fd ffbf 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8006316:	61f8      	str	r0, [r7, #28]
        break;
 8006318:	e009      	b.n	800632e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800631e:	61fb      	str	r3, [r7, #28]
        break;
 8006320:	e005      	b.n	800632e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800632c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d077      	beq.n	8006424 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	005a      	lsls	r2, r3, #1
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	441a      	add	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b0f      	cmp	r3, #15
 800634e:	d916      	bls.n	800637e <UART_SetConfig+0x3ee>
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006356:	d212      	bcs.n	800637e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f023 030f 	bic.w	r3, r3, #15
 8006360:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	b29b      	uxth	r3, r3
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	b29a      	uxth	r2, r3
 800636e:	8afb      	ldrh	r3, [r7, #22]
 8006370:	4313      	orrs	r3, r2
 8006372:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	8afa      	ldrh	r2, [r7, #22]
 800637a:	60da      	str	r2, [r3, #12]
 800637c:	e052      	b.n	8006424 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006384:	e04e      	b.n	8006424 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006386:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800638a:	2b08      	cmp	r3, #8
 800638c:	d827      	bhi.n	80063de <UART_SetConfig+0x44e>
 800638e:	a201      	add	r2, pc, #4	@ (adr r2, 8006394 <UART_SetConfig+0x404>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063b9 	.word	0x080063b9
 8006398:	080063c1 	.word	0x080063c1
 800639c:	080063c9 	.word	0x080063c9
 80063a0:	080063df 	.word	0x080063df
 80063a4:	080063cf 	.word	0x080063cf
 80063a8:	080063df 	.word	0x080063df
 80063ac:	080063df 	.word	0x080063df
 80063b0:	080063df 	.word	0x080063df
 80063b4:	080063d7 	.word	0x080063d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b8:	f7fe f804 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 80063bc:	61f8      	str	r0, [r7, #28]
        break;
 80063be:	e014      	b.n	80063ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c0:	f7fe f816 	bl	80043f0 <HAL_RCC_GetPCLK2Freq>
 80063c4:	61f8      	str	r0, [r7, #28]
        break;
 80063c6:	e010      	b.n	80063ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006440 <UART_SetConfig+0x4b0>)
 80063ca:	61fb      	str	r3, [r7, #28]
        break;
 80063cc:	e00d      	b.n	80063ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ce:	f7fd ff61 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 80063d2:	61f8      	str	r0, [r7, #28]
        break;
 80063d4:	e009      	b.n	80063ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063da:	61fb      	str	r3, [r7, #28]
        break;
 80063dc:	e005      	b.n	80063ea <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80063e8:	bf00      	nop
    }

    if (pclk != 0U)
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d019      	beq.n	8006424 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	085a      	lsrs	r2, r3, #1
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	441a      	add	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006402:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	2b0f      	cmp	r3, #15
 8006408:	d909      	bls.n	800641e <UART_SetConfig+0x48e>
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006410:	d205      	bcs.n	800641e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60da      	str	r2, [r3, #12]
 800641c:	e002      	b.n	8006424 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006430:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006434:	4618      	mov	r0, r3
 8006436:	3728      	adds	r7, #40	@ 0x28
 8006438:	46bd      	mov	sp, r7
 800643a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800643e:	bf00      	nop
 8006440:	00f42400 	.word	0x00f42400

08006444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01a      	beq.n	800655a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006542:	d10a      	bne.n	800655a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	605a      	str	r2, [r3, #4]
  }
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b098      	sub	sp, #96	@ 0x60
 800658c:	af02      	add	r7, sp, #8
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006598:	f7fc fb5c 	bl	8002c54 <HAL_GetTick>
 800659c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d12e      	bne.n	800660a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065b4:	2200      	movs	r2, #0
 80065b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f88c 	bl	80066d8 <UART_WaitOnFlagUntilTimeout>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d021      	beq.n	800660a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065da:	653b      	str	r3, [r7, #80]	@ 0x50
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80065e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e6      	bne.n	80065c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e062      	b.n	80066d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b04      	cmp	r3, #4
 8006616:	d149      	bne.n	80066ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006620:	2200      	movs	r2, #0
 8006622:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f856 	bl	80066d8 <UART_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d03c      	beq.n	80066ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	623b      	str	r3, [r7, #32]
   return(result);
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006650:	633b      	str	r3, [r7, #48]	@ 0x30
 8006652:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800665e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e6      	bne.n	8006632 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3308      	adds	r3, #8
 800666a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	60fb      	str	r3, [r7, #12]
   return(result);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0301 	bic.w	r3, r3, #1
 800667a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3308      	adds	r3, #8
 8006682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006684:	61fa      	str	r2, [r7, #28]
 8006686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	69b9      	ldr	r1, [r7, #24]
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	617b      	str	r3, [r7, #20]
   return(result);
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e5      	bne.n	8006664 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e011      	b.n	80066d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3758      	adds	r7, #88	@ 0x58
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	4613      	mov	r3, r2
 80066e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e8:	e04f      	b.n	800678a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f0:	d04b      	beq.n	800678a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f2:	f7fc faaf 	bl	8002c54 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d302      	bcc.n	8006708 <UART_WaitOnFlagUntilTimeout+0x30>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e04e      	b.n	80067aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b00      	cmp	r3, #0
 8006718:	d037      	beq.n	800678a <UART_WaitOnFlagUntilTimeout+0xb2>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b80      	cmp	r3, #128	@ 0x80
 800671e:	d034      	beq.n	800678a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b40      	cmp	r3, #64	@ 0x40
 8006724:	d031      	beq.n	800678a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b08      	cmp	r3, #8
 8006732:	d110      	bne.n	8006756 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2208      	movs	r2, #8
 800673a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f8ff 	bl	8006940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2208      	movs	r2, #8
 8006746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e029      	b.n	80067aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006764:	d111      	bne.n	800678a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800676e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f8e5 	bl	8006940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e00f      	b.n	80067aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4013      	ands	r3, r2
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	429a      	cmp	r2, r3
 8006798:	bf0c      	ite	eq
 800679a:	2301      	moveq	r3, #1
 800679c:	2300      	movne	r3, #0
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	461a      	mov	r2, r3
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d0a0      	beq.n	80066ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b096      	sub	sp, #88	@ 0x58
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	88fa      	ldrh	r2, [r7, #6]
 80067cc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2222      	movs	r2, #34	@ 0x22
 80067dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d028      	beq.n	800683a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ec:	4a3e      	ldr	r2, [pc, #248]	@ (80068e8 <UART_Start_Receive_DMA+0x134>)
 80067ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f4:	4a3d      	ldr	r2, [pc, #244]	@ (80068ec <UART_Start_Receive_DMA+0x138>)
 80067f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fc:	4a3c      	ldr	r2, [pc, #240]	@ (80068f0 <UART_Start_Receive_DMA+0x13c>)
 80067fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006804:	2200      	movs	r2, #0
 8006806:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3324      	adds	r3, #36	@ 0x24
 8006812:	4619      	mov	r1, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006818:	461a      	mov	r2, r3
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	f7fc fc14 	bl	8003048 <HAL_DMA_Start_IT>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2210      	movs	r2, #16
 800682a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e051      	b.n	80068de <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d018      	beq.n	8006874 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006856:	657b      	str	r3, [r7, #84]	@ 0x54
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006862:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800686e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e6      	bne.n	8006842 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3308      	adds	r3, #8
 800687a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006886:	f043 0301 	orr.w	r3, r3, #1
 800688a:	653b      	str	r3, [r7, #80]	@ 0x50
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3308      	adds	r3, #8
 8006892:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006894:	637a      	str	r2, [r7, #52]	@ 0x34
 8006896:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800689a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80068a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e5      	bne.n	8006874 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	613b      	str	r3, [r7, #16]
   return(result);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3308      	adds	r3, #8
 80068c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068c8:	623a      	str	r2, [r7, #32]
 80068ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	69f9      	ldr	r1, [r7, #28]
 80068ce:	6a3a      	ldr	r2, [r7, #32]
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e5      	bne.n	80068a8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3758      	adds	r7, #88	@ 0x58
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	08006abf 	.word	0x08006abf
 80068ec:	08006beb 	.word	0x08006beb
 80068f0:	08006c29 	.word	0x08006c29

080068f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b089      	sub	sp, #36	@ 0x24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	60bb      	str	r3, [r7, #8]
   return(result);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006910:	61fb      	str	r3, [r7, #28]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	61bb      	str	r3, [r7, #24]
 800691c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6979      	ldr	r1, [r7, #20]
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	613b      	str	r3, [r7, #16]
   return(result);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e6      	bne.n	80068fc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006934:	bf00      	nop
 8006936:	3724      	adds	r7, #36	@ 0x24
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006940:	b480      	push	{r7}
 8006942:	b095      	sub	sp, #84	@ 0x54
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800695c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006966:	643b      	str	r3, [r7, #64]	@ 0x40
 8006968:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800696c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e6      	bne.n	8006948 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3308      	adds	r3, #8
 8006980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	61fb      	str	r3, [r7, #28]
   return(result);
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3308      	adds	r3, #8
 8006998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800699a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800699c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e5      	bne.n	800697a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d118      	bne.n	80069e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f023 0310 	bic.w	r3, r3, #16
 80069ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6979      	ldr	r1, [r7, #20]
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	613b      	str	r3, [r7, #16]
   return(result);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e6      	bne.n	80069b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80069fc:	bf00      	nop
 80069fe:	3754      	adds	r7, #84	@ 0x54
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b090      	sub	sp, #64	@ 0x40
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a14:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d137      	bne.n	8006a94 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3308      	adds	r3, #8
 8006a4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e5      	bne.n	8006a2c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7e:	61fb      	str	r3, [r7, #28]
 8006a80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	69b9      	ldr	r1, [r7, #24]
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e6      	bne.n	8006a60 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a92:	e002      	b.n	8006a9a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006a94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006a96:	f7ff fa49 	bl	8005f2c <HAL_UART_TxCpltCallback>
}
 8006a9a:	bf00      	nop
 8006a9c:	3740      	adds	r7, #64	@ 0x40
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff fa45 	bl	8005f40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ab6:	bf00      	nop
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b09c      	sub	sp, #112	@ 0x70
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aca:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d171      	bne.n	8006bbe <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006af2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006af6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b02:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e6      	bne.n	8006ae2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b26:	f023 0301 	bic.w	r3, r3, #1
 8006b2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b34:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b36:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e5      	bne.n	8006b14 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	623b      	str	r3, [r7, #32]
   return(result);
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3308      	adds	r3, #8
 8006b66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b68:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e5      	bne.n	8006b48 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d118      	bne.n	8006bbe <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f023 0310 	bic.w	r3, r3, #16
 8006ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006baa:	61fb      	str	r3, [r7, #28]
 8006bac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	69b9      	ldr	r1, [r7, #24]
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	617b      	str	r3, [r7, #20]
   return(result);
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e6      	bne.n	8006b8c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d107      	bne.n	8006bdc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006bd6:	f7fb fbab 	bl	8002330 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bda:	e002      	b.n	8006be2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006bdc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006bde:	f7ff f9b9 	bl	8005f54 <HAL_UART_RxCpltCallback>
}
 8006be2:	bf00      	nop
 8006be4:	3770      	adds	r7, #112	@ 0x70
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d109      	bne.n	8006c1a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c0c:	085b      	lsrs	r3, r3, #1
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	4619      	mov	r1, r3
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7fb fb8c 	bl	8002330 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c18:	e002      	b.n	8006c20 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7ff f9a4 	bl	8005f68 <HAL_UART_RxHalfCpltCallback>
}
 8006c20:	bf00      	nop
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c34:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c3a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c4e:	2b80      	cmp	r3, #128	@ 0x80
 8006c50:	d109      	bne.n	8006c66 <UART_DMAError+0x3e>
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	2b21      	cmp	r3, #33	@ 0x21
 8006c56:	d106      	bne.n	8006c66 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006c60:	6978      	ldr	r0, [r7, #20]
 8006c62:	f7ff fe47 	bl	80068f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c70:	2b40      	cmp	r3, #64	@ 0x40
 8006c72:	d109      	bne.n	8006c88 <UART_DMAError+0x60>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b22      	cmp	r3, #34	@ 0x22
 8006c78:	d106      	bne.n	8006c88 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006c82:	6978      	ldr	r0, [r7, #20]
 8006c84:	f7ff fe5c 	bl	8006940 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c8e:	f043 0210 	orr.w	r2, r3, #16
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c98:	6978      	ldr	r0, [r7, #20]
 8006c9a:	f7ff f96f 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c9e:	bf00      	nop
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f7ff f959 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cca:	bf00      	nop
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b088      	sub	sp, #32
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6979      	ldr	r1, [r7, #20]
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	613b      	str	r3, [r7, #16]
   return(result);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e6      	bne.n	8006cda <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff f907 	bl	8005f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1e:	bf00      	nop
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b08c      	sub	sp, #48	@ 0x30
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	4613      	mov	r3, r2
 8006d46:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d142      	bne.n	8006dd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e03b      	b.n	8006dda <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	461a      	mov	r2, r3
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7ff fd1d 	bl	80067b4 <UART_Start_Receive_DMA>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006d80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d124      	bne.n	8006dd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d11d      	bne.n	8006dcc <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2210      	movs	r2, #16
 8006d96:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	617b      	str	r3, [r7, #20]
   return(result);
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f043 0310 	orr.w	r3, r3, #16
 8006dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6a39      	ldr	r1, [r7, #32]
 8006dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e6      	bne.n	8006d98 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8006dca:	e002      	b.n	8006dd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006dd6:	e000      	b.n	8006dda <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006dd8:	2302      	movs	r3, #2
  }
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3730      	adds	r7, #48	@ 0x30
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <siprintf>:
 8006de4:	b40e      	push	{r1, r2, r3}
 8006de6:	b500      	push	{lr}
 8006de8:	b09c      	sub	sp, #112	@ 0x70
 8006dea:	ab1d      	add	r3, sp, #116	@ 0x74
 8006dec:	9002      	str	r0, [sp, #8]
 8006dee:	9006      	str	r0, [sp, #24]
 8006df0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006df4:	4809      	ldr	r0, [pc, #36]	@ (8006e1c <siprintf+0x38>)
 8006df6:	9107      	str	r1, [sp, #28]
 8006df8:	9104      	str	r1, [sp, #16]
 8006dfa:	4909      	ldr	r1, [pc, #36]	@ (8006e20 <siprintf+0x3c>)
 8006dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e00:	9105      	str	r1, [sp, #20]
 8006e02:	6800      	ldr	r0, [r0, #0]
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	a902      	add	r1, sp, #8
 8006e08:	f000 f99c 	bl	8007144 <_svfiprintf_r>
 8006e0c:	9b02      	ldr	r3, [sp, #8]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	b01c      	add	sp, #112	@ 0x70
 8006e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e18:	b003      	add	sp, #12
 8006e1a:	4770      	bx	lr
 8006e1c:	20000010 	.word	0x20000010
 8006e20:	ffff0208 	.word	0xffff0208

08006e24 <memset>:
 8006e24:	4402      	add	r2, r0
 8006e26:	4603      	mov	r3, r0
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d100      	bne.n	8006e2e <memset+0xa>
 8006e2c:	4770      	bx	lr
 8006e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e32:	e7f9      	b.n	8006e28 <memset+0x4>

08006e34 <__errno>:
 8006e34:	4b01      	ldr	r3, [pc, #4]	@ (8006e3c <__errno+0x8>)
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20000010 	.word	0x20000010

08006e40 <__libc_init_array>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	4d0d      	ldr	r5, [pc, #52]	@ (8006e78 <__libc_init_array+0x38>)
 8006e44:	4c0d      	ldr	r4, [pc, #52]	@ (8006e7c <__libc_init_array+0x3c>)
 8006e46:	1b64      	subs	r4, r4, r5
 8006e48:	10a4      	asrs	r4, r4, #2
 8006e4a:	2600      	movs	r6, #0
 8006e4c:	42a6      	cmp	r6, r4
 8006e4e:	d109      	bne.n	8006e64 <__libc_init_array+0x24>
 8006e50:	4d0b      	ldr	r5, [pc, #44]	@ (8006e80 <__libc_init_array+0x40>)
 8006e52:	4c0c      	ldr	r4, [pc, #48]	@ (8006e84 <__libc_init_array+0x44>)
 8006e54:	f000 fc6e 	bl	8007734 <_init>
 8006e58:	1b64      	subs	r4, r4, r5
 8006e5a:	10a4      	asrs	r4, r4, #2
 8006e5c:	2600      	movs	r6, #0
 8006e5e:	42a6      	cmp	r6, r4
 8006e60:	d105      	bne.n	8006e6e <__libc_init_array+0x2e>
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e68:	4798      	blx	r3
 8006e6a:	3601      	adds	r6, #1
 8006e6c:	e7ee      	b.n	8006e4c <__libc_init_array+0xc>
 8006e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e72:	4798      	blx	r3
 8006e74:	3601      	adds	r6, #1
 8006e76:	e7f2      	b.n	8006e5e <__libc_init_array+0x1e>
 8006e78:	080079ec 	.word	0x080079ec
 8006e7c:	080079ec 	.word	0x080079ec
 8006e80:	080079ec 	.word	0x080079ec
 8006e84:	080079f4 	.word	0x080079f4

08006e88 <__retarget_lock_acquire_recursive>:
 8006e88:	4770      	bx	lr

08006e8a <__retarget_lock_release_recursive>:
 8006e8a:	4770      	bx	lr

08006e8c <strcpy>:
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e92:	f803 2b01 	strb.w	r2, [r3], #1
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	d1f9      	bne.n	8006e8e <strcpy+0x2>
 8006e9a:	4770      	bx	lr

08006e9c <_free_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	d041      	beq.n	8006f28 <_free_r+0x8c>
 8006ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ea8:	1f0c      	subs	r4, r1, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	bfb8      	it	lt
 8006eae:	18e4      	addlt	r4, r4, r3
 8006eb0:	f000 f8e0 	bl	8007074 <__malloc_lock>
 8006eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8006f2c <_free_r+0x90>)
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	b933      	cbnz	r3, 8006ec8 <_free_r+0x2c>
 8006eba:	6063      	str	r3, [r4, #4]
 8006ebc:	6014      	str	r4, [r2, #0]
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ec4:	f000 b8dc 	b.w	8007080 <__malloc_unlock>
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	d908      	bls.n	8006ede <_free_r+0x42>
 8006ecc:	6820      	ldr	r0, [r4, #0]
 8006ece:	1821      	adds	r1, r4, r0
 8006ed0:	428b      	cmp	r3, r1
 8006ed2:	bf01      	itttt	eq
 8006ed4:	6819      	ldreq	r1, [r3, #0]
 8006ed6:	685b      	ldreq	r3, [r3, #4]
 8006ed8:	1809      	addeq	r1, r1, r0
 8006eda:	6021      	streq	r1, [r4, #0]
 8006edc:	e7ed      	b.n	8006eba <_free_r+0x1e>
 8006ede:	461a      	mov	r2, r3
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	b10b      	cbz	r3, 8006ee8 <_free_r+0x4c>
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	d9fa      	bls.n	8006ede <_free_r+0x42>
 8006ee8:	6811      	ldr	r1, [r2, #0]
 8006eea:	1850      	adds	r0, r2, r1
 8006eec:	42a0      	cmp	r0, r4
 8006eee:	d10b      	bne.n	8006f08 <_free_r+0x6c>
 8006ef0:	6820      	ldr	r0, [r4, #0]
 8006ef2:	4401      	add	r1, r0
 8006ef4:	1850      	adds	r0, r2, r1
 8006ef6:	4283      	cmp	r3, r0
 8006ef8:	6011      	str	r1, [r2, #0]
 8006efa:	d1e0      	bne.n	8006ebe <_free_r+0x22>
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	6053      	str	r3, [r2, #4]
 8006f02:	4408      	add	r0, r1
 8006f04:	6010      	str	r0, [r2, #0]
 8006f06:	e7da      	b.n	8006ebe <_free_r+0x22>
 8006f08:	d902      	bls.n	8006f10 <_free_r+0x74>
 8006f0a:	230c      	movs	r3, #12
 8006f0c:	602b      	str	r3, [r5, #0]
 8006f0e:	e7d6      	b.n	8006ebe <_free_r+0x22>
 8006f10:	6820      	ldr	r0, [r4, #0]
 8006f12:	1821      	adds	r1, r4, r0
 8006f14:	428b      	cmp	r3, r1
 8006f16:	bf04      	itt	eq
 8006f18:	6819      	ldreq	r1, [r3, #0]
 8006f1a:	685b      	ldreq	r3, [r3, #4]
 8006f1c:	6063      	str	r3, [r4, #4]
 8006f1e:	bf04      	itt	eq
 8006f20:	1809      	addeq	r1, r1, r0
 8006f22:	6021      	streq	r1, [r4, #0]
 8006f24:	6054      	str	r4, [r2, #4]
 8006f26:	e7ca      	b.n	8006ebe <_free_r+0x22>
 8006f28:	bd38      	pop	{r3, r4, r5, pc}
 8006f2a:	bf00      	nop
 8006f2c:	2000185c 	.word	0x2000185c

08006f30 <sbrk_aligned>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	4e0f      	ldr	r6, [pc, #60]	@ (8006f70 <sbrk_aligned+0x40>)
 8006f34:	460c      	mov	r4, r1
 8006f36:	6831      	ldr	r1, [r6, #0]
 8006f38:	4605      	mov	r5, r0
 8006f3a:	b911      	cbnz	r1, 8006f42 <sbrk_aligned+0x12>
 8006f3c:	f000 fba6 	bl	800768c <_sbrk_r>
 8006f40:	6030      	str	r0, [r6, #0]
 8006f42:	4621      	mov	r1, r4
 8006f44:	4628      	mov	r0, r5
 8006f46:	f000 fba1 	bl	800768c <_sbrk_r>
 8006f4a:	1c43      	adds	r3, r0, #1
 8006f4c:	d103      	bne.n	8006f56 <sbrk_aligned+0x26>
 8006f4e:	f04f 34ff 	mov.w	r4, #4294967295
 8006f52:	4620      	mov	r0, r4
 8006f54:	bd70      	pop	{r4, r5, r6, pc}
 8006f56:	1cc4      	adds	r4, r0, #3
 8006f58:	f024 0403 	bic.w	r4, r4, #3
 8006f5c:	42a0      	cmp	r0, r4
 8006f5e:	d0f8      	beq.n	8006f52 <sbrk_aligned+0x22>
 8006f60:	1a21      	subs	r1, r4, r0
 8006f62:	4628      	mov	r0, r5
 8006f64:	f000 fb92 	bl	800768c <_sbrk_r>
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d1f2      	bne.n	8006f52 <sbrk_aligned+0x22>
 8006f6c:	e7ef      	b.n	8006f4e <sbrk_aligned+0x1e>
 8006f6e:	bf00      	nop
 8006f70:	20001858 	.word	0x20001858

08006f74 <_malloc_r>:
 8006f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f78:	1ccd      	adds	r5, r1, #3
 8006f7a:	f025 0503 	bic.w	r5, r5, #3
 8006f7e:	3508      	adds	r5, #8
 8006f80:	2d0c      	cmp	r5, #12
 8006f82:	bf38      	it	cc
 8006f84:	250c      	movcc	r5, #12
 8006f86:	2d00      	cmp	r5, #0
 8006f88:	4606      	mov	r6, r0
 8006f8a:	db01      	blt.n	8006f90 <_malloc_r+0x1c>
 8006f8c:	42a9      	cmp	r1, r5
 8006f8e:	d904      	bls.n	8006f9a <_malloc_r+0x26>
 8006f90:	230c      	movs	r3, #12
 8006f92:	6033      	str	r3, [r6, #0]
 8006f94:	2000      	movs	r0, #0
 8006f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007070 <_malloc_r+0xfc>
 8006f9e:	f000 f869 	bl	8007074 <__malloc_lock>
 8006fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa6:	461c      	mov	r4, r3
 8006fa8:	bb44      	cbnz	r4, 8006ffc <_malloc_r+0x88>
 8006faa:	4629      	mov	r1, r5
 8006fac:	4630      	mov	r0, r6
 8006fae:	f7ff ffbf 	bl	8006f30 <sbrk_aligned>
 8006fb2:	1c43      	adds	r3, r0, #1
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	d158      	bne.n	800706a <_malloc_r+0xf6>
 8006fb8:	f8d8 4000 	ldr.w	r4, [r8]
 8006fbc:	4627      	mov	r7, r4
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	d143      	bne.n	800704a <_malloc_r+0xd6>
 8006fc2:	2c00      	cmp	r4, #0
 8006fc4:	d04b      	beq.n	800705e <_malloc_r+0xea>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	4639      	mov	r1, r7
 8006fca:	4630      	mov	r0, r6
 8006fcc:	eb04 0903 	add.w	r9, r4, r3
 8006fd0:	f000 fb5c 	bl	800768c <_sbrk_r>
 8006fd4:	4581      	cmp	r9, r0
 8006fd6:	d142      	bne.n	800705e <_malloc_r+0xea>
 8006fd8:	6821      	ldr	r1, [r4, #0]
 8006fda:	1a6d      	subs	r5, r5, r1
 8006fdc:	4629      	mov	r1, r5
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7ff ffa6 	bl	8006f30 <sbrk_aligned>
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d03a      	beq.n	800705e <_malloc_r+0xea>
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	442b      	add	r3, r5
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	bb62      	cbnz	r2, 8007050 <_malloc_r+0xdc>
 8006ff6:	f8c8 7000 	str.w	r7, [r8]
 8006ffa:	e00f      	b.n	800701c <_malloc_r+0xa8>
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	1b52      	subs	r2, r2, r5
 8007000:	d420      	bmi.n	8007044 <_malloc_r+0xd0>
 8007002:	2a0b      	cmp	r2, #11
 8007004:	d917      	bls.n	8007036 <_malloc_r+0xc2>
 8007006:	1961      	adds	r1, r4, r5
 8007008:	42a3      	cmp	r3, r4
 800700a:	6025      	str	r5, [r4, #0]
 800700c:	bf18      	it	ne
 800700e:	6059      	strne	r1, [r3, #4]
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	bf08      	it	eq
 8007014:	f8c8 1000 	streq.w	r1, [r8]
 8007018:	5162      	str	r2, [r4, r5]
 800701a:	604b      	str	r3, [r1, #4]
 800701c:	4630      	mov	r0, r6
 800701e:	f000 f82f 	bl	8007080 <__malloc_unlock>
 8007022:	f104 000b 	add.w	r0, r4, #11
 8007026:	1d23      	adds	r3, r4, #4
 8007028:	f020 0007 	bic.w	r0, r0, #7
 800702c:	1ac2      	subs	r2, r0, r3
 800702e:	bf1c      	itt	ne
 8007030:	1a1b      	subne	r3, r3, r0
 8007032:	50a3      	strne	r3, [r4, r2]
 8007034:	e7af      	b.n	8006f96 <_malloc_r+0x22>
 8007036:	6862      	ldr	r2, [r4, #4]
 8007038:	42a3      	cmp	r3, r4
 800703a:	bf0c      	ite	eq
 800703c:	f8c8 2000 	streq.w	r2, [r8]
 8007040:	605a      	strne	r2, [r3, #4]
 8007042:	e7eb      	b.n	800701c <_malloc_r+0xa8>
 8007044:	4623      	mov	r3, r4
 8007046:	6864      	ldr	r4, [r4, #4]
 8007048:	e7ae      	b.n	8006fa8 <_malloc_r+0x34>
 800704a:	463c      	mov	r4, r7
 800704c:	687f      	ldr	r7, [r7, #4]
 800704e:	e7b6      	b.n	8006fbe <_malloc_r+0x4a>
 8007050:	461a      	mov	r2, r3
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	42a3      	cmp	r3, r4
 8007056:	d1fb      	bne.n	8007050 <_malloc_r+0xdc>
 8007058:	2300      	movs	r3, #0
 800705a:	6053      	str	r3, [r2, #4]
 800705c:	e7de      	b.n	800701c <_malloc_r+0xa8>
 800705e:	230c      	movs	r3, #12
 8007060:	6033      	str	r3, [r6, #0]
 8007062:	4630      	mov	r0, r6
 8007064:	f000 f80c 	bl	8007080 <__malloc_unlock>
 8007068:	e794      	b.n	8006f94 <_malloc_r+0x20>
 800706a:	6005      	str	r5, [r0, #0]
 800706c:	e7d6      	b.n	800701c <_malloc_r+0xa8>
 800706e:	bf00      	nop
 8007070:	2000185c 	.word	0x2000185c

08007074 <__malloc_lock>:
 8007074:	4801      	ldr	r0, [pc, #4]	@ (800707c <__malloc_lock+0x8>)
 8007076:	f7ff bf07 	b.w	8006e88 <__retarget_lock_acquire_recursive>
 800707a:	bf00      	nop
 800707c:	20001854 	.word	0x20001854

08007080 <__malloc_unlock>:
 8007080:	4801      	ldr	r0, [pc, #4]	@ (8007088 <__malloc_unlock+0x8>)
 8007082:	f7ff bf02 	b.w	8006e8a <__retarget_lock_release_recursive>
 8007086:	bf00      	nop
 8007088:	20001854 	.word	0x20001854

0800708c <__ssputs_r>:
 800708c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007090:	688e      	ldr	r6, [r1, #8]
 8007092:	461f      	mov	r7, r3
 8007094:	42be      	cmp	r6, r7
 8007096:	680b      	ldr	r3, [r1, #0]
 8007098:	4682      	mov	sl, r0
 800709a:	460c      	mov	r4, r1
 800709c:	4690      	mov	r8, r2
 800709e:	d82d      	bhi.n	80070fc <__ssputs_r+0x70>
 80070a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070a8:	d026      	beq.n	80070f8 <__ssputs_r+0x6c>
 80070aa:	6965      	ldr	r5, [r4, #20]
 80070ac:	6909      	ldr	r1, [r1, #16]
 80070ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070b2:	eba3 0901 	sub.w	r9, r3, r1
 80070b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070ba:	1c7b      	adds	r3, r7, #1
 80070bc:	444b      	add	r3, r9
 80070be:	106d      	asrs	r5, r5, #1
 80070c0:	429d      	cmp	r5, r3
 80070c2:	bf38      	it	cc
 80070c4:	461d      	movcc	r5, r3
 80070c6:	0553      	lsls	r3, r2, #21
 80070c8:	d527      	bpl.n	800711a <__ssputs_r+0x8e>
 80070ca:	4629      	mov	r1, r5
 80070cc:	f7ff ff52 	bl	8006f74 <_malloc_r>
 80070d0:	4606      	mov	r6, r0
 80070d2:	b360      	cbz	r0, 800712e <__ssputs_r+0xa2>
 80070d4:	6921      	ldr	r1, [r4, #16]
 80070d6:	464a      	mov	r2, r9
 80070d8:	f000 fae8 	bl	80076ac <memcpy>
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070e6:	81a3      	strh	r3, [r4, #12]
 80070e8:	6126      	str	r6, [r4, #16]
 80070ea:	6165      	str	r5, [r4, #20]
 80070ec:	444e      	add	r6, r9
 80070ee:	eba5 0509 	sub.w	r5, r5, r9
 80070f2:	6026      	str	r6, [r4, #0]
 80070f4:	60a5      	str	r5, [r4, #8]
 80070f6:	463e      	mov	r6, r7
 80070f8:	42be      	cmp	r6, r7
 80070fa:	d900      	bls.n	80070fe <__ssputs_r+0x72>
 80070fc:	463e      	mov	r6, r7
 80070fe:	6820      	ldr	r0, [r4, #0]
 8007100:	4632      	mov	r2, r6
 8007102:	4641      	mov	r1, r8
 8007104:	f000 faa8 	bl	8007658 <memmove>
 8007108:	68a3      	ldr	r3, [r4, #8]
 800710a:	1b9b      	subs	r3, r3, r6
 800710c:	60a3      	str	r3, [r4, #8]
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	4433      	add	r3, r6
 8007112:	6023      	str	r3, [r4, #0]
 8007114:	2000      	movs	r0, #0
 8007116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711a:	462a      	mov	r2, r5
 800711c:	f000 fad4 	bl	80076c8 <_realloc_r>
 8007120:	4606      	mov	r6, r0
 8007122:	2800      	cmp	r0, #0
 8007124:	d1e0      	bne.n	80070e8 <__ssputs_r+0x5c>
 8007126:	6921      	ldr	r1, [r4, #16]
 8007128:	4650      	mov	r0, sl
 800712a:	f7ff feb7 	bl	8006e9c <_free_r>
 800712e:	230c      	movs	r3, #12
 8007130:	f8ca 3000 	str.w	r3, [sl]
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	f04f 30ff 	mov.w	r0, #4294967295
 8007140:	e7e9      	b.n	8007116 <__ssputs_r+0x8a>
	...

08007144 <_svfiprintf_r>:
 8007144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	4698      	mov	r8, r3
 800714a:	898b      	ldrh	r3, [r1, #12]
 800714c:	061b      	lsls	r3, r3, #24
 800714e:	b09d      	sub	sp, #116	@ 0x74
 8007150:	4607      	mov	r7, r0
 8007152:	460d      	mov	r5, r1
 8007154:	4614      	mov	r4, r2
 8007156:	d510      	bpl.n	800717a <_svfiprintf_r+0x36>
 8007158:	690b      	ldr	r3, [r1, #16]
 800715a:	b973      	cbnz	r3, 800717a <_svfiprintf_r+0x36>
 800715c:	2140      	movs	r1, #64	@ 0x40
 800715e:	f7ff ff09 	bl	8006f74 <_malloc_r>
 8007162:	6028      	str	r0, [r5, #0]
 8007164:	6128      	str	r0, [r5, #16]
 8007166:	b930      	cbnz	r0, 8007176 <_svfiprintf_r+0x32>
 8007168:	230c      	movs	r3, #12
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	b01d      	add	sp, #116	@ 0x74
 8007172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007176:	2340      	movs	r3, #64	@ 0x40
 8007178:	616b      	str	r3, [r5, #20]
 800717a:	2300      	movs	r3, #0
 800717c:	9309      	str	r3, [sp, #36]	@ 0x24
 800717e:	2320      	movs	r3, #32
 8007180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007184:	f8cd 800c 	str.w	r8, [sp, #12]
 8007188:	2330      	movs	r3, #48	@ 0x30
 800718a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007328 <_svfiprintf_r+0x1e4>
 800718e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007192:	f04f 0901 	mov.w	r9, #1
 8007196:	4623      	mov	r3, r4
 8007198:	469a      	mov	sl, r3
 800719a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800719e:	b10a      	cbz	r2, 80071a4 <_svfiprintf_r+0x60>
 80071a0:	2a25      	cmp	r2, #37	@ 0x25
 80071a2:	d1f9      	bne.n	8007198 <_svfiprintf_r+0x54>
 80071a4:	ebba 0b04 	subs.w	fp, sl, r4
 80071a8:	d00b      	beq.n	80071c2 <_svfiprintf_r+0x7e>
 80071aa:	465b      	mov	r3, fp
 80071ac:	4622      	mov	r2, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	4638      	mov	r0, r7
 80071b2:	f7ff ff6b 	bl	800708c <__ssputs_r>
 80071b6:	3001      	adds	r0, #1
 80071b8:	f000 80a7 	beq.w	800730a <_svfiprintf_r+0x1c6>
 80071bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071be:	445a      	add	r2, fp
 80071c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80071c2:	f89a 3000 	ldrb.w	r3, [sl]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 809f 	beq.w	800730a <_svfiprintf_r+0x1c6>
 80071cc:	2300      	movs	r3, #0
 80071ce:	f04f 32ff 	mov.w	r2, #4294967295
 80071d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071d6:	f10a 0a01 	add.w	sl, sl, #1
 80071da:	9304      	str	r3, [sp, #16]
 80071dc:	9307      	str	r3, [sp, #28]
 80071de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80071e4:	4654      	mov	r4, sl
 80071e6:	2205      	movs	r2, #5
 80071e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ec:	484e      	ldr	r0, [pc, #312]	@ (8007328 <_svfiprintf_r+0x1e4>)
 80071ee:	f7f8 ffef 	bl	80001d0 <memchr>
 80071f2:	9a04      	ldr	r2, [sp, #16]
 80071f4:	b9d8      	cbnz	r0, 800722e <_svfiprintf_r+0xea>
 80071f6:	06d0      	lsls	r0, r2, #27
 80071f8:	bf44      	itt	mi
 80071fa:	2320      	movmi	r3, #32
 80071fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007200:	0711      	lsls	r1, r2, #28
 8007202:	bf44      	itt	mi
 8007204:	232b      	movmi	r3, #43	@ 0x2b
 8007206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800720a:	f89a 3000 	ldrb.w	r3, [sl]
 800720e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007210:	d015      	beq.n	800723e <_svfiprintf_r+0xfa>
 8007212:	9a07      	ldr	r2, [sp, #28]
 8007214:	4654      	mov	r4, sl
 8007216:	2000      	movs	r0, #0
 8007218:	f04f 0c0a 	mov.w	ip, #10
 800721c:	4621      	mov	r1, r4
 800721e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007222:	3b30      	subs	r3, #48	@ 0x30
 8007224:	2b09      	cmp	r3, #9
 8007226:	d94b      	bls.n	80072c0 <_svfiprintf_r+0x17c>
 8007228:	b1b0      	cbz	r0, 8007258 <_svfiprintf_r+0x114>
 800722a:	9207      	str	r2, [sp, #28]
 800722c:	e014      	b.n	8007258 <_svfiprintf_r+0x114>
 800722e:	eba0 0308 	sub.w	r3, r0, r8
 8007232:	fa09 f303 	lsl.w	r3, r9, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	46a2      	mov	sl, r4
 800723c:	e7d2      	b.n	80071e4 <_svfiprintf_r+0xa0>
 800723e:	9b03      	ldr	r3, [sp, #12]
 8007240:	1d19      	adds	r1, r3, #4
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	9103      	str	r1, [sp, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfbb      	ittet	lt
 800724a:	425b      	neglt	r3, r3
 800724c:	f042 0202 	orrlt.w	r2, r2, #2
 8007250:	9307      	strge	r3, [sp, #28]
 8007252:	9307      	strlt	r3, [sp, #28]
 8007254:	bfb8      	it	lt
 8007256:	9204      	strlt	r2, [sp, #16]
 8007258:	7823      	ldrb	r3, [r4, #0]
 800725a:	2b2e      	cmp	r3, #46	@ 0x2e
 800725c:	d10a      	bne.n	8007274 <_svfiprintf_r+0x130>
 800725e:	7863      	ldrb	r3, [r4, #1]
 8007260:	2b2a      	cmp	r3, #42	@ 0x2a
 8007262:	d132      	bne.n	80072ca <_svfiprintf_r+0x186>
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	1d1a      	adds	r2, r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	9203      	str	r2, [sp, #12]
 800726c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007270:	3402      	adds	r4, #2
 8007272:	9305      	str	r3, [sp, #20]
 8007274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007338 <_svfiprintf_r+0x1f4>
 8007278:	7821      	ldrb	r1, [r4, #0]
 800727a:	2203      	movs	r2, #3
 800727c:	4650      	mov	r0, sl
 800727e:	f7f8 ffa7 	bl	80001d0 <memchr>
 8007282:	b138      	cbz	r0, 8007294 <_svfiprintf_r+0x150>
 8007284:	9b04      	ldr	r3, [sp, #16]
 8007286:	eba0 000a 	sub.w	r0, r0, sl
 800728a:	2240      	movs	r2, #64	@ 0x40
 800728c:	4082      	lsls	r2, r0
 800728e:	4313      	orrs	r3, r2
 8007290:	3401      	adds	r4, #1
 8007292:	9304      	str	r3, [sp, #16]
 8007294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007298:	4824      	ldr	r0, [pc, #144]	@ (800732c <_svfiprintf_r+0x1e8>)
 800729a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800729e:	2206      	movs	r2, #6
 80072a0:	f7f8 ff96 	bl	80001d0 <memchr>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d036      	beq.n	8007316 <_svfiprintf_r+0x1d2>
 80072a8:	4b21      	ldr	r3, [pc, #132]	@ (8007330 <_svfiprintf_r+0x1ec>)
 80072aa:	bb1b      	cbnz	r3, 80072f4 <_svfiprintf_r+0x1b0>
 80072ac:	9b03      	ldr	r3, [sp, #12]
 80072ae:	3307      	adds	r3, #7
 80072b0:	f023 0307 	bic.w	r3, r3, #7
 80072b4:	3308      	adds	r3, #8
 80072b6:	9303      	str	r3, [sp, #12]
 80072b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ba:	4433      	add	r3, r6
 80072bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80072be:	e76a      	b.n	8007196 <_svfiprintf_r+0x52>
 80072c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80072c4:	460c      	mov	r4, r1
 80072c6:	2001      	movs	r0, #1
 80072c8:	e7a8      	b.n	800721c <_svfiprintf_r+0xd8>
 80072ca:	2300      	movs	r3, #0
 80072cc:	3401      	adds	r4, #1
 80072ce:	9305      	str	r3, [sp, #20]
 80072d0:	4619      	mov	r1, r3
 80072d2:	f04f 0c0a 	mov.w	ip, #10
 80072d6:	4620      	mov	r0, r4
 80072d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072dc:	3a30      	subs	r2, #48	@ 0x30
 80072de:	2a09      	cmp	r2, #9
 80072e0:	d903      	bls.n	80072ea <_svfiprintf_r+0x1a6>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0c6      	beq.n	8007274 <_svfiprintf_r+0x130>
 80072e6:	9105      	str	r1, [sp, #20]
 80072e8:	e7c4      	b.n	8007274 <_svfiprintf_r+0x130>
 80072ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ee:	4604      	mov	r4, r0
 80072f0:	2301      	movs	r3, #1
 80072f2:	e7f0      	b.n	80072d6 <_svfiprintf_r+0x192>
 80072f4:	ab03      	add	r3, sp, #12
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	462a      	mov	r2, r5
 80072fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007334 <_svfiprintf_r+0x1f0>)
 80072fc:	a904      	add	r1, sp, #16
 80072fe:	4638      	mov	r0, r7
 8007300:	f3af 8000 	nop.w
 8007304:	1c42      	adds	r2, r0, #1
 8007306:	4606      	mov	r6, r0
 8007308:	d1d6      	bne.n	80072b8 <_svfiprintf_r+0x174>
 800730a:	89ab      	ldrh	r3, [r5, #12]
 800730c:	065b      	lsls	r3, r3, #25
 800730e:	f53f af2d 	bmi.w	800716c <_svfiprintf_r+0x28>
 8007312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007314:	e72c      	b.n	8007170 <_svfiprintf_r+0x2c>
 8007316:	ab03      	add	r3, sp, #12
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	462a      	mov	r2, r5
 800731c:	4b05      	ldr	r3, [pc, #20]	@ (8007334 <_svfiprintf_r+0x1f0>)
 800731e:	a904      	add	r1, sp, #16
 8007320:	4638      	mov	r0, r7
 8007322:	f000 f879 	bl	8007418 <_printf_i>
 8007326:	e7ed      	b.n	8007304 <_svfiprintf_r+0x1c0>
 8007328:	080079b0 	.word	0x080079b0
 800732c:	080079ba 	.word	0x080079ba
 8007330:	00000000 	.word	0x00000000
 8007334:	0800708d 	.word	0x0800708d
 8007338:	080079b6 	.word	0x080079b6

0800733c <_printf_common>:
 800733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	4616      	mov	r6, r2
 8007342:	4698      	mov	r8, r3
 8007344:	688a      	ldr	r2, [r1, #8]
 8007346:	690b      	ldr	r3, [r1, #16]
 8007348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800734c:	4293      	cmp	r3, r2
 800734e:	bfb8      	it	lt
 8007350:	4613      	movlt	r3, r2
 8007352:	6033      	str	r3, [r6, #0]
 8007354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007358:	4607      	mov	r7, r0
 800735a:	460c      	mov	r4, r1
 800735c:	b10a      	cbz	r2, 8007362 <_printf_common+0x26>
 800735e:	3301      	adds	r3, #1
 8007360:	6033      	str	r3, [r6, #0]
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	0699      	lsls	r1, r3, #26
 8007366:	bf42      	ittt	mi
 8007368:	6833      	ldrmi	r3, [r6, #0]
 800736a:	3302      	addmi	r3, #2
 800736c:	6033      	strmi	r3, [r6, #0]
 800736e:	6825      	ldr	r5, [r4, #0]
 8007370:	f015 0506 	ands.w	r5, r5, #6
 8007374:	d106      	bne.n	8007384 <_printf_common+0x48>
 8007376:	f104 0a19 	add.w	sl, r4, #25
 800737a:	68e3      	ldr	r3, [r4, #12]
 800737c:	6832      	ldr	r2, [r6, #0]
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	42ab      	cmp	r3, r5
 8007382:	dc26      	bgt.n	80073d2 <_printf_common+0x96>
 8007384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007388:	6822      	ldr	r2, [r4, #0]
 800738a:	3b00      	subs	r3, #0
 800738c:	bf18      	it	ne
 800738e:	2301      	movne	r3, #1
 8007390:	0692      	lsls	r2, r2, #26
 8007392:	d42b      	bmi.n	80073ec <_printf_common+0xb0>
 8007394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007398:	4641      	mov	r1, r8
 800739a:	4638      	mov	r0, r7
 800739c:	47c8      	blx	r9
 800739e:	3001      	adds	r0, #1
 80073a0:	d01e      	beq.n	80073e0 <_printf_common+0xa4>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	6922      	ldr	r2, [r4, #16]
 80073a6:	f003 0306 	and.w	r3, r3, #6
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	bf02      	ittt	eq
 80073ae:	68e5      	ldreq	r5, [r4, #12]
 80073b0:	6833      	ldreq	r3, [r6, #0]
 80073b2:	1aed      	subeq	r5, r5, r3
 80073b4:	68a3      	ldr	r3, [r4, #8]
 80073b6:	bf0c      	ite	eq
 80073b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073bc:	2500      	movne	r5, #0
 80073be:	4293      	cmp	r3, r2
 80073c0:	bfc4      	itt	gt
 80073c2:	1a9b      	subgt	r3, r3, r2
 80073c4:	18ed      	addgt	r5, r5, r3
 80073c6:	2600      	movs	r6, #0
 80073c8:	341a      	adds	r4, #26
 80073ca:	42b5      	cmp	r5, r6
 80073cc:	d11a      	bne.n	8007404 <_printf_common+0xc8>
 80073ce:	2000      	movs	r0, #0
 80073d0:	e008      	b.n	80073e4 <_printf_common+0xa8>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4652      	mov	r2, sl
 80073d6:	4641      	mov	r1, r8
 80073d8:	4638      	mov	r0, r7
 80073da:	47c8      	blx	r9
 80073dc:	3001      	adds	r0, #1
 80073de:	d103      	bne.n	80073e8 <_printf_common+0xac>
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e8:	3501      	adds	r5, #1
 80073ea:	e7c6      	b.n	800737a <_printf_common+0x3e>
 80073ec:	18e1      	adds	r1, r4, r3
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	2030      	movs	r0, #48	@ 0x30
 80073f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073f6:	4422      	add	r2, r4
 80073f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007400:	3302      	adds	r3, #2
 8007402:	e7c7      	b.n	8007394 <_printf_common+0x58>
 8007404:	2301      	movs	r3, #1
 8007406:	4622      	mov	r2, r4
 8007408:	4641      	mov	r1, r8
 800740a:	4638      	mov	r0, r7
 800740c:	47c8      	blx	r9
 800740e:	3001      	adds	r0, #1
 8007410:	d0e6      	beq.n	80073e0 <_printf_common+0xa4>
 8007412:	3601      	adds	r6, #1
 8007414:	e7d9      	b.n	80073ca <_printf_common+0x8e>
	...

08007418 <_printf_i>:
 8007418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800741c:	7e0f      	ldrb	r7, [r1, #24]
 800741e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007420:	2f78      	cmp	r7, #120	@ 0x78
 8007422:	4691      	mov	r9, r2
 8007424:	4680      	mov	r8, r0
 8007426:	460c      	mov	r4, r1
 8007428:	469a      	mov	sl, r3
 800742a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800742e:	d807      	bhi.n	8007440 <_printf_i+0x28>
 8007430:	2f62      	cmp	r7, #98	@ 0x62
 8007432:	d80a      	bhi.n	800744a <_printf_i+0x32>
 8007434:	2f00      	cmp	r7, #0
 8007436:	f000 80d2 	beq.w	80075de <_printf_i+0x1c6>
 800743a:	2f58      	cmp	r7, #88	@ 0x58
 800743c:	f000 80b9 	beq.w	80075b2 <_printf_i+0x19a>
 8007440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007448:	e03a      	b.n	80074c0 <_printf_i+0xa8>
 800744a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800744e:	2b15      	cmp	r3, #21
 8007450:	d8f6      	bhi.n	8007440 <_printf_i+0x28>
 8007452:	a101      	add	r1, pc, #4	@ (adr r1, 8007458 <_printf_i+0x40>)
 8007454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007458:	080074b1 	.word	0x080074b1
 800745c:	080074c5 	.word	0x080074c5
 8007460:	08007441 	.word	0x08007441
 8007464:	08007441 	.word	0x08007441
 8007468:	08007441 	.word	0x08007441
 800746c:	08007441 	.word	0x08007441
 8007470:	080074c5 	.word	0x080074c5
 8007474:	08007441 	.word	0x08007441
 8007478:	08007441 	.word	0x08007441
 800747c:	08007441 	.word	0x08007441
 8007480:	08007441 	.word	0x08007441
 8007484:	080075c5 	.word	0x080075c5
 8007488:	080074ef 	.word	0x080074ef
 800748c:	0800757f 	.word	0x0800757f
 8007490:	08007441 	.word	0x08007441
 8007494:	08007441 	.word	0x08007441
 8007498:	080075e7 	.word	0x080075e7
 800749c:	08007441 	.word	0x08007441
 80074a0:	080074ef 	.word	0x080074ef
 80074a4:	08007441 	.word	0x08007441
 80074a8:	08007441 	.word	0x08007441
 80074ac:	08007587 	.word	0x08007587
 80074b0:	6833      	ldr	r3, [r6, #0]
 80074b2:	1d1a      	adds	r2, r3, #4
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6032      	str	r2, [r6, #0]
 80074b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074c0:	2301      	movs	r3, #1
 80074c2:	e09d      	b.n	8007600 <_printf_i+0x1e8>
 80074c4:	6833      	ldr	r3, [r6, #0]
 80074c6:	6820      	ldr	r0, [r4, #0]
 80074c8:	1d19      	adds	r1, r3, #4
 80074ca:	6031      	str	r1, [r6, #0]
 80074cc:	0606      	lsls	r6, r0, #24
 80074ce:	d501      	bpl.n	80074d4 <_printf_i+0xbc>
 80074d0:	681d      	ldr	r5, [r3, #0]
 80074d2:	e003      	b.n	80074dc <_printf_i+0xc4>
 80074d4:	0645      	lsls	r5, r0, #25
 80074d6:	d5fb      	bpl.n	80074d0 <_printf_i+0xb8>
 80074d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074dc:	2d00      	cmp	r5, #0
 80074de:	da03      	bge.n	80074e8 <_printf_i+0xd0>
 80074e0:	232d      	movs	r3, #45	@ 0x2d
 80074e2:	426d      	negs	r5, r5
 80074e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074e8:	4859      	ldr	r0, [pc, #356]	@ (8007650 <_printf_i+0x238>)
 80074ea:	230a      	movs	r3, #10
 80074ec:	e011      	b.n	8007512 <_printf_i+0xfa>
 80074ee:	6821      	ldr	r1, [r4, #0]
 80074f0:	6833      	ldr	r3, [r6, #0]
 80074f2:	0608      	lsls	r0, r1, #24
 80074f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80074f8:	d402      	bmi.n	8007500 <_printf_i+0xe8>
 80074fa:	0649      	lsls	r1, r1, #25
 80074fc:	bf48      	it	mi
 80074fe:	b2ad      	uxthmi	r5, r5
 8007500:	2f6f      	cmp	r7, #111	@ 0x6f
 8007502:	4853      	ldr	r0, [pc, #332]	@ (8007650 <_printf_i+0x238>)
 8007504:	6033      	str	r3, [r6, #0]
 8007506:	bf14      	ite	ne
 8007508:	230a      	movne	r3, #10
 800750a:	2308      	moveq	r3, #8
 800750c:	2100      	movs	r1, #0
 800750e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007512:	6866      	ldr	r6, [r4, #4]
 8007514:	60a6      	str	r6, [r4, #8]
 8007516:	2e00      	cmp	r6, #0
 8007518:	bfa2      	ittt	ge
 800751a:	6821      	ldrge	r1, [r4, #0]
 800751c:	f021 0104 	bicge.w	r1, r1, #4
 8007520:	6021      	strge	r1, [r4, #0]
 8007522:	b90d      	cbnz	r5, 8007528 <_printf_i+0x110>
 8007524:	2e00      	cmp	r6, #0
 8007526:	d04b      	beq.n	80075c0 <_printf_i+0x1a8>
 8007528:	4616      	mov	r6, r2
 800752a:	fbb5 f1f3 	udiv	r1, r5, r3
 800752e:	fb03 5711 	mls	r7, r3, r1, r5
 8007532:	5dc7      	ldrb	r7, [r0, r7]
 8007534:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007538:	462f      	mov	r7, r5
 800753a:	42bb      	cmp	r3, r7
 800753c:	460d      	mov	r5, r1
 800753e:	d9f4      	bls.n	800752a <_printf_i+0x112>
 8007540:	2b08      	cmp	r3, #8
 8007542:	d10b      	bne.n	800755c <_printf_i+0x144>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	07df      	lsls	r7, r3, #31
 8007548:	d508      	bpl.n	800755c <_printf_i+0x144>
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	6861      	ldr	r1, [r4, #4]
 800754e:	4299      	cmp	r1, r3
 8007550:	bfde      	ittt	le
 8007552:	2330      	movle	r3, #48	@ 0x30
 8007554:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007558:	f106 36ff 	addle.w	r6, r6, #4294967295
 800755c:	1b92      	subs	r2, r2, r6
 800755e:	6122      	str	r2, [r4, #16]
 8007560:	f8cd a000 	str.w	sl, [sp]
 8007564:	464b      	mov	r3, r9
 8007566:	aa03      	add	r2, sp, #12
 8007568:	4621      	mov	r1, r4
 800756a:	4640      	mov	r0, r8
 800756c:	f7ff fee6 	bl	800733c <_printf_common>
 8007570:	3001      	adds	r0, #1
 8007572:	d14a      	bne.n	800760a <_printf_i+0x1f2>
 8007574:	f04f 30ff 	mov.w	r0, #4294967295
 8007578:	b004      	add	sp, #16
 800757a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	f043 0320 	orr.w	r3, r3, #32
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	4833      	ldr	r0, [pc, #204]	@ (8007654 <_printf_i+0x23c>)
 8007588:	2778      	movs	r7, #120	@ 0x78
 800758a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	6831      	ldr	r1, [r6, #0]
 8007592:	061f      	lsls	r7, r3, #24
 8007594:	f851 5b04 	ldr.w	r5, [r1], #4
 8007598:	d402      	bmi.n	80075a0 <_printf_i+0x188>
 800759a:	065f      	lsls	r7, r3, #25
 800759c:	bf48      	it	mi
 800759e:	b2ad      	uxthmi	r5, r5
 80075a0:	6031      	str	r1, [r6, #0]
 80075a2:	07d9      	lsls	r1, r3, #31
 80075a4:	bf44      	itt	mi
 80075a6:	f043 0320 	orrmi.w	r3, r3, #32
 80075aa:	6023      	strmi	r3, [r4, #0]
 80075ac:	b11d      	cbz	r5, 80075b6 <_printf_i+0x19e>
 80075ae:	2310      	movs	r3, #16
 80075b0:	e7ac      	b.n	800750c <_printf_i+0xf4>
 80075b2:	4827      	ldr	r0, [pc, #156]	@ (8007650 <_printf_i+0x238>)
 80075b4:	e7e9      	b.n	800758a <_printf_i+0x172>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	f023 0320 	bic.w	r3, r3, #32
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	e7f6      	b.n	80075ae <_printf_i+0x196>
 80075c0:	4616      	mov	r6, r2
 80075c2:	e7bd      	b.n	8007540 <_printf_i+0x128>
 80075c4:	6833      	ldr	r3, [r6, #0]
 80075c6:	6825      	ldr	r5, [r4, #0]
 80075c8:	6961      	ldr	r1, [r4, #20]
 80075ca:	1d18      	adds	r0, r3, #4
 80075cc:	6030      	str	r0, [r6, #0]
 80075ce:	062e      	lsls	r6, r5, #24
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	d501      	bpl.n	80075d8 <_printf_i+0x1c0>
 80075d4:	6019      	str	r1, [r3, #0]
 80075d6:	e002      	b.n	80075de <_printf_i+0x1c6>
 80075d8:	0668      	lsls	r0, r5, #25
 80075da:	d5fb      	bpl.n	80075d4 <_printf_i+0x1bc>
 80075dc:	8019      	strh	r1, [r3, #0]
 80075de:	2300      	movs	r3, #0
 80075e0:	6123      	str	r3, [r4, #16]
 80075e2:	4616      	mov	r6, r2
 80075e4:	e7bc      	b.n	8007560 <_printf_i+0x148>
 80075e6:	6833      	ldr	r3, [r6, #0]
 80075e8:	1d1a      	adds	r2, r3, #4
 80075ea:	6032      	str	r2, [r6, #0]
 80075ec:	681e      	ldr	r6, [r3, #0]
 80075ee:	6862      	ldr	r2, [r4, #4]
 80075f0:	2100      	movs	r1, #0
 80075f2:	4630      	mov	r0, r6
 80075f4:	f7f8 fdec 	bl	80001d0 <memchr>
 80075f8:	b108      	cbz	r0, 80075fe <_printf_i+0x1e6>
 80075fa:	1b80      	subs	r0, r0, r6
 80075fc:	6060      	str	r0, [r4, #4]
 80075fe:	6863      	ldr	r3, [r4, #4]
 8007600:	6123      	str	r3, [r4, #16]
 8007602:	2300      	movs	r3, #0
 8007604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007608:	e7aa      	b.n	8007560 <_printf_i+0x148>
 800760a:	6923      	ldr	r3, [r4, #16]
 800760c:	4632      	mov	r2, r6
 800760e:	4649      	mov	r1, r9
 8007610:	4640      	mov	r0, r8
 8007612:	47d0      	blx	sl
 8007614:	3001      	adds	r0, #1
 8007616:	d0ad      	beq.n	8007574 <_printf_i+0x15c>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	079b      	lsls	r3, r3, #30
 800761c:	d413      	bmi.n	8007646 <_printf_i+0x22e>
 800761e:	68e0      	ldr	r0, [r4, #12]
 8007620:	9b03      	ldr	r3, [sp, #12]
 8007622:	4298      	cmp	r0, r3
 8007624:	bfb8      	it	lt
 8007626:	4618      	movlt	r0, r3
 8007628:	e7a6      	b.n	8007578 <_printf_i+0x160>
 800762a:	2301      	movs	r3, #1
 800762c:	4632      	mov	r2, r6
 800762e:	4649      	mov	r1, r9
 8007630:	4640      	mov	r0, r8
 8007632:	47d0      	blx	sl
 8007634:	3001      	adds	r0, #1
 8007636:	d09d      	beq.n	8007574 <_printf_i+0x15c>
 8007638:	3501      	adds	r5, #1
 800763a:	68e3      	ldr	r3, [r4, #12]
 800763c:	9903      	ldr	r1, [sp, #12]
 800763e:	1a5b      	subs	r3, r3, r1
 8007640:	42ab      	cmp	r3, r5
 8007642:	dcf2      	bgt.n	800762a <_printf_i+0x212>
 8007644:	e7eb      	b.n	800761e <_printf_i+0x206>
 8007646:	2500      	movs	r5, #0
 8007648:	f104 0619 	add.w	r6, r4, #25
 800764c:	e7f5      	b.n	800763a <_printf_i+0x222>
 800764e:	bf00      	nop
 8007650:	080079c1 	.word	0x080079c1
 8007654:	080079d2 	.word	0x080079d2

08007658 <memmove>:
 8007658:	4288      	cmp	r0, r1
 800765a:	b510      	push	{r4, lr}
 800765c:	eb01 0402 	add.w	r4, r1, r2
 8007660:	d902      	bls.n	8007668 <memmove+0x10>
 8007662:	4284      	cmp	r4, r0
 8007664:	4623      	mov	r3, r4
 8007666:	d807      	bhi.n	8007678 <memmove+0x20>
 8007668:	1e43      	subs	r3, r0, #1
 800766a:	42a1      	cmp	r1, r4
 800766c:	d008      	beq.n	8007680 <memmove+0x28>
 800766e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007672:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007676:	e7f8      	b.n	800766a <memmove+0x12>
 8007678:	4402      	add	r2, r0
 800767a:	4601      	mov	r1, r0
 800767c:	428a      	cmp	r2, r1
 800767e:	d100      	bne.n	8007682 <memmove+0x2a>
 8007680:	bd10      	pop	{r4, pc}
 8007682:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007686:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800768a:	e7f7      	b.n	800767c <memmove+0x24>

0800768c <_sbrk_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4d06      	ldr	r5, [pc, #24]	@ (80076a8 <_sbrk_r+0x1c>)
 8007690:	2300      	movs	r3, #0
 8007692:	4604      	mov	r4, r0
 8007694:	4608      	mov	r0, r1
 8007696:	602b      	str	r3, [r5, #0]
 8007698:	f7fa ffd6 	bl	8002648 <_sbrk>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_sbrk_r+0x1a>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_sbrk_r+0x1a>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	20001850 	.word	0x20001850

080076ac <memcpy>:
 80076ac:	440a      	add	r2, r1
 80076ae:	4291      	cmp	r1, r2
 80076b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076b4:	d100      	bne.n	80076b8 <memcpy+0xc>
 80076b6:	4770      	bx	lr
 80076b8:	b510      	push	{r4, lr}
 80076ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076c2:	4291      	cmp	r1, r2
 80076c4:	d1f9      	bne.n	80076ba <memcpy+0xe>
 80076c6:	bd10      	pop	{r4, pc}

080076c8 <_realloc_r>:
 80076c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076cc:	4680      	mov	r8, r0
 80076ce:	4615      	mov	r5, r2
 80076d0:	460c      	mov	r4, r1
 80076d2:	b921      	cbnz	r1, 80076de <_realloc_r+0x16>
 80076d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076d8:	4611      	mov	r1, r2
 80076da:	f7ff bc4b 	b.w	8006f74 <_malloc_r>
 80076de:	b92a      	cbnz	r2, 80076ec <_realloc_r+0x24>
 80076e0:	f7ff fbdc 	bl	8006e9c <_free_r>
 80076e4:	2400      	movs	r4, #0
 80076e6:	4620      	mov	r0, r4
 80076e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ec:	f000 f81a 	bl	8007724 <_malloc_usable_size_r>
 80076f0:	4285      	cmp	r5, r0
 80076f2:	4606      	mov	r6, r0
 80076f4:	d802      	bhi.n	80076fc <_realloc_r+0x34>
 80076f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80076fa:	d8f4      	bhi.n	80076e6 <_realloc_r+0x1e>
 80076fc:	4629      	mov	r1, r5
 80076fe:	4640      	mov	r0, r8
 8007700:	f7ff fc38 	bl	8006f74 <_malloc_r>
 8007704:	4607      	mov	r7, r0
 8007706:	2800      	cmp	r0, #0
 8007708:	d0ec      	beq.n	80076e4 <_realloc_r+0x1c>
 800770a:	42b5      	cmp	r5, r6
 800770c:	462a      	mov	r2, r5
 800770e:	4621      	mov	r1, r4
 8007710:	bf28      	it	cs
 8007712:	4632      	movcs	r2, r6
 8007714:	f7ff ffca 	bl	80076ac <memcpy>
 8007718:	4621      	mov	r1, r4
 800771a:	4640      	mov	r0, r8
 800771c:	f7ff fbbe 	bl	8006e9c <_free_r>
 8007720:	463c      	mov	r4, r7
 8007722:	e7e0      	b.n	80076e6 <_realloc_r+0x1e>

08007724 <_malloc_usable_size_r>:
 8007724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007728:	1f18      	subs	r0, r3, #4
 800772a:	2b00      	cmp	r3, #0
 800772c:	bfbc      	itt	lt
 800772e:	580b      	ldrlt	r3, [r1, r0]
 8007730:	18c0      	addlt	r0, r0, r3
 8007732:	4770      	bx	lr

08007734 <_init>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	bf00      	nop
 8007738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773a:	bc08      	pop	{r3}
 800773c:	469e      	mov	lr, r3
 800773e:	4770      	bx	lr

08007740 <_fini>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	bf00      	nop
 8007744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007746:	bc08      	pop	{r3}
 8007748:	469e      	mov	lr, r3
 800774a:	4770      	bx	lr
