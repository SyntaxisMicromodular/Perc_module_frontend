
Perc_module_frontend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004330  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  080044bc  080044bc  000054bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f8  080046f8  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080046f8  080046f8  000056f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004700  08004700  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004700  08004700  00005700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004704  08004704  00005704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004708  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a00  20000010  08004718  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a10  08004718  00006a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147a0  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c91  00000000  00000000  0001a7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  0001d478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3f  00000000  00000000  0001e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e557  00000000  00000000  0001ec17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012165  00000000  00000000  0003d16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac29e  00000000  00000000  0004f2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb571  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f4  00000000  00000000  000fb5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000feaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080044a4 	.word	0x080044a4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	080044a4 	.word	0x080044a4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	font = font_t;
 80004c4:	4a04      	ldr	r2, [pc, #16]	@ (80004d8 <GFX_SetFont+0x1c>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	6013      	str	r3, [r2, #0]
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	2000002c 	.word	0x2000002c

080004dc <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <GFX_SetFontSize+0x16>
		size = size_t;
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <GFX_SetFontSize+0x24>)
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	7013      	strb	r3, [r2, #0]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000

08000504 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b089      	sub	sp, #36	@ 0x24
 8000508:	af02      	add	r7, sp, #8
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	4611      	mov	r1, r2
 8000510:	461a      	mov	r2, r3
 8000512:	460b      	mov	r3, r1
 8000514:	71fb      	strb	r3, [r7, #7]
 8000516:	4613      	mov	r3, r2
 8000518:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b7e      	cmp	r3, #126	@ 0x7e
 800051e:	f200 80a3 	bhi.w	8000668 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ )
 8000522:	2300      	movs	r3, #0
 8000524:	75fb      	strb	r3, [r7, #23]
 8000526:	e096      	b.n	8000656 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2];
 8000528:	4b51      	ldr	r3, [pc, #324]	@ (8000670 <GFX_DrawChar+0x16c>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	3b20      	subs	r3, #32
 8000530:	494f      	ldr	r1, [pc, #316]	@ (8000670 <GFX_DrawChar+0x16c>)
 8000532:	6809      	ldr	r1, [r1, #0]
 8000534:	3101      	adds	r1, #1
 8000536:	7809      	ldrb	r1, [r1, #0]
 8000538:	fb03 f101 	mul.w	r1, r3, r1
 800053c:	7dfb      	ldrb	r3, [r7, #23]
 800053e:	440b      	add	r3, r1
 8000540:	3302      	adds	r3, #2
 8000542:	4413      	add	r3, r2
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 8000548:	2300      	movs	r3, #0
 800054a:	757b      	strb	r3, [r7, #21]
 800054c:	e078      	b.n	8000640 <GFX_DrawChar+0x13c>
        {
            if(line & 1)
 800054e:	7dbb      	ldrb	r3, [r7, #22]
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	2b00      	cmp	r3, #0
 8000556:	d032      	beq.n	80005be <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000558:	4b46      	ldr	r3, [pc, #280]	@ (8000674 <GFX_DrawChar+0x170>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d113      	bne.n	8000588 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color);
 8000560:	7dfb      	ldrb	r3, [r7, #23]
 8000562:	b29a      	uxth	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	b29b      	uxth	r3, r3
 8000568:	4413      	add	r3, r2
 800056a:	b29b      	uxth	r3, r3
 800056c:	b218      	sxth	r0, r3
 800056e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000572:	b29a      	uxth	r2, r3
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	b29b      	uxth	r3, r3
 8000578:	4413      	add	r3, r2
 800057a:	b29b      	uxth	r3, r3
 800057c:	b21b      	sxth	r3, r3
 800057e:	79ba      	ldrb	r2, [r7, #6]
 8000580:	4619      	mov	r1, r3
 8000582:	f000 fab1 	bl	8000ae8 <SSD1306_DrawPixel>
 8000586:	e052      	b.n	800062e <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
 8000588:	7dfb      	ldrb	r3, [r7, #23]
 800058a:	4a3a      	ldr	r2, [pc, #232]	@ (8000674 <GFX_DrawChar+0x170>)
 800058c:	7812      	ldrb	r2, [r2, #0]
 800058e:	fb03 f202 	mul.w	r2, r3, r2
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	18d0      	adds	r0, r2, r3
 8000596:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800059a:	4a36      	ldr	r2, [pc, #216]	@ (8000674 <GFX_DrawChar+0x170>)
 800059c:	7812      	ldrb	r2, [r2, #0]
 800059e:	fb03 f202 	mul.w	r2, r3, r2
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	18d1      	adds	r1, r2, r3
 80005a6:	4b33      	ldr	r3, [pc, #204]	@ (8000674 <GFX_DrawChar+0x170>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b31      	ldr	r3, [pc, #196]	@ (8000674 <GFX_DrawChar+0x170>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461c      	mov	r4, r3
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	4623      	mov	r3, r4
 80005b8:	f000 f960 	bl	800087c <GFX_DrawFillRectangle>
 80005bc:	e037      	b.n	800062e <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 80005be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d133      	bne.n	800062e <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 80005c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000674 <GFX_DrawChar+0x170>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d114      	bne.n	80005f8 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background);
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	4413      	add	r3, r2
 80005d8:	b29b      	uxth	r3, r3
 80005da:	b218      	sxth	r0, r3
 80005dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	4413      	add	r3, r2
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80005f0:	4619      	mov	r1, r3
 80005f2:	f000 fa79 	bl	8000ae8 <SSD1306_DrawPixel>
 80005f6:	e01a      	b.n	800062e <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background);
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000674 <GFX_DrawChar+0x170>)
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	fb03 f202 	mul.w	r2, r3, r2
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	18d0      	adds	r0, r2, r3
 8000606:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800060a:	4a1a      	ldr	r2, [pc, #104]	@ (8000674 <GFX_DrawChar+0x170>)
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	fb03 f202 	mul.w	r2, r3, r2
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	18d1      	adds	r1, r2, r3
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <GFX_DrawChar+0x170>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <GFX_DrawChar+0x170>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461c      	mov	r4, r3
 8000622:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	4623      	mov	r3, r4
 800062a:	f000 f927 	bl	800087c <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 800062e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	3301      	adds	r3, #1
 8000636:	b2db      	uxtb	r3, r3
 8000638:	757b      	strb	r3, [r7, #21]
 800063a:	7dbb      	ldrb	r3, [r7, #22]
 800063c:	085b      	lsrs	r3, r3, #1
 800063e:	75bb      	strb	r3, [r7, #22]
 8000640:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000644:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <GFX_DrawChar+0x16c>)
 8000646:	6812      	ldr	r2, [r2, #0]
 8000648:	7812      	ldrb	r2, [r2, #0]
 800064a:	4293      	cmp	r3, r2
 800064c:	f6ff af7f 	blt.w	800054e <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ )
 8000650:	7dfb      	ldrb	r3, [r7, #23]
 8000652:	3301      	adds	r3, #1
 8000654:	75fb      	strb	r3, [r7, #23]
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <GFX_DrawChar+0x16c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	7dfa      	ldrb	r2, [r7, #23]
 8000660:	429a      	cmp	r2, r3
 8000662:	f4ff af61 	bcc.w	8000528 <GFX_DrawChar+0x24>
 8000666:	e000      	b.n	800066a <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8000668:	bf00      	nop
            }
        }
    }
}
 800066a:	371c      	adds	r7, #28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	2000002c 	.word	0x2000002c
 8000674:	20000000 	.word	0x20000000

08000678 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af02      	add	r7, sp, #8
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	617b      	str	r3, [r7, #20]
	char znak;
	znak = *str;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8000690:	e03e      	b.n	8000710 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background);
 8000692:	78f9      	ldrb	r1, [r7, #3]
 8000694:	7cfa      	ldrb	r2, [r7, #19]
 8000696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	460b      	mov	r3, r1
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	6978      	ldr	r0, [r7, #20]
 80006a2:	f7ff ff2f 	bl	8000504 <GFX_DrawChar>
		x_tmp += ((uint8_t)font[1] * size) + 1;
 80006a6:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <GFX_DrawString+0xb0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <GFX_DrawString+0xb4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	3301      	adds	r3, #1
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	4413      	add	r3, r2
 80006be:	617b      	str	r3, [r7, #20]
		if(background == 0)
 80006c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d120      	bne.n	800070a <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	74bb      	strb	r3, [r7, #18]
 80006cc:	e012      	b.n	80006f4 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	3b01      	subs	r3, #1
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b218      	sxth	r0, r3
 80006d8:	7cbb      	ldrb	r3, [r7, #18]
 80006da:	b29a      	uxth	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	4413      	add	r3, r2
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f000 f9fd 	bl	8000ae8 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80006ee:	7cbb      	ldrb	r3, [r7, #18]
 80006f0:	3301      	adds	r3, #1
 80006f2:	74bb      	strb	r3, [r7, #18]
 80006f4:	7cba      	ldrb	r2, [r7, #18]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <GFX_DrawString+0xb0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <GFX_DrawString+0xb4>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	fb01 f303 	mul.w	r3, r1, r3
 8000706:	429a      	cmp	r2, r3
 8000708:	dbe1      	blt.n	80006ce <GFX_DrawString+0x56>
			}
		}
		znak = *str;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d1ba      	bne.n	8000692 <GFX_DrawString+0x1a>
	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000002c 	.word	0x2000002c
 800072c:	20000000 	.word	0x20000000

08000730 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000748:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	1acb      	subs	r3, r1, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	bfb8      	it	lt
 8000756:	425b      	neglt	r3, r3
 8000758:	429a      	cmp	r2, r3
 800075a:	bfcc      	ite	gt
 800075c:	2301      	movgt	r3, #1
 800075e:	2300      	movle	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	857b      	strh	r3, [r7, #42]	@ 0x2a

	    if (steep) {
 8000764:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00b      	beq.n	8000784 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	623b      	str	r3, [r7, #32]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	dd0b      	ble.n	80007a4 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	61fb      	str	r3, [r7, #28]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bfb8      	it	lt
 80007bc:	425b      	neglt	r3, r3
 80007be:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80007c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007c4:	0fda      	lsrs	r2, r3, #31
 80007c6:	4413      	add	r3, r2
 80007c8:	105b      	asrs	r3, r3, #1
 80007ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	da02      	bge.n	80007da <GFX_WriteLine+0xaa>
	        ystep = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80007d8:	e030      	b.n	800083c <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 80007da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80007e0:	e02c      	b.n	800083c <GFX_WriteLine+0x10c>
	        if (steep) {
 80007e2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d009      	beq.n	80007fe <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	b211      	sxth	r1, r2
 80007f2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f976 	bl	8000ae8 <SSD1306_DrawPixel>
 80007fc:	e008      	b.n	8000810 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	b21b      	sxth	r3, r3
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	b211      	sxth	r1, r2
 8000806:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f96c 	bl	8000ae8 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8000810:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000812:	8abb      	ldrh	r3, [r7, #20]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	b29b      	uxth	r3, r3
 8000818:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	        if (err < 0) {
 800081a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800081e:	2b00      	cmp	r3, #0
 8000820:	da09      	bge.n	8000836 <GFX_WriteLine+0x106>
	            y_start += ystep;
 8000822:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	4413      	add	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
	            err += dx;
 800082c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800082e:	8afb      	ldrh	r3, [r7, #22]
 8000830:	4413      	add	r3, r2
 8000832:	b29b      	uxth	r3, r3
 8000834:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	3301      	adds	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	ddce      	ble.n	80007e2 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3730      	adds	r7, #48	@ 0x30
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af02      	add	r7, sp, #8
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	1e5a      	subs	r2, r3, #1
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	4613      	mov	r3, r2
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f7ff ff5e 	bl	8000730 <GFX_WriteLine>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	4611      	mov	r1, r2
 8000888:	461a      	mov	r2, r3
 800088a:	460b      	mov	r3, r1
 800088c:	80fb      	strh	r3, [r7, #6]
 800088e:	4613      	mov	r3, r2
 8000890:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	e009      	b.n	80008ac <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8000898:	88ba      	ldrh	r2, [r7, #4]
 800089a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	6978      	ldr	r0, [r7, #20]
 80008a2:	f7ff ffd4 	bl	800084e <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	3301      	adds	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	88fa      	ldrh	r2, [r7, #6]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	4413      	add	r3, r2
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbef      	blt.n	8000898 <GFX_DrawFillRectangle+0x1c>
    }

}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <SSD1306_SetOLED>:
SPI_HandleTypeDef *ssd1306_spi;
#endif

struct OLEDdefinition *currentOLED;

void SSD1306_SetOLED(struct OLEDdefinition *in){
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	currentOLED = in;
 80008cc:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <SSD1306_SetOLED+0x1c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000034 	.word	0x20000034

080008e4 <SSD1306_Command>:

void SSD1306_Command(uint8_t com)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
	// I2C
	HAL_I2C_Mem_Write(ssd1306_i2c, SSD1306_I2C_ADDRESS, 0x00, 1, &com, sizeof(com), 100);
#endif
#ifdef SSD1306_SPI_CONTROL
	//SPI
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2110      	movs	r1, #16
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f6:	f001 fb5b 	bl	8001fb0 <HAL_GPIO_WritePin>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <SSD1306_Command+0x5c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <SSD1306_Command+0x5c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	f001 fb4f 	bl	8001fb0 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <SSD1306_Command+0x60>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	1df9      	adds	r1, r7, #7
 8000918:	230a      	movs	r3, #10
 800091a:	2201      	movs	r2, #1
 800091c:	f002 fc73 	bl	8003206 <HAL_SPI_Transmit>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <SSD1306_Command+0x5c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <SSD1306_Command+0x5c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000930:	2201      	movs	r2, #1
 8000932:	4619      	mov	r1, r3
 8000934:	f001 fb3c 	bl	8001fb0 <HAL_GPIO_WritePin>
#endif
#endif
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000034 	.word	0x20000034
 8000944:	20000030 	.word	0x20000030

08000948 <SSD1306_ResetOLEDS>:
	HAL_Delay(5);
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_SET);
}

void SSD1306_ResetOLEDS(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2110      	movs	r1, #16
 8000950:	4806      	ldr	r0, [pc, #24]	@ (800096c <SSD1306_ResetOLEDS+0x24>)
 8000952:	f001 fb2d 	bl	8001fb0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000956:	2005      	movs	r0, #5
 8000958:	f000 fe8a 	bl	8001670 <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2110      	movs	r1, #16
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <SSD1306_ResetOLEDS+0x24>)
 8000962:	f001 fb25 	bl	8001fb0 <HAL_GPIO_WritePin>
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	48000400 	.word	0x48000400

08000970 <SSD1306_RotateDisplay>:
{
	SSD1306_Command(Invert ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
}

void SSD1306_RotateDisplay(uint8_t Rotate)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
	if(Rotate > 1) Rotate = 1;
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d901      	bls.n	8000984 <SSD1306_RotateDisplay+0x14>
 8000980:	2301      	movs	r3, #1
 8000982:	71fb      	strb	r3, [r7, #7]

	SSD1306_Command(0xA0 | (0x01 & Rotate));  // Set Segment Re-Map Default
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ffa6 	bl	80008e4 <SSD1306_Command>
							// 0xA0 (0x00) => column Address 0 mapped to 127
                			// 0xA1 (0x01) => Column Address 127 mapped to 0

	SSD1306_Command(0xC0 | (0x08 & (Rotate<<3)));  // Set COM Output Scan Direction
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	b25b      	sxtb	r3, r3
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff99 	bl	80008e4 <SSD1306_Command>
							// 0xC0	(0x00) => normal mode (RESET) Scan from COM0 to COM[N-1];Where N is the Multiplex ratio.
							// 0xC8	(0xC8) => remapped mode. Scan from COM[N-1] to COM0;;Where N is the Multiplex ratio.
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <SSD1306_DisplayON>:

void SSD1306_DisplayON(uint8_t On)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	71fb      	strb	r3, [r7, #7]
	SSD1306_Command(On ? SSD1306_DISPLAYON : SSD1306_DISPLAYOFF);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SSD1306_DisplayON+0x14>
 80009ca:	23af      	movs	r3, #175	@ 0xaf
 80009cc:	e000      	b.n	80009d0 <SSD1306_DisplayON+0x16>
 80009ce:	23ae      	movs	r3, #174	@ 0xae
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff87 	bl	80008e4 <SSD1306_Command>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <SSD1306_SetContrast>:

void SSD1306_SetContrast(uint8_t Contrast)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
	SSD1306_Command(0x81);	// Set Contrast Control
 80009e8:	2081      	movs	r0, #129	@ 0x81
 80009ea:	f7ff ff7b 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(Contrast);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff77 	bl	80008e4 <SSD1306_Command>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <SSD1306_StopScroll>:
{
	SSD1306_ScrollingHorVer(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL, StartPage, EndPage, HorizontalSpeed, VerticalOffset);
}

void SSD1306_StopScroll(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8000a02:	202e      	movs	r0, #46	@ 0x2e
 8000a04:	f7ff ff6e 	bl	80008e4 <SSD1306_Command>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SSD1306_StopFadeOutOrBlinking>:
	SSD1306_Command(SSD1306_FADE_OUT);
	SSD1306_Command(0x30 | (0x0F & Interval));
}

void SSD1306_StopFadeOutOrBlinking(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_FADE_OUT);
 8000a10:	2023      	movs	r0, #35	@ 0x23
 8000a12:	f7ff ff67 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x00);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff ff64 	bl	80008e4 <SSD1306_Command>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SSD1306_Init>:

//
// Initialization
//
void SSD1306_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	SSD1306_Command(0xAE);  // Display Off
 8000a24:	20ae      	movs	r0, #174	@ 0xae
 8000a26:	f7ff ff5d 	bl	80008e4 <SSD1306_Command>

	SSD1306_Command(0x00);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff ff5a 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x10);
 8000a30:	2010      	movs	r0, #16
 8000a32:	f7ff ff57 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x40);
 8000a36:	2040      	movs	r0, #64	@ 0x40
 8000a38:	f7ff ff54 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x20);  // Set addressing mode
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f7ff ff51 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x00);  // Horizontal Addressing Mode
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff ff4e 	bl	80008e4 <SSD1306_Command>

	SSD1306_SetContrast(0xFF);
 8000a48:	20ff      	movs	r0, #255	@ 0xff
 8000a4a:	f7ff ffc8 	bl	80009de <SSD1306_SetContrast>

	SSD1306_RotateDisplay(1);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff ff8e 	bl	8000970 <SSD1306_RotateDisplay>

	SSD1306_Command(0xA6);  // Set Normal Display
 8000a54:	20a6      	movs	r0, #166	@ 0xa6
 8000a56:	f7ff ff45 	bl	80008e4 <SSD1306_Command>

	SSD1306_Command(0xA8);  // Select Multiplex Ratio
 8000a5a:	20a8      	movs	r0, #168	@ 0xa8
 8000a5c:	f7ff ff42 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x3F);  // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8000a60:	203f      	movs	r0, #63	@ 0x3f
 8000a62:	f7ff ff3f 	bl	80008e4 <SSD1306_Command>

	SSD1306_Command(0xD3);  // Setting Display Offset
 8000a66:	20d3      	movs	r0, #211	@ 0xd3
 8000a68:	f7ff ff3c 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x00);  // 00H Reset
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff ff39 	bl	80008e4 <SSD1306_Command>

	SSD1306_Command(0xD5);  // SET DISPLAY CLOCK
 8000a72:	20d5      	movs	r0, #213	@ 0xd5
 8000a74:	f7ff ff36 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x80);  // 105HZ
 8000a78:	2080      	movs	r0, #128	@ 0x80
 8000a7a:	f7ff ff33 	bl	80008e4 <SSD1306_Command>

	SSD1306_Command(0xD9);	// Set Pre-Charge period
 8000a7e:	20d9      	movs	r0, #217	@ 0xd9
 8000a80:	f7ff ff30 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x22);
 8000a84:	2022      	movs	r0, #34	@ 0x22
 8000a86:	f7ff ff2d 	bl	80008e4 <SSD1306_Command>

	SSD1306_Command(0xDA);  // Set COM Hardware Configuration
 8000a8a:	20da      	movs	r0, #218	@ 0xda
 8000a8c:	f7ff ff2a 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x12);  // Alternative COM Pin---See IC Spec page 34
 8000a90:	2012      	movs	r0, #18
 8000a92:	f7ff ff27 	bl	80008e4 <SSD1306_Command>
							// (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

	SSD1306_Command(0xDB);	// Set Deselect Vcomh level
 8000a96:	20db      	movs	r0, #219	@ 0xdb
 8000a98:	f7ff ff24 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x40);
 8000a9c:	2040      	movs	r0, #64	@ 0x40
 8000a9e:	f7ff ff21 	bl	80008e4 <SSD1306_Command>

	SSD1306_Command(0x8D);  // Set Charge Pump
 8000aa2:	208d      	movs	r0, #141	@ 0x8d
 8000aa4:	f7ff ff1e 	bl	80008e4 <SSD1306_Command>
	//SSD1306_Command(0x10);  // Disable Charge Pump
	SSD1306_Command(0x14);  // Endable Charge Pump
 8000aa8:	2014      	movs	r0, #20
 8000aaa:	f7ff ff1b 	bl	80008e4 <SSD1306_Command>

	SSD1306_Command(0xA4);  // Entire Display ON
 8000aae:	20a4      	movs	r0, #164	@ 0xa4
 8000ab0:	f7ff ff18 	bl	80008e4 <SSD1306_Command>

#if GRAPHIC_ACCELERATION_COMMANDS == 1
	SSD1306_StopScroll();
 8000ab4:	f7ff ffa3 	bl	80009fe <SSD1306_StopScroll>
#endif

#if ADVANCED_GRAPHIC_COMMANDS == 1
	SSD1306_StopFadeOutOrBlinking();
 8000ab8:	f7ff ffa8 	bl	8000a0c <SSD1306_StopFadeOutOrBlinking>
#endif

	SSD1306_DisplayON(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff ff7c 	bl	80009ba <SSD1306_DisplayON>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <SSD1306_SpiInit>:
}
#endif

#ifdef SSD1306_SPI_CONTROL
void SSD1306_SpiInit(SPI_HandleTypeDef *spi)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	ssd1306_spi = spi;
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <SSD1306_SpiInit+0x1c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]

#if defined(SSD1306_RESET_USE)
	//SSD1306_Reset();
#endif
	SSD1306_Init();
 8000ad6:	f7ff ffa3 	bl	8000a20 <SSD1306_Init>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000030 	.word	0x20000030

08000ae8 <SSD1306_DrawPixel>:
void SSD1306_SetRotation(int16_t x){
	rotat_90 = x;
}

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8000ae8:	b490      	push	{r4, r7}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
 8000af2:	460b      	mov	r3, r1
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	4613      	mov	r3, r2
 8000af8:	70fb      	strb	r3, [r7, #3]
	if (rotat_90)
 8000afa:	4b58      	ldr	r3, [pc, #352]	@ (8000c5c <SSD1306_DrawPixel+0x174>)
 8000afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d01f      	beq.n	8000b44 <SSD1306_DrawPixel+0x5c>
	{
		if ((x < 0) || (x >= SSD1306_LCDHEIGHT) || (y < 0) || (y >= SSD1306_LCDWIDTH))
 8000b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f2c0 80a0 	blt.w	8000c4e <SSD1306_DrawPixel+0x166>
 8000b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b12:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b14:	f300 809b 	bgt.w	8000c4e <SSD1306_DrawPixel+0x166>
 8000b18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f2c0 8096 	blt.w	8000c4e <SSD1306_DrawPixel+0x166>
 8000b22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b28:	f300 8091 	bgt.w	8000c4e <SSD1306_DrawPixel+0x166>
				 return;
		int16_t new_x = 127-y;
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	81fb      	strh	r3, [r7, #14]
		int16_t new_y = x;
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	81bb      	strh	r3, [r7, #12]
		x = new_x;
 8000b3a:	89fb      	ldrh	r3, [r7, #14]
 8000b3c:	80fb      	strh	r3, [r7, #6]
		y = new_y;
 8000b3e:	89bb      	ldrh	r3, [r7, #12]
 8000b40:	80bb      	strh	r3, [r7, #4]
 8000b42:	e010      	b.n	8000b66 <SSD1306_DrawPixel+0x7e>
	}
	else{
		 if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8000b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f2c0 8082 	blt.w	8000c52 <SSD1306_DrawPixel+0x16a>
 8000b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b52:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b54:	dc7d      	bgt.n	8000c52 <SSD1306_DrawPixel+0x16a>
 8000b56:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db79      	blt.n	8000c52 <SSD1306_DrawPixel+0x16a>
 8000b5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b62:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b64:	dc75      	bgt.n	8000c52 <SSD1306_DrawPixel+0x16a>
			 return;
	}

	 switch(Color)
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d04d      	beq.n	8000c08 <SSD1306_DrawPixel+0x120>
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	dc71      	bgt.n	8000c54 <SSD1306_DrawPixel+0x16c>
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d024      	beq.n	8000bbe <SSD1306_DrawPixel+0xd6>
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d16d      	bne.n	8000c54 <SSD1306_DrawPixel+0x16c>
	 {
		 case WHITE:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] |=  (1 << (y&7)); break;
 8000b78:	4b39      	ldr	r3, [pc, #228]	@ (8000c60 <SSD1306_DrawPixel+0x178>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000b80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da00      	bge.n	8000b8a <SSD1306_DrawPixel+0xa2>
 8000b88:	3307      	adds	r3, #7
 8000b8a:	10db      	asrs	r3, r3, #3
 8000b8c:	b218      	sxth	r0, r3
 8000b8e:	4603      	mov	r3, r0
 8000b90:	01db      	lsls	r3, r3, #7
 8000b92:	440b      	add	r3, r1
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	b25a      	sxtb	r2, r3
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b25c      	sxtb	r4, r3
 8000baa:	4b2d      	ldr	r3, [pc, #180]	@ (8000c60 <SSD1306_DrawPixel+0x178>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	440b      	add	r3, r1
 8000bb8:	b2e1      	uxtb	r1, r4
 8000bba:	54d1      	strb	r1, [r2, r3]
 8000bbc:	e04a      	b.n	8000c54 <SSD1306_DrawPixel+0x16c>
		 case BLACK:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); break;
 8000bbe:	4b28      	ldr	r3, [pc, #160]	@ (8000c60 <SSD1306_DrawPixel+0x178>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	da00      	bge.n	8000bd0 <SSD1306_DrawPixel+0xe8>
 8000bce:	3307      	adds	r3, #7
 8000bd0:	10db      	asrs	r3, r3, #3
 8000bd2:	b218      	sxth	r0, r3
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	01db      	lsls	r3, r3, #7
 8000bd8:	440b      	add	r3, r1
 8000bda:	5cd3      	ldrb	r3, [r2, r3]
 8000bdc:	b25a      	sxtb	r2, r3
 8000bde:	88bb      	ldrh	r3, [r7, #4]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	2101      	movs	r1, #1
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	b25c      	sxtb	r4, r3
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <SSD1306_DrawPixel+0x178>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	01db      	lsls	r3, r3, #7
 8000c00:	440b      	add	r3, r1
 8000c02:	b2e1      	uxtb	r1, r4
 8000c04:	54d1      	strb	r1, [r2, r3]
 8000c06:	e025      	b.n	8000c54 <SSD1306_DrawPixel+0x16c>
		 case INVERSE: currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] ^=  (1 << (y&7)); break;
 8000c08:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <SSD1306_DrawPixel+0x178>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	da00      	bge.n	8000c1a <SSD1306_DrawPixel+0x132>
 8000c18:	3307      	adds	r3, #7
 8000c1a:	10db      	asrs	r3, r3, #3
 8000c1c:	b218      	sxth	r0, r3
 8000c1e:	4603      	mov	r3, r0
 8000c20:	01db      	lsls	r3, r3, #7
 8000c22:	440b      	add	r3, r1
 8000c24:	5cd3      	ldrb	r3, [r2, r3]
 8000c26:	b25a      	sxtb	r2, r3
 8000c28:	88bb      	ldrh	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	2101      	movs	r1, #1
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	4053      	eors	r3, r2
 8000c38:	b25c      	sxtb	r4, r3
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <SSD1306_DrawPixel+0x178>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c42:	4603      	mov	r3, r0
 8000c44:	01db      	lsls	r3, r3, #7
 8000c46:	440b      	add	r3, r1
 8000c48:	b2e1      	uxtb	r1, r4
 8000c4a:	54d1      	strb	r1, [r2, r3]
 8000c4c:	e002      	b.n	8000c54 <SSD1306_DrawPixel+0x16c>
				 return;
 8000c4e:	bf00      	nop
 8000c50:	e000      	b.n	8000c54 <SSD1306_DrawPixel+0x16c>
			 return;
 8000c52:	bf00      	nop
	 }
}
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc90      	pop	{r4, r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	20000002 	.word	0x20000002
 8000c60:	20000034 	.word	0x20000034

08000c64 <SSD1306_Clear>:

//
// Clear the buffer
//
void SSD1306_Clear(uint8_t Color)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	switch (Color)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00a      	beq.n	8000c8a <SSD1306_Clear+0x26>
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d111      	bne.n	8000c9c <SSD1306_Clear+0x38>
	{
		case WHITE:
			memset(currentOLED->buffer, 0xFF, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <SSD1306_Clear+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c80:	21ff      	movs	r1, #255	@ 0xff
 8000c82:	4618      	mov	r0, r3
 8000c84:	f003 fbe1 	bl	800444a <memset>
			break;
 8000c88:	e008      	b.n	8000c9c <SSD1306_Clear+0x38>
		case BLACK:
			memset(currentOLED->buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <SSD1306_Clear+0x40>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 fbd8 	bl	800444a <memset>
			break;
 8000c9a:	bf00      	nop
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000034 	.word	0x20000034

08000ca8 <SSD1306_Display>:

//
// Send buffer to OLDE GCRAM
//
void SSD1306_Display(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	SSD1306_Command(0x22);
 8000cac:	2022      	movs	r0, #34	@ 0x22
 8000cae:	f7ff fe19 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x00);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff fe16 	bl	80008e4 <SSD1306_Command>
	SSD1306_Command(0x07);
 8000cb8:	2007      	movs	r0, #7
 8000cba:	f7ff fe13 	bl	80008e4 <SSD1306_Command>
	HAL_I2C_Mem_Write(ssd1306_i2c, SSD1306_I2C_ADDRESS, 0x40, 1, (uint8_t*)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
#endif
#endif
#ifdef SSD1306_SPI_CONTROL
#ifdef SSD1306_SPI_DMA_ENABLE
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc6:	f001 f973 	bl	8001fb0 <HAL_GPIO_WritePin>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <SSD1306_Display+0x74>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <SSD1306_Display+0x74>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f001 f967 	bl	8001fb0 <HAL_GPIO_WritePin>
#endif
	while (ssd1306_spi->hdmatx->State != HAL_DMA_STATE_READY){};
 8000ce2:	bf00      	nop
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <SSD1306_Display+0x78>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d1f7      	bne.n	8000ce4 <SSD1306_Display+0x3c>
	if(ssd1306_spi->hdmatx->State == HAL_DMA_STATE_READY)
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <SSD1306_Display+0x78>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cfa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d109      	bne.n	8000d18 <SSD1306_Display+0x70>
	{
		HAL_SPI_Transmit_DMA(ssd1306_spi, (uint8_t*)&currentOLED->buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <SSD1306_Display+0x78>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <SSD1306_Display+0x74>)
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fbee 	bl	80034f4 <HAL_SPI_Transmit_DMA>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED.PortCS, currentOLED.PinCS, GPIO_PIN_SET);
#endif
#endif
#endif
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000034 	.word	0x20000034
 8000d20:	20000030 	.word	0x20000030

08000d24 <SSD1306_DmaEndCallback>:
#endif
}

#if defined(SSD1306_SPI_CONTROL) && defined(SSD1306_SPI_DMA_ENABLE) && !defined(SPI_CS_HARDWARE_CONTROL)
void SSD1306_DmaEndCallback(SPI_HandleTypeDef *hspi)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	if(hspi == ssd1306_spi)
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <SSD1306_DmaEndCallback+0x34>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d10b      	bne.n	8000d4e <SSD1306_DmaEndCallback+0x2a>
	{
		HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <SSD1306_DmaEndCallback+0x38>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <SSD1306_DmaEndCallback+0x38>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	@ 0x408
 8000d46:	2201      	movs	r2, #1
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f001 f931 	bl	8001fb0 <HAL_GPIO_WritePin>
	}
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000030 	.word	0x20000030
 8000d5c:	20000034 	.word	0x20000034

08000d60 <_Z15initializeOLEDsv>:


struct OLEDdefinition oled1;
struct OLEDdefinition oled2;

void initializeOLEDs(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af02      	add	r7, sp, #8
	oled1.PortCS = SSD1306_CS_GPIO_Port;
 8000d66:	4b33      	ldr	r3, [pc, #204]	@ (8000e34 <_Z15initializeOLEDsv+0xd4>)
 8000d68:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d6c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
	oled1.PinCS = SSD1306_CS_Pin;
 8000d70:	4b30      	ldr	r3, [pc, #192]	@ (8000e34 <_Z15initializeOLEDsv+0xd4>)
 8000d72:	2240      	movs	r2, #64	@ 0x40
 8000d74:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408

	oled2.PortCS = SSD1306_CS2_GPIO_Port;
 8000d78:	4b2f      	ldr	r3, [pc, #188]	@ (8000e38 <_Z15initializeOLEDsv+0xd8>)
 8000d7a:	4a30      	ldr	r2, [pc, #192]	@ (8000e3c <_Z15initializeOLEDsv+0xdc>)
 8000d7c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
	oled2.PinCS = SSD1306_CS2_Pin;
 8000d80:	4b2d      	ldr	r3, [pc, #180]	@ (8000e38 <_Z15initializeOLEDsv+0xd8>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	f8a3 2408 	strh.w	r2, [r3, #1032]	@ 0x408

	GFX_SetFont(font_8x5);
 8000d88:	482d      	ldr	r0, [pc, #180]	@ (8000e40 <_Z15initializeOLEDsv+0xe0>)
 8000d8a:	f7ff fb97 	bl	80004bc <GFX_SetFont>
	GFX_SetFontSize(1);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff fba4 	bl	80004dc <GFX_SetFontSize>

	SSD1306_ResetOLEDS();
 8000d94:	f7ff fdd8 	bl	8000948 <SSD1306_ResetOLEDS>

	SSD1306_SetOLED(&oled1);
 8000d98:	4826      	ldr	r0, [pc, #152]	@ (8000e34 <_Z15initializeOLEDsv+0xd4>)
 8000d9a:	f7ff fd93 	bl	80008c4 <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 8000d9e:	4829      	ldr	r0, [pc, #164]	@ (8000e44 <_Z15initializeOLEDsv+0xe4>)
 8000da0:	f7ff fe92 	bl	8000ac8 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff fde3 	bl	8000970 <SSD1306_RotateDisplay>
	SSD1306_Clear(BLACK);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff ff5a 	bl	8000c64 <SSD1306_Clear>
	GFX_DrawString(0,3, "pierwszy", WHITE, BLACK);
 8000db0:	2300      	movs	r3, #0
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2301      	movs	r3, #1
 8000db6:	4a24      	ldr	r2, [pc, #144]	@ (8000e48 <_Z15initializeOLEDsv+0xe8>)
 8000db8:	2103      	movs	r1, #3
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fc5c 	bl	8000678 <GFX_DrawString>
	SSD1306_Display();
 8000dc0:	f7ff ff72 	bl	8000ca8 <SSD1306_Display>

	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 8000dc4:	bf00      	nop
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e44 <_Z15initializeOLEDsv+0xe4>)
 8000dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f3      	bne.n	8000dc6 <_Z15initializeOLEDsv+0x66>

	SSD1306_SetOLED(&oled2);
 8000dde:	4816      	ldr	r0, [pc, #88]	@ (8000e38 <_Z15initializeOLEDsv+0xd8>)
 8000de0:	f7ff fd70 	bl	80008c4 <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 8000de4:	4817      	ldr	r0, [pc, #92]	@ (8000e44 <_Z15initializeOLEDsv+0xe4>)
 8000de6:	f7ff fe6f 	bl	8000ac8 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f7ff fdc0 	bl	8000970 <SSD1306_RotateDisplay>
	SSD1306_Clear(WHITE);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff ff37 	bl	8000c64 <SSD1306_Clear>
	GFX_DrawString(0,3, "drugi", WHITE, BLACK);
 8000df6:	2300      	movs	r3, #0
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4a13      	ldr	r2, [pc, #76]	@ (8000e4c <_Z15initializeOLEDsv+0xec>)
 8000dfe:	2103      	movs	r1, #3
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff fc39 	bl	8000678 <GFX_DrawString>
	SSD1306_Display();
 8000e06:	f7ff ff4f 	bl	8000ca8 <SSD1306_Display>

	SSD1306_SetOLED(&oled1);
 8000e0a:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <_Z15initializeOLEDsv+0xd4>)
 8000e0c:	f7ff fd5a 	bl	80008c4 <SSD1306_SetOLED>

	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 8000e10:	bf00      	nop
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <_Z15initializeOLEDsv+0xe4>)
 8000e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	bf14      	ite	ne
 8000e20:	2301      	movne	r3, #1
 8000e22:	2300      	moveq	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f3      	bne.n	8000e12 <_Z15initializeOLEDsv+0xb2>
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000038 	.word	0x20000038
 8000e38:	20000444 	.word	0x20000444
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	080044d0 	.word	0x080044d0
 8000e44:	20000850 	.word	0x20000850
 8000e48:	080044bc 	.word	0x080044bc
 8000e4c:	080044c8 	.word	0x080044c8

08000e50 <_Z10drawScreenv>:

void drawScreen(){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af02      	add	r7, sp, #8
	if(hspi1.hdmatx->State == HAL_DMA_STATE_READY)
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <_Z10drawScreenv+0xa4>)
 8000e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	bf0c      	ite	eq
 8000e64:	2301      	moveq	r3, #1
 8000e66:	2300      	movne	r3, #0
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d03f      	beq.n	8000eee <_Z10drawScreenv+0x9e>
		{
			SSD1306_SetOLED(&oled1);
 8000e6e:	4822      	ldr	r0, [pc, #136]	@ (8000ef8 <_Z10drawScreenv+0xa8>)
 8000e70:	f7ff fd28 	bl	80008c4 <SSD1306_SetOLED>
			SSD1306_Clear(BLACK);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff fef5 	bl	8000c64 <SSD1306_Clear>
			GFX_SetFontSize(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff fb2e 	bl	80004dc <GFX_SetFontSize>
			GFX_DrawString(0,3, "pierwszy", WHITE, BLACK);
 8000e80:	2300      	movs	r3, #0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2301      	movs	r3, #1
 8000e86:	4a1d      	ldr	r2, [pc, #116]	@ (8000efc <_Z10drawScreenv+0xac>)
 8000e88:	2103      	movs	r1, #3
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fbf4 	bl	8000678 <GFX_DrawString>
			SSD1306_Display();
 8000e90:	f7ff ff0a 	bl	8000ca8 <SSD1306_Display>


			while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 8000e94:	bf00      	nop
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <_Z10drawScreenv+0xa4>)
 8000e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	bf14      	ite	ne
 8000ea4:	2301      	movne	r3, #1
 8000ea6:	2300      	moveq	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f3      	bne.n	8000e96 <_Z10drawScreenv+0x46>


			SSD1306_SetOLED(&oled2);
 8000eae:	4814      	ldr	r0, [pc, #80]	@ (8000f00 <_Z10drawScreenv+0xb0>)
 8000eb0:	f7ff fd08 	bl	80008c4 <SSD1306_SetOLED>
			SSD1306_Clear(BLACK);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fed5 	bl	8000c64 <SSD1306_Clear>
			GFX_SetFontSize(1);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f7ff fb0e 	bl	80004dc <GFX_SetFontSize>
			GFX_DrawString(0,3, "drugi", WHITE, BLACK);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f04 <_Z10drawScreenv+0xb4>)
 8000ec8:	2103      	movs	r1, #3
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fbd4 	bl	8000678 <GFX_DrawString>
			SSD1306_Display();
 8000ed0:	f7ff feea 	bl	8000ca8 <SSD1306_Display>

			while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 8000ed4:	bf00      	nop
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <_Z10drawScreenv+0xa4>)
 8000ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eda:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	bf14      	ite	ne
 8000ee4:	2301      	movne	r3, #1
 8000ee6:	2300      	moveq	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f3      	bne.n	8000ed6 <_Z10drawScreenv+0x86>
		}
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000850 	.word	0x20000850
 8000ef8:	20000038 	.word	0x20000038
 8000efc:	080044bc 	.word	0x080044bc
 8000f00:	20000444 	.word	0x20000444
 8000f04:	080044c8 	.word	0x080044c8

08000f08 <setup>:

void setup(){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	initializeOLEDs();
 8000f0c:	f7ff ff28 	bl	8000d60 <_Z15initializeOLEDsv>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <loop>:

void loop(){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	drawScreen();
 8000f18:	f7ff ff9a 	bl	8000e50 <_Z10drawScreenv>
	HAL_Delay(100);
 8000f1c:	2064      	movs	r0, #100	@ 0x64
 8000f1e:	f000 fba7 	bl	8001670 <HAL_Delay>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <MX_DMA_Init+0x38>)
 8000f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f32:	4a0b      	ldr	r2, [pc, #44]	@ (8000f60 <MX_DMA_Init+0x38>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <MX_DMA_Init+0x38>)
 8000f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	200d      	movs	r0, #13
 8000f4c:	f000 fc8f 	bl	800186e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f50:	200d      	movs	r0, #13
 8000f52:	f000 fca8 	bl	80018a6 <HAL_NVIC_EnableIRQ>

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <MX_GPIO_Init+0xa4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	4a22      	ldr	r2, [pc, #136]	@ (8001008 <MX_GPIO_Init+0xa4>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f86:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <MX_GPIO_Init+0xa4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <MX_GPIO_Init+0xa4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	4a1c      	ldr	r2, [pc, #112]	@ (8001008 <MX_GPIO_Init+0xa4>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <MX_GPIO_Init+0xa4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1306_DC_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin|MUX_A_Pin
 8000faa:	2200      	movs	r2, #0
 8000fac:	f641 1150 	movw	r1, #6480	@ 0x1950
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb4:	f000 fffc 	bl	8001fb0 <HAL_GPIO_WritePin>
                          |MUX_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SSD1306_CS2_Pin|SSD1306_CS3_Pin|SSD1306_RESET_Pin|MUX_C_Pin
 8000fb8:	2200      	movs	r2, #0
 8000fba:	21f3      	movs	r1, #243	@ 0xf3
 8000fbc:	4813      	ldr	r0, [pc, #76]	@ (800100c <MX_GPIO_Init+0xa8>)
 8000fbe:	f000 fff7 	bl	8001fb0 <HAL_GPIO_WritePin>
                          |MUX_D_Pin|MUX_Common_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = SSD1306_DC_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin|MUX_A_Pin
 8000fc2:	f641 1350 	movw	r3, #6480	@ 0x1950
 8000fc6:	60fb      	str	r3, [r7, #12]
                          |MUX_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fde:	f000 fe75 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = SSD1306_CS2_Pin|SSD1306_CS3_Pin|SSD1306_RESET_Pin|MUX_C_Pin
 8000fe2:	23f3      	movs	r3, #243	@ 0xf3
 8000fe4:	60fb      	str	r3, [r7, #12]
                          |MUX_D_Pin|MUX_Common_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <MX_GPIO_Init+0xa8>)
 8000ffa:	f000 fe67 	bl	8001ccc <HAL_GPIO_Init>

}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f000 fab7 	bl	8001586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f816 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f7ff ffa2 	bl	8000f64 <MX_GPIO_Init>
  MX_DMA_Init();
 8001020:	f7ff ff82 	bl	8000f28 <MX_DMA_Init>
  MX_SPI1_Init();
 8001024:	f000 f870 	bl	8001108 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001028:	f000 f98c 	bl	8001344 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800102c:	f000 f9ba 	bl	80013a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2110      	movs	r1, #16
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <main+0x34>)
 8001036:	f000 ffbb 	bl	8001fb0 <HAL_GPIO_WritePin>
  setup();
 800103a:	f7ff ff65 	bl	8000f08 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 800103e:	f7ff ff69 	bl	8000f14 <loop>
 8001042:	e7fc      	b.n	800103e <main+0x2e>
 8001044:	48000400 	.word	0x48000400

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b096      	sub	sp, #88	@ 0x58
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2244      	movs	r2, #68	@ 0x44
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f003 f9f7 	bl	800444a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	463b      	mov	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800106a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800106e:	f000 ffc5 	bl	8001ffc <HAL_PWREx_ControlVoltageScaling>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001078:	f000 f840 	bl	80010fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001084:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001086:	2340      	movs	r3, #64	@ 0x40
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	2302      	movs	r3, #2
 800108c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800108e:	2302      	movs	r3, #2
 8001090:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001096:	230a      	movs	r3, #10
 8001098:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800109a:	2302      	movs	r3, #2
 800109c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800109e:	2302      	movs	r3, #2
 80010a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fffe 	bl	80020a8 <HAL_RCC_OscConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010b2:	f000 f823 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b6:	230f      	movs	r3, #15
 80010b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ba:	2303      	movs	r3, #3
 80010bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	2104      	movs	r1, #4
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 fc4c 	bl	800296c <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010da:	f000 f80f 	bl	80010fc <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3758      	adds	r7, #88	@ 0x58
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
#if defined(SSD1306_SPI_CONTROL) && defined(SSD1306_SPI_DMA_ENABLE)
	SSD1306_DmaEndCallback(hspi);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fe18 	bl	8000d24 <SSD1306_DmaEndCallback>
#endif
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <MX_SPI1_Init+0x74>)
 800110e:	4a1c      	ldr	r2, [pc, #112]	@ (8001180 <MX_SPI1_Init+0x78>)
 8001110:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001112:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <MX_SPI1_Init+0x74>)
 8001114:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001118:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <MX_SPI1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001120:	4b16      	ldr	r3, [pc, #88]	@ (800117c <MX_SPI1_Init+0x74>)
 8001122:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001126:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_SPI1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <MX_SPI1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_SPI1_Init+0x74>)
 8001136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800113a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_SPI1_Init+0x74>)
 800113e:	2228      	movs	r2, #40	@ 0x28
 8001140:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_SPI1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_SPI1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_SPI1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_SPI1_Init+0x74>)
 8001156:	2207      	movs	r2, #7
 8001158:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <MX_SPI1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_SPI1_Init+0x74>)
 8001162:	2208      	movs	r2, #8
 8001164:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_SPI1_Init+0x74>)
 8001168:	f001 ffaa 	bl	80030c0 <HAL_SPI_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001172:	f7ff ffc3 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000850 	.word	0x20000850
 8001180:	40013000 	.word	0x40013000

08001184 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001254 <HAL_SPI_MspInit+0xd0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d151      	bne.n	800124a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001258 <HAL_SPI_MspInit+0xd4>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001258 <HAL_SPI_MspInit+0xd4>)
 80011ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <HAL_SPI_MspInit+0xd4>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <HAL_SPI_MspInit+0xd4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a25      	ldr	r2, [pc, #148]	@ (8001258 <HAL_SPI_MspInit+0xd4>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <HAL_SPI_MspInit+0xd4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80011d6:	2382      	movs	r3, #130	@ 0x82
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011e6:	2305      	movs	r3, #5
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f4:	f000 fd6a 	bl	8001ccc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 80011fa:	4a19      	ldr	r2, [pc, #100]	@ (8001260 <HAL_SPI_MspInit+0xdc>)
 80011fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 8001200:	2201      	movs	r2, #1
 8001202:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 8001206:	2210      	movs	r2, #16
 8001208:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 8001212:	2280      	movs	r2, #128	@ 0x80
 8001214:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800122e:	480b      	ldr	r0, [pc, #44]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 8001230:	f000 fb54 	bl	80018dc <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800123a:	f7ff ff5f 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 8001242:	655a      	str	r2, [r3, #84]	@ 0x54
 8001244:	4a05      	ldr	r2, [pc, #20]	@ (800125c <HAL_SPI_MspInit+0xd8>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	@ 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40013000 	.word	0x40013000
 8001258:	40021000 	.word	0x40021000
 800125c:	200008b4 	.word	0x200008b4
 8001260:	40020030 	.word	0x40020030

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_MspInit+0x44>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126e:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <HAL_MspInit+0x44>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6613      	str	r3, [r2, #96]	@ 0x60
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <HAL_MspInit+0x44>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <HAL_MspInit+0x44>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001286:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <HAL_MspInit+0x44>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128c:	6593      	str	r3, [r2, #88]	@ 0x58
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_MspInit+0x44>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <NMI_Handler+0x4>

080012b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <MemManage_Handler+0x4>

080012c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001302:	f000 f995 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <DMA1_Channel3_IRQHandler+0x10>)
 8001312:	f000 fbfb 	bl	8001b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200008b4 	.word	0x200008b4

08001320 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_USART1_UART_Init+0x58>)
 800134a:	4a15      	ldr	r2, [pc, #84]	@ (80013a0 <MX_USART1_UART_Init+0x5c>)
 800134c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800134e:	4b13      	ldr	r3, [pc, #76]	@ (800139c <MX_USART1_UART_Init+0x58>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_USART1_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_USART1_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <MX_USART1_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <MX_USART1_UART_Init+0x58>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <MX_USART1_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b09      	ldr	r3, [pc, #36]	@ (800139c <MX_USART1_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <MX_USART1_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <MX_USART1_UART_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_USART1_UART_Init+0x58>)
 8001388:	f002 fb9c 	bl	8003ac4 <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001392:	f7ff feb3 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200008fc 	.word	0x200008fc
 80013a0:	40013800 	.word	0x40013800

080013a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a8:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <MX_USART2_UART_Init+0x58>)
 80013aa:	4a15      	ldr	r2, [pc, #84]	@ (8001400 <MX_USART2_UART_Init+0x5c>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ae:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <MX_USART2_UART_Init+0x58>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <MX_USART2_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_USART2_UART_Init+0x58>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <MX_USART2_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_USART2_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <MX_USART2_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <MX_USART2_UART_Init+0x58>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_USART2_UART_Init+0x58>)
 80013e8:	f002 fb6c 	bl	8003ac4 <HAL_UART_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013f2:	f7ff fe83 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000984 	.word	0x20000984
 8001400:	40004400 	.word	0x40004400

08001404 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b098      	sub	sp, #96	@ 0x60
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141c:	f107 0318 	add.w	r3, r7, #24
 8001420:	2234      	movs	r2, #52	@ 0x34
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f003 f810 	bl	800444a <memset>
  if(uartHandle->Instance==USART1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a3e      	ldr	r2, [pc, #248]	@ (8001528 <HAL_UART_MspInit+0x124>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d138      	bne.n	80014a6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001434:	2301      	movs	r3, #1
 8001436:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	4618      	mov	r0, r3
 8001442:	f001 fcb7 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800144c:	f7ff fe56 	bl	80010fc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001450:	4b36      	ldr	r3, [pc, #216]	@ (800152c <HAL_UART_MspInit+0x128>)
 8001452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001454:	4a35      	ldr	r2, [pc, #212]	@ (800152c <HAL_UART_MspInit+0x128>)
 8001456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800145a:	6613      	str	r3, [r2, #96]	@ 0x60
 800145c:	4b33      	ldr	r3, [pc, #204]	@ (800152c <HAL_UART_MspInit+0x128>)
 800145e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b30      	ldr	r3, [pc, #192]	@ (800152c <HAL_UART_MspInit+0x128>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146c:	4a2f      	ldr	r2, [pc, #188]	@ (800152c <HAL_UART_MspInit+0x128>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <HAL_UART_MspInit+0x128>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001480:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001484:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001492:	2307      	movs	r3, #7
 8001494:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a0:	f000 fc14 	bl	8001ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014a4:	e03b      	b.n	800151e <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <HAL_UART_MspInit+0x12c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d136      	bne.n	800151e <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b8:	f107 0318 	add.w	r3, r7, #24
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 fc79 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80014c8:	f7ff fe18 	bl	80010fc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014cc:	4b17      	ldr	r3, [pc, #92]	@ (800152c <HAL_UART_MspInit+0x128>)
 80014ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d0:	4a16      	ldr	r2, [pc, #88]	@ (800152c <HAL_UART_MspInit+0x128>)
 80014d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <HAL_UART_MspInit+0x128>)
 80014da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <HAL_UART_MspInit+0x128>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e8:	4a10      	ldr	r2, [pc, #64]	@ (800152c <HAL_UART_MspInit+0x128>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <HAL_UART_MspInit+0x128>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014fc:	230c      	movs	r3, #12
 80014fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150c:	2307      	movs	r3, #7
 800150e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151a:	f000 fbd7 	bl	8001ccc <HAL_GPIO_Init>
}
 800151e:	bf00      	nop
 8001520:	3760      	adds	r7, #96	@ 0x60
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40013800 	.word	0x40013800
 800152c:	40021000 	.word	0x40021000
 8001530:	40004400 	.word	0x40004400

08001534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800156c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001538:	f7ff fef2 	bl	8001320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LoopForever+0x6>)
  ldr r1, =_edata
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <LoopForever+0xe>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001554:	4c0a      	ldr	r4, [pc, #40]	@ (8001580 <LoopForever+0x16>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001562:	f002 ff7b 	bl	800445c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001566:	f7ff fd53 	bl	8001010 <main>

0800156a <LoopForever>:

LoopForever:
    b LoopForever
 800156a:	e7fe      	b.n	800156a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800156c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001578:	08004708 	.word	0x08004708
  ldr r2, =_sbss
 800157c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001580:	20000a10 	.word	0x20000a10

08001584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC1_2_IRQHandler>

08001586 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 f961 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001596:	200f      	movs	r0, #15
 8001598:	f000 f80e 	bl	80015b8 <HAL_InitTick>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	e001      	b.n	80015ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015a8:	f7ff fe5c 	bl	8001264 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015c4:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <HAL_InitTick+0x6c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d023      	beq.n	8001614 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_InitTick+0x70>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <HAL_InitTick+0x6c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f96d 	bl	80018c2 <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10f      	bne.n	800160e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d809      	bhi.n	8001608 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f000 f937 	bl	800186e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001600:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <HAL_InitTick+0x74>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e007      	b.n	8001618 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e004      	b.n	8001618 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e001      	b.n	8001618 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000000c 	.word	0x2000000c
 8001628:	20000004 	.word	0x20000004
 800162c:	20000008 	.word	0x20000008

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000000c 	.word	0x2000000c
 8001654:	20000a0c 	.word	0x20000a0c

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000a0c 	.word	0x20000a0c

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_Delay+0x44>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffde 	bl	8001658 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000000c 	.word	0x2000000c

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db0b      	blt.n	8001746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	f003 021f 	and.w	r2, r3, #31
 8001734:	4907      	ldr	r1, [pc, #28]	@ (8001754 <__NVIC_EnableIRQ+0x38>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	2001      	movs	r0, #1
 800173e:	fa00 f202 	lsl.w	r2, r0, r2
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	@ (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	@ (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
         );
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	@ 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001824:	d301      	bcc.n	800182a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <SysTick_Config+0x40>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001832:	210f      	movs	r1, #15
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f7ff ff8e 	bl	8001758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <SysTick_Config+0x40>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001842:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <SysTick_Config+0x40>)
 8001844:	2207      	movs	r2, #7
 8001846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010

08001858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff29 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001880:	f7ff ff3e 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff ff8e 	bl	80017ac <NVIC_EncodePriority>
 8001890:	4602      	mov	r2, r0
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff5d 	bl	8001758 <__NVIC_SetPriority>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff31 	bl	800171c <__NVIC_EnableIRQ>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffa2 	bl	8001814 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e098      	b.n	8001a20 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b4d      	ldr	r3, [pc, #308]	@ (8001a2c <HAL_DMA_Init+0x150>)
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d80f      	bhi.n	800191a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	4b4b      	ldr	r3, [pc, #300]	@ (8001a30 <HAL_DMA_Init+0x154>)
 8001902:	4413      	add	r3, r2
 8001904:	4a4b      	ldr	r2, [pc, #300]	@ (8001a34 <HAL_DMA_Init+0x158>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	009a      	lsls	r2, r3, #2
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a48      	ldr	r2, [pc, #288]	@ (8001a38 <HAL_DMA_Init+0x15c>)
 8001916:	641a      	str	r2, [r3, #64]	@ 0x40
 8001918:	e00e      	b.n	8001938 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	4b46      	ldr	r3, [pc, #280]	@ (8001a3c <HAL_DMA_Init+0x160>)
 8001922:	4413      	add	r3, r2
 8001924:	4a43      	ldr	r2, [pc, #268]	@ (8001a34 <HAL_DMA_Init+0x158>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	009a      	lsls	r2, r3, #2
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a42      	ldr	r2, [pc, #264]	@ (8001a40 <HAL_DMA_Init+0x164>)
 8001936:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800194e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001952:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800195c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001992:	d039      	beq.n	8001a08 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	4a27      	ldr	r2, [pc, #156]	@ (8001a38 <HAL_DMA_Init+0x15c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d11a      	bne.n	80019d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800199e:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <HAL_DMA_Init+0x168>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f003 031c 	and.w	r3, r3, #28
 80019aa:	210f      	movs	r1, #15
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4924      	ldr	r1, [pc, #144]	@ (8001a44 <HAL_DMA_Init+0x168>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019b8:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <HAL_DMA_Init+0x168>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c4:	f003 031c 	and.w	r3, r3, #28
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	491d      	ldr	r1, [pc, #116]	@ (8001a44 <HAL_DMA_Init+0x168>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
 80019d2:	e019      	b.n	8001a08 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <HAL_DMA_Init+0x16c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019dc:	f003 031c 	and.w	r3, r3, #28
 80019e0:	210f      	movs	r1, #15
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	4917      	ldr	r1, [pc, #92]	@ (8001a48 <HAL_DMA_Init+0x16c>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019ee:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <HAL_DMA_Init+0x16c>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6859      	ldr	r1, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	f003 031c 	and.w	r3, r3, #28
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	4911      	ldr	r1, [pc, #68]	@ (8001a48 <HAL_DMA_Init+0x16c>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40020407 	.word	0x40020407
 8001a30:	bffdfff8 	.word	0xbffdfff8
 8001a34:	cccccccd 	.word	0xcccccccd
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	bffdfbf8 	.word	0xbffdfbf8
 8001a40:	40020400 	.word	0x40020400
 8001a44:	400200a8 	.word	0x400200a8
 8001a48:	400204a8 	.word	0x400204a8

08001a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_DMA_Start_IT+0x20>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e04b      	b.n	8001b04 <HAL_DMA_Start_IT+0xb8>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d13a      	bne.n	8001af6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f8e0 	bl	8001c6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d008      	beq.n	8001ac4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 020e 	orr.w	r2, r2, #14
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e00f      	b.n	8001ae4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0204 	bic.w	r2, r2, #4
 8001ad2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 020a 	orr.w	r2, r2, #10
 8001ae2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e005      	b.n	8001b02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001afe:	2302      	movs	r3, #2
 8001b00:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b28:	f003 031c 	and.w	r3, r3, #28
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d026      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x7a>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d021      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0204 	bic.w	r2, r2, #4
 8001b5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b64:	f003 021c 	and.w	r2, r3, #28
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b72:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d071      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001b84:	e06c      	b.n	8001c60 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	f003 031c 	and.w	r3, r3, #28
 8001b8e:	2202      	movs	r2, #2
 8001b90:	409a      	lsls	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d02e      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0xec>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d029      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10b      	bne.n	8001bca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 020a 	bic.w	r2, r2, #10
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	f003 021c 	and.w	r2, r3, #28
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d038      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001bf6:	e033      	b.n	8001c60 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfc:	f003 031c 	and.w	r3, r3, #28
 8001c00:	2208      	movs	r2, #8
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02a      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x156>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d025      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 020e 	bic.w	r2, r2, #14
 8001c24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	f003 021c 	and.w	r2, r3, #28
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f202 	lsl.w	r2, r1, r2
 8001c38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
}
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	f003 021c 	and.w	r2, r3, #28
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d108      	bne.n	8001cae <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cac:	e007      	b.n	8001cbe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	60da      	str	r2, [r3, #12]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cda:	e14e      	b.n	8001f7a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8140 	beq.w	8001f74 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d005      	beq.n	8001d0c <HAL_GPIO_Init+0x40>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d130      	bne.n	8001d6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d42:	2201      	movs	r2, #1
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	f003 0201 	and.w	r2, r3, #1
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d017      	beq.n	8001daa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d123      	bne.n	8001dfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	08da      	lsrs	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3208      	adds	r2, #8
 8001dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	08da      	lsrs	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3208      	adds	r2, #8
 8001df8:	6939      	ldr	r1, [r7, #16]
 8001dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0203 	and.w	r2, r3, #3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 809a 	beq.w	8001f74 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e40:	4b55      	ldr	r3, [pc, #340]	@ (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e44:	4a54      	ldr	r2, [pc, #336]	@ (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e4c:	4b52      	ldr	r3, [pc, #328]	@ (8001f98 <HAL_GPIO_Init+0x2cc>)
 8001e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e58:	4a50      	ldr	r2, [pc, #320]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e82:	d013      	beq.n	8001eac <HAL_GPIO_Init+0x1e0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a46      	ldr	r2, [pc, #280]	@ (8001fa0 <HAL_GPIO_Init+0x2d4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_GPIO_Init+0x1dc>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a45      	ldr	r2, [pc, #276]	@ (8001fa4 <HAL_GPIO_Init+0x2d8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d007      	beq.n	8001ea4 <HAL_GPIO_Init+0x1d8>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a44      	ldr	r2, [pc, #272]	@ (8001fa8 <HAL_GPIO_Init+0x2dc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_GPIO_Init+0x1d4>
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e006      	b.n	8001eae <HAL_GPIO_Init+0x1e2>
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	e004      	b.n	8001eae <HAL_GPIO_Init+0x1e2>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e002      	b.n	8001eae <HAL_GPIO_Init+0x1e2>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_GPIO_Init+0x1e2>
 8001eac:	2300      	movs	r3, #0
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	f002 0203 	and.w	r2, r2, #3
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	4093      	lsls	r3, r2
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ebe:	4937      	ldr	r1, [pc, #220]	@ (8001f9c <HAL_GPIO_Init+0x2d0>)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ecc:	4b37      	ldr	r3, [pc, #220]	@ (8001fac <HAL_GPIO_Init+0x2e0>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8001fac <HAL_GPIO_Init+0x2e0>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8001fac <HAL_GPIO_Init+0x2e0>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f1a:	4a24      	ldr	r2, [pc, #144]	@ (8001fac <HAL_GPIO_Init+0x2e0>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f20:	4b22      	ldr	r3, [pc, #136]	@ (8001fac <HAL_GPIO_Init+0x2e0>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f44:	4a19      	ldr	r2, [pc, #100]	@ (8001fac <HAL_GPIO_Init+0x2e0>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f4a:	4b18      	ldr	r3, [pc, #96]	@ (8001fac <HAL_GPIO_Init+0x2e0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fac <HAL_GPIO_Init+0x2e0>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3301      	adds	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f47f aea9 	bne.w	8001cdc <HAL_GPIO_Init+0x10>
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	bf00      	nop
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	48000400 	.word	0x48000400
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000c00 	.word	0x48000c00
 8001fac:	40010400 	.word	0x40010400

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fe4:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40007000 	.word	0x40007000

08001ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800200a:	d130      	bne.n	800206e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800200c:	4b23      	ldr	r3, [pc, #140]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002018:	d038      	beq.n	800208c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800201a:	4b20      	ldr	r3, [pc, #128]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002022:	4a1e      	ldr	r2, [pc, #120]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002024:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002028:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800202a:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2232      	movs	r2, #50	@ 0x32
 8002030:	fb02 f303 	mul.w	r3, r2, r3
 8002034:	4a1b      	ldr	r2, [pc, #108]	@ (80020a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9b      	lsrs	r3, r3, #18
 800203c:	3301      	adds	r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002040:	e002      	b.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3b01      	subs	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002048:	4b14      	ldr	r3, [pc, #80]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002054:	d102      	bne.n	800205c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f2      	bne.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002068:	d110      	bne.n	800208c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e00f      	b.n	800208e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800206e:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207a:	d007      	beq.n	800208c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800207c:	4b07      	ldr	r3, [pc, #28]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002084:	4a05      	ldr	r2, [pc, #20]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002086:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800208a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40007000 	.word	0x40007000
 80020a0:	20000004 	.word	0x20000004
 80020a4:	431bde83 	.word	0x431bde83

080020a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	@ 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d102      	bne.n	80020bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f000 bc4f 	b.w	800295a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020bc:	4b97      	ldr	r3, [pc, #604]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c6:	4b95      	ldr	r3, [pc, #596]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80e6 	beq.w	80022aa <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4c>
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	f040 808d 	bne.w	8002206 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	f040 8089 	bne.w	8002206 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020f4:	4b89      	ldr	r3, [pc, #548]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <HAL_RCC_OscConfig+0x66>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	f000 bc26 	b.w	800295a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002112:	4b82      	ldr	r3, [pc, #520]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <HAL_RCC_OscConfig+0x80>
 800211e:	4b7f      	ldr	r3, [pc, #508]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002126:	e005      	b.n	8002134 <HAL_RCC_OscConfig+0x8c>
 8002128:	4b7c      	ldr	r3, [pc, #496]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800212a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002134:	4293      	cmp	r3, r2
 8002136:	d224      	bcs.n	8002182 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fdd9 	bl	8002cf4 <RCC_SetFlashLatencyFromMSIRange>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	f000 bc06 	b.w	800295a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800214e:	4b73      	ldr	r3, [pc, #460]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a72      	ldr	r2, [pc, #456]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002154:	f043 0308 	orr.w	r3, r3, #8
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b70      	ldr	r3, [pc, #448]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002166:	496d      	ldr	r1, [pc, #436]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216c:	4b6b      	ldr	r3, [pc, #428]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	4968      	ldr	r1, [pc, #416]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
 8002180:	e025      	b.n	80021ce <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002182:	4b66      	ldr	r3, [pc, #408]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a65      	ldr	r2, [pc, #404]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b63      	ldr	r3, [pc, #396]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219a:	4960      	ldr	r1, [pc, #384]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a0:	4b5e      	ldr	r3, [pc, #376]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	495b      	ldr	r1, [pc, #364]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fd98 	bl	8002cf4 <RCC_SetFlashLatencyFromMSIRange>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e3c5      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ce:	f000 fccd 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b51      	ldr	r3, [pc, #324]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	4950      	ldr	r1, [pc, #320]	@ (8002320 <HAL_RCC_OscConfig+0x278>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a4e      	ldr	r2, [pc, #312]	@ (8002324 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002328 <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f9e0 	bl	80015b8 <HAL_InitTick>
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d052      	beq.n	80022a8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	e3a9      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d032      	beq.n	8002274 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800220e:	4b43      	ldr	r3, [pc, #268]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a42      	ldr	r2, [pc, #264]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800221a:	f7ff fa1d 	bl	8001658 <HAL_GetTick>
 800221e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002222:	f7ff fa19 	bl	8001658 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e392      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002234:	4b39      	ldr	r3, [pc, #228]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002240:	4b36      	ldr	r3, [pc, #216]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a35      	ldr	r2, [pc, #212]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002246:	f043 0308 	orr.w	r3, r3, #8
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b33      	ldr	r3, [pc, #204]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	4930      	ldr	r1, [pc, #192]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800225e:	4b2f      	ldr	r3, [pc, #188]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	492b      	ldr	r1, [pc, #172]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
 8002272:	e01a      	b.n	80022aa <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002274:	4b29      	ldr	r3, [pc, #164]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a28      	ldr	r2, [pc, #160]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002280:	f7ff f9ea 	bl	8001658 <HAL_GetTick>
 8002284:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002288:	f7ff f9e6 	bl	8001658 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e35f      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800229a:	4b20      	ldr	r3, [pc, #128]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x1e0>
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d073      	beq.n	800239e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_OscConfig+0x220>
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d10e      	bne.n	80022e0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d10b      	bne.n	80022e0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	4b14      	ldr	r3, [pc, #80]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d063      	beq.n	800239c <HAL_RCC_OscConfig+0x2f4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d15f      	bne.n	800239c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e33c      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e8:	d106      	bne.n	80022f8 <HAL_RCC_OscConfig+0x250>
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0b      	ldr	r2, [pc, #44]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e025      	b.n	8002344 <HAL_RCC_OscConfig+0x29c>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002300:	d114      	bne.n	800232c <HAL_RCC_OscConfig+0x284>
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a05      	ldr	r2, [pc, #20]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	4b03      	ldr	r3, [pc, #12]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a02      	ldr	r2, [pc, #8]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 8002314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e013      	b.n	8002344 <HAL_RCC_OscConfig+0x29c>
 800231c:	40021000 	.word	0x40021000
 8002320:	080046b0 	.word	0x080046b0
 8002324:	20000004 	.word	0x20000004
 8002328:	20000008 	.word	0x20000008
 800232c:	4b8f      	ldr	r3, [pc, #572]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a8e      	ldr	r2, [pc, #568]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b8c      	ldr	r3, [pc, #560]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a8b      	ldr	r2, [pc, #556]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800233e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7ff f984 	bl	8001658 <HAL_GetTick>
 8002350:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff f980 	bl	8001658 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	@ 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e2f9      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002366:	4b81      	ldr	r3, [pc, #516]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x2ac>
 8002372:	e014      	b.n	800239e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff f970 	bl	8001658 <HAL_GetTick>
 8002378:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff f96c 	bl	8001658 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	@ 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e2e5      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238e:	4b77      	ldr	r3, [pc, #476]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x2d4>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d060      	beq.n	800246c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_OscConfig+0x314>
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d119      	bne.n	80023ea <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d116      	bne.n	80023ea <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023bc:	4b6b      	ldr	r3, [pc, #428]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_OscConfig+0x32c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e2c2      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b65      	ldr	r3, [pc, #404]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	061b      	lsls	r3, r3, #24
 80023e2:	4962      	ldr	r1, [pc, #392]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e8:	e040      	b.n	800246c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d023      	beq.n	800243a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f2:	4b5e      	ldr	r3, [pc, #376]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5d      	ldr	r2, [pc, #372]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7ff f92b 	bl	8001658 <HAL_GetTick>
 8002402:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7ff f927 	bl	8001658 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e2a0      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002418:	4b54      	ldr	r3, [pc, #336]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b51      	ldr	r3, [pc, #324]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	061b      	lsls	r3, r3, #24
 8002432:	494e      	ldr	r1, [pc, #312]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
 8002438:	e018      	b.n	800246c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243a:	4b4c      	ldr	r3, [pc, #304]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a4b      	ldr	r2, [pc, #300]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7ff f907 	bl	8001658 <HAL_GetTick>
 800244a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244e:	f7ff f903 	bl	8001658 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e27c      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002460:	4b42      	ldr	r3, [pc, #264]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 8082 	beq.w	800257e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d05f      	beq.n	8002542 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002482:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002488:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	429a      	cmp	r2, r3
 8002496:	d037      	beq.n	8002508 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e254      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01b      	beq.n	80024f2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80024ba:	4b2c      	ldr	r3, [pc, #176]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c0:	4a2a      	ldr	r2, [pc, #168]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024ca:	f7ff f8c5 	bl	8001658 <HAL_GetTick>
 80024ce:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d2:	f7ff f8c1 	bl	8001658 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b11      	cmp	r3, #17
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e23a      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e4:	4b21      	ldr	r3, [pc, #132]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1ef      	bne.n	80024d2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80024f2:	4b1e      	ldr	r3, [pc, #120]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f8:	f023 0210 	bic.w	r2, r3, #16
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	491a      	ldr	r1, [pc, #104]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002508:	4b18      	ldr	r3, [pc, #96]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800250a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800250e:	4a17      	ldr	r2, [pc, #92]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7ff f89e 	bl	8001658 <HAL_GetTick>
 800251c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002520:	f7ff f89a 	bl	8001658 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b11      	cmp	r3, #17
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e213      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ef      	beq.n	8002520 <HAL_RCC_OscConfig+0x478>
 8002540:	e01d      	b.n	800257e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002542:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002548:	4a08      	ldr	r2, [pc, #32]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7ff f881 	bl	8001658 <HAL_GetTick>
 8002556:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255a:	f7ff f87d 	bl	8001658 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b11      	cmp	r3, #17
 8002566:	d903      	bls.n	8002570 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1f6      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
 800256c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002570:	4ba9      	ldr	r3, [pc, #676]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ed      	bne.n	800255a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80bd 	beq.w	8002706 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002592:	4ba1      	ldr	r3, [pc, #644]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10e      	bne.n	80025bc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4b9e      	ldr	r3, [pc, #632]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a2:	4a9d      	ldr	r2, [pc, #628]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80025aa:	4b9b      	ldr	r3, [pc, #620]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025bc:	4b97      	ldr	r3, [pc, #604]	@ (800281c <HAL_RCC_OscConfig+0x774>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d118      	bne.n	80025fa <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025c8:	4b94      	ldr	r3, [pc, #592]	@ (800281c <HAL_RCC_OscConfig+0x774>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a93      	ldr	r2, [pc, #588]	@ (800281c <HAL_RCC_OscConfig+0x774>)
 80025ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d4:	f7ff f840 	bl	8001658 <HAL_GetTick>
 80025d8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025dc:	f7ff f83c 	bl	8001658 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1b5      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ee:	4b8b      	ldr	r3, [pc, #556]	@ (800281c <HAL_RCC_OscConfig+0x774>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d02c      	beq.n	8002660 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002606:	4b84      	ldr	r3, [pc, #528]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002618:	497f      	ldr	r1, [pc, #508]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d010      	beq.n	800264e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800262c:	4b7a      	ldr	r3, [pc, #488]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002632:	4a79      	ldr	r2, [pc, #484]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800263c:	4b76      	ldr	r3, [pc, #472]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002642:	4a75      	ldr	r2, [pc, #468]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800264c:	e018      	b.n	8002680 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800264e:	4b72      	ldr	r3, [pc, #456]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002654:	4a70      	ldr	r2, [pc, #448]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800265e:	e00f      	b.n	8002680 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002660:	4b6d      	ldr	r3, [pc, #436]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002666:	4a6c      	ldr	r2, [pc, #432]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002670:	4b69      	ldr	r3, [pc, #420]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002676:	4a68      	ldr	r2, [pc, #416]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d016      	beq.n	80026b6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe ffe6 	bl	8001658 <HAL_GetTick>
 800268c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7fe ffe2 	bl	8001658 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e159      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ed      	beq.n	8002690 <HAL_RCC_OscConfig+0x5e8>
 80026b4:	e01d      	b.n	80026f2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7fe ffcf 	bl	8001658 <HAL_GetTick>
 80026ba:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe ffcb 	bl	8001658 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e142      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d4:	4b50      	ldr	r3, [pc, #320]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1ed      	bne.n	80026be <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80026e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 80026ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	4b47      	ldr	r3, [pc, #284]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	4a46      	ldr	r2, [pc, #280]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002704:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d03c      	beq.n	800278c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	2b00      	cmp	r3, #0
 8002718:	d01c      	beq.n	8002754 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800271a:	4b3f      	ldr	r3, [pc, #252]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 800271c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002720:	4a3d      	ldr	r2, [pc, #244]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe ff95 	bl	8001658 <HAL_GetTick>
 800272e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002732:	f7fe ff91 	bl	8001658 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e10a      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002744:	4b34      	ldr	r3, [pc, #208]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002746:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ef      	beq.n	8002732 <HAL_RCC_OscConfig+0x68a>
 8002752:	e01b      	b.n	800278c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002754:	4b30      	ldr	r3, [pc, #192]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002756:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800275a:	4a2f      	ldr	r2, [pc, #188]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe ff78 	bl	8001658 <HAL_GetTick>
 8002768:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800276c:	f7fe ff74 	bl	8001658 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0ed      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800277e:	4b26      	ldr	r3, [pc, #152]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002780:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ef      	bne.n	800276c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80e1 	beq.w	8002958 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279a:	2b02      	cmp	r3, #2
 800279c:	f040 80b5 	bne.w	800290a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0203 	and.w	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d124      	bne.n	80027fe <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027be:	3b01      	subs	r3, #1
 80027c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d11b      	bne.n	80027fe <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d113      	bne.n	80027fe <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	3b01      	subs	r3, #1
 80027e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d05f      	beq.n	80028be <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	2b0c      	cmp	r3, #12
 8002802:	d05a      	beq.n	80028ba <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a03      	ldr	r2, [pc, #12]	@ (8002818 <HAL_RCC_OscConfig+0x770>)
 800280a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800280e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002810:	f7fe ff22 	bl	8001658 <HAL_GetTick>
 8002814:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002816:	e00c      	b.n	8002832 <HAL_RCC_OscConfig+0x78a>
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe ff1a 	bl	8001658 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e093      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002832:	4b4c      	ldr	r3, [pc, #304]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283e:	4b49      	ldr	r3, [pc, #292]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	4b49      	ldr	r3, [pc, #292]	@ (8002968 <HAL_RCC_OscConfig+0x8c0>)
 8002844:	4013      	ands	r3, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800284e:	3a01      	subs	r2, #1
 8002850:	0112      	lsls	r2, r2, #4
 8002852:	4311      	orrs	r1, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002858:	0212      	lsls	r2, r2, #8
 800285a:	4311      	orrs	r1, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002860:	0852      	lsrs	r2, r2, #1
 8002862:	3a01      	subs	r2, #1
 8002864:	0552      	lsls	r2, r2, #21
 8002866:	4311      	orrs	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800286c:	0852      	lsrs	r2, r2, #1
 800286e:	3a01      	subs	r2, #1
 8002870:	0652      	lsls	r2, r2, #25
 8002872:	430a      	orrs	r2, r1
 8002874:	493b      	ldr	r1, [pc, #236]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800287a:	4b3a      	ldr	r3, [pc, #232]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a39      	ldr	r2, [pc, #228]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 8002880:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002884:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002886:	4b37      	ldr	r3, [pc, #220]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4a36      	ldr	r2, [pc, #216]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 800288c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002890:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002892:	f7fe fee1 	bl	8001658 <HAL_GetTick>
 8002896:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe fedd 	bl	8001658 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e056      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b8:	e04e      	b.n	8002958 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e04d      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	4b29      	ldr	r3, [pc, #164]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d146      	bne.n	8002958 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028ca:	4b26      	ldr	r3, [pc, #152]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a25      	ldr	r2, [pc, #148]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 80028d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d6:	4b23      	ldr	r3, [pc, #140]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	4a22      	ldr	r2, [pc, #136]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 80028dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028e2:	f7fe feb9 	bl	8001658 <HAL_GetTick>
 80028e6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe feb5 	bl	8001658 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e02e      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fc:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x842>
 8002908:	e026      	b.n	8002958 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	2b0c      	cmp	r3, #12
 800290e:	d021      	beq.n	8002954 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a13      	ldr	r2, [pc, #76]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 8002916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800291a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe fe9c 	bl	8001658 <HAL_GetTick>
 8002920:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002924:	f7fe fe98 	bl	8001658 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e011      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <HAL_RCC_OscConfig+0x8bc>)
 8002948:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800294c:	f023 0303 	bic.w	r3, r3, #3
 8002950:	60d3      	str	r3, [r2, #12]
 8002952:	e001      	b.n	8002958 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3728      	adds	r7, #40	@ 0x28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	f99f808c 	.word	0xf99f808c

0800296c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0e7      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002980:	4b75      	ldr	r3, [pc, #468]	@ (8002b58 <HAL_RCC_ClockConfig+0x1ec>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d910      	bls.n	80029b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b72      	ldr	r3, [pc, #456]	@ (8002b58 <HAL_RCC_ClockConfig+0x1ec>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 0207 	bic.w	r2, r3, #7
 8002996:	4970      	ldr	r1, [pc, #448]	@ (8002b58 <HAL_RCC_ClockConfig+0x1ec>)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b6e      	ldr	r3, [pc, #440]	@ (8002b58 <HAL_RCC_ClockConfig+0x1ec>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0cf      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d010      	beq.n	80029de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	4b66      	ldr	r3, [pc, #408]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d908      	bls.n	80029de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029cc:	4b63      	ldr	r3, [pc, #396]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4960      	ldr	r1, [pc, #384]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d04c      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d121      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0a6      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0a:	4b54      	ldr	r3, [pc, #336]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d115      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e09a      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a22:	4b4e      	ldr	r3, [pc, #312]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e08e      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a32:	4b4a      	ldr	r3, [pc, #296]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e086      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a42:	4b46      	ldr	r3, [pc, #280]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 0203 	bic.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4943      	ldr	r1, [pc, #268]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a54:	f7fe fe00 	bl	8001658 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5c:	f7fe fdfc 	bl	8001658 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e06e      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	4b3a      	ldr	r3, [pc, #232]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 020c 	and.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d1eb      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d010      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	4b31      	ldr	r3, [pc, #196]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d208      	bcs.n	8002ab2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	492b      	ldr	r1, [pc, #172]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab2:	4b29      	ldr	r3, [pc, #164]	@ (8002b58 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d210      	bcs.n	8002ae2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac0:	4b25      	ldr	r3, [pc, #148]	@ (8002b58 <HAL_RCC_ClockConfig+0x1ec>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 0207 	bic.w	r2, r3, #7
 8002ac8:	4923      	ldr	r1, [pc, #140]	@ (8002b58 <HAL_RCC_ClockConfig+0x1ec>)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad0:	4b21      	ldr	r3, [pc, #132]	@ (8002b58 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e036      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aee:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4918      	ldr	r1, [pc, #96]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0c:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4910      	ldr	r1, [pc, #64]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b20:	f000 f824 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b0d      	ldr	r3, [pc, #52]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	490b      	ldr	r1, [pc, #44]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f4>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3c:	4a09      	ldr	r2, [pc, #36]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002b3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b40:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <HAL_RCC_ClockConfig+0x1fc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fd37 	bl	80015b8 <HAL_InitTick>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b4e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	080046b0 	.word	0x080046b0
 8002b64:	20000004 	.word	0x20000004
 8002b68:	20000008 	.word	0x20000008

08002b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	@ 0x24
 8002b70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b84:	4b3b      	ldr	r3, [pc, #236]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d121      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d11e      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ba0:	4b34      	ldr	r3, [pc, #208]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bac:	4b31      	ldr	r3, [pc, #196]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e005      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10d      	bne.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d102      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002be4:	4b25      	ldr	r3, [pc, #148]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x110>)
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e004      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bf0:	4b23      	ldr	r3, [pc, #140]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d134      	bne.n	8002c64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d003      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0xac>
 8002c10:	e005      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x110>)
 8002c14:	617b      	str	r3, [r7, #20]
      break;
 8002c16:	e005      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c18:	4b19      	ldr	r3, [pc, #100]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c1a:	617b      	str	r3, [r7, #20]
      break;
 8002c1c:	e002      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	617b      	str	r3, [r7, #20]
      break;
 8002c22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c24:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	3301      	adds	r3, #1
 8002c30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c32:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	fb03 f202 	mul.w	r2, r3, r2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	0e5b      	lsrs	r3, r3, #25
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	3301      	adds	r3, #1
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c64:	69bb      	ldr	r3, [r7, #24]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3724      	adds	r7, #36	@ 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	080046c8 	.word	0x080046c8
 8002c7c:	00f42400 	.word	0x00f42400
 8002c80:	007a1200 	.word	0x007a1200

08002c84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c88:	4b03      	ldr	r3, [pc, #12]	@ (8002c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ca0:	f7ff fff0 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4904      	ldr	r1, [pc, #16]	@ (8002cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	080046c0 	.word	0x080046c0

08002cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ccc:	f7ff ffda 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	0adb      	lsrs	r3, r3, #11
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	4904      	ldr	r1, [pc, #16]	@ (8002cf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	080046c0 	.word	0x080046c0

08002cf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d00:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d0c:	f7ff f968 	bl	8001fe0 <HAL_PWREx_GetVoltageRange>
 8002d10:	6178      	str	r0, [r7, #20]
 8002d12:	e014      	b.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	4b25      	ldr	r3, [pc, #148]	@ (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	4a24      	ldr	r2, [pc, #144]	@ (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d20:	4b22      	ldr	r3, [pc, #136]	@ (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d2c:	f7ff f958 	bl	8001fe0 <HAL_PWREx_GetVoltageRange>
 8002d30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b1e      	ldr	r3, [pc, #120]	@ (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d36:	4a1d      	ldr	r2, [pc, #116]	@ (8002dac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d44:	d10b      	bne.n	8002d5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b80      	cmp	r3, #128	@ 0x80
 8002d4a:	d919      	bls.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d50:	d902      	bls.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d52:	2302      	movs	r3, #2
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	e013      	b.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d58:	2301      	movs	r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	e010      	b.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b80      	cmp	r3, #128	@ 0x80
 8002d62:	d902      	bls.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d64:	2303      	movs	r3, #3
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	e00a      	b.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b80      	cmp	r3, #128	@ 0x80
 8002d6e:	d102      	bne.n	8002d76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d70:	2302      	movs	r3, #2
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	e004      	b.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b70      	cmp	r3, #112	@ 0x70
 8002d7a:	d101      	bne.n	8002d80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 0207 	bic.w	r2, r3, #7
 8002d88:	4909      	ldr	r1, [pc, #36]	@ (8002db0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d90:	4b07      	ldr	r3, [pc, #28]	@ (8002db0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d001      	beq.n	8002da2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40022000 	.word	0x40022000

08002db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 809e 	beq.w	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dd6:	4b46      	ldr	r3, [pc, #280]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00d      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dec:	4b40      	ldr	r3, [pc, #256]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e04:	2301      	movs	r3, #1
 8002e06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e08:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a39      	ldr	r2, [pc, #228]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e14:	f7fe fc20 	bl	8001658 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e1a:	e009      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1c:	f7fe fc1c 	bl	8001658 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d902      	bls.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	74fb      	strb	r3, [r7, #19]
        break;
 8002e2e:	e005      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e30:	4b30      	ldr	r3, [pc, #192]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ef      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d15a      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e42:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01e      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d019      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e6a:	4b21      	ldr	r3, [pc, #132]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e70:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e80:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e8a:	4a19      	ldr	r2, [pc, #100]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d016      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fbdc 	bl	8001658 <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fbd8 	bl	8001658 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d902      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	74fb      	strb	r3, [r7, #19]
            break;
 8002eba:	e006      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0ec      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002eca:	7cfb      	ldrb	r3, [r7, #19]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed0:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4904      	ldr	r1, [pc, #16]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ee6:	e009      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	74bb      	strb	r3, [r7, #18]
 8002eec:	e006      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002efc:	7c7b      	ldrb	r3, [r7, #17]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f02:	4b6e      	ldr	r3, [pc, #440]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f06:	4a6d      	ldr	r2, [pc, #436]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f1a:	4b68      	ldr	r3, [pc, #416]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f20:	f023 0203 	bic.w	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4964      	ldr	r1, [pc, #400]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f3c:	4b5f      	ldr	r3, [pc, #380]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f42:	f023 020c 	bic.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	495c      	ldr	r1, [pc, #368]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f5e:	4b57      	ldr	r3, [pc, #348]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f64:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4953      	ldr	r1, [pc, #332]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f80:	4b4e      	ldr	r3, [pc, #312]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	494b      	ldr	r1, [pc, #300]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fa2:	4b46      	ldr	r3, [pc, #280]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4942      	ldr	r1, [pc, #264]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	493a      	ldr	r1, [pc, #232]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe6:	4b35      	ldr	r3, [pc, #212]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	4931      	ldr	r1, [pc, #196]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003008:	4b2c      	ldr	r3, [pc, #176]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	4929      	ldr	r1, [pc, #164]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800302a:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003030:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4920      	ldr	r1, [pc, #128]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d015      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800304c:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003052:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305a:	4918      	ldr	r1, [pc, #96]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800306a:	d105      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800306c:	4b13      	ldr	r3, [pc, #76]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a12      	ldr	r2, [pc, #72]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003076:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d015      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003084:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	490a      	ldr	r1, [pc, #40]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030a2:	d105      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000

080030c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e095      	b.n	80031fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d108      	bne.n	80030ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030e2:	d009      	beq.n	80030f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
 80030ea:	e005      	b.n	80030f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe f836 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800312e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003138:	d902      	bls.n	8003140 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	e002      	b.n	8003146 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003144:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800314e:	d007      	beq.n	8003160 <HAL_SPI_Init+0xa0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003158:	d002      	beq.n	8003160 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a2:	ea42 0103 	orr.w	r1, r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	0c1b      	lsrs	r3, r3, #16
 80031bc:	f003 0204 	and.w	r2, r3, #4
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031dc:	ea42 0103 	orr.w	r1, r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b088      	sub	sp, #32
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003216:	f7fe fa1f 	bl	8001658 <HAL_GetTick>
 800321a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d001      	beq.n	8003230 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
 800322e:	e15c      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_SPI_Transmit+0x36>
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e154      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_SPI_Transmit+0x48>
 800324a:	2302      	movs	r3, #2
 800324c:	e14d      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2203      	movs	r2, #3
 800325a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	88fa      	ldrh	r2, [r7, #6]
 800326e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a0:	d10f      	bne.n	80032c2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032cc:	2b40      	cmp	r3, #64	@ 0x40
 80032ce:	d007      	beq.n	80032e0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032e8:	d952      	bls.n	8003390 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_SPI_Transmit+0xf2>
 80032f2:	8b7b      	ldrh	r3, [r7, #26]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d145      	bne.n	8003384 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800331c:	e032      	b.n	8003384 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d112      	bne.n	8003352 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	881a      	ldrh	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333c:	1c9a      	adds	r2, r3, #2
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003350:	e018      	b.n	8003384 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003352:	f7fe f981 	bl	8001658 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d803      	bhi.n	800336a <HAL_SPI_Transmit+0x164>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d102      	bne.n	8003370 <HAL_SPI_Transmit+0x16a>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0b2      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1c7      	bne.n	800331e <HAL_SPI_Transmit+0x118>
 800338e:	e083      	b.n	8003498 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_SPI_Transmit+0x198>
 8003398:	8b7b      	ldrh	r3, [r7, #26]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d177      	bne.n	800348e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d912      	bls.n	80033ce <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ac:	881a      	ldrh	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	1c9a      	adds	r2, r3, #2
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b02      	subs	r3, #2
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033cc:	e05f      	b.n	800348e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033f4:	e04b      	b.n	800348e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b02      	cmp	r3, #2
 8003402:	d12b      	bne.n	800345c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d912      	bls.n	8003434 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	1c9a      	adds	r2, r3, #2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b02      	subs	r3, #2
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003432:	e02c      	b.n	800348e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800345a:	e018      	b.n	800348e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800345c:	f7fe f8fc 	bl	8001658 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d803      	bhi.n	8003474 <HAL_SPI_Transmit+0x26e>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d102      	bne.n	800347a <HAL_SPI_Transmit+0x274>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e02d      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ae      	bne.n	80033f6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	6839      	ldr	r1, [r7, #0]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 facb 	bl	8003a38 <SPI_EndRxTxTransaction>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d001      	beq.n	8003512 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
 8003510:	e0d4      	b.n	80036bc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_SPI_Transmit_DMA+0x2a>
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0cc      	b.n	80036bc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_SPI_Transmit_DMA+0x3c>
 800352c:	2302      	movs	r3, #2
 800352e:	e0c5      	b.n	80036bc <HAL_SPI_Transmit_DMA+0x1c8>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2203      	movs	r2, #3
 800353c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003582:	d10f      	bne.n	80035a4 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003592:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	4a46      	ldr	r2, [pc, #280]	@ (80036c4 <HAL_SPI_Transmit_DMA+0x1d0>)
 80035aa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b0:	4a45      	ldr	r2, [pc, #276]	@ (80036c8 <HAL_SPI_Transmit_DMA+0x1d4>)
 80035b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b8:	4a44      	ldr	r2, [pc, #272]	@ (80036cc <HAL_SPI_Transmit_DMA+0x1d8>)
 80035ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c0:	2200      	movs	r2, #0
 80035c2:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035d2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035dc:	d82d      	bhi.n	800363a <HAL_SPI_Transmit_DMA+0x146>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e8:	d127      	bne.n	800363a <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003606:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360c:	b29b      	uxth	r3, r3
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003616:	e010      	b.n	800363a <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003626:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	085b      	lsrs	r3, r3, #1
 8003630:	b29b      	uxth	r3, r3
 8003632:	3301      	adds	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	4619      	mov	r1, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	330c      	adds	r3, #12
 800364a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003650:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003652:	f7fe f9fb 	bl	8001a4c <HAL_DMA_Start_IT>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00b      	beq.n	8003674 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003660:	f043 0210 	orr.w	r2, r3, #16
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e023      	b.n	80036bc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367e:	2b40      	cmp	r3, #64	@ 0x40
 8003680:	d007      	beq.n	8003692 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0220 	orr.w	r2, r2, #32
 80036a8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0202 	orr.w	r2, r2, #2
 80036b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	0800379f 	.word	0x0800379f
 80036c8:	080036f9 	.word	0x080036f9
 80036cc:	080037bb 	.word	0x080037bb

080036d0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003706:	f7fd ffa7 	bl	8001658 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b20      	cmp	r3, #32
 8003718:	d03b      	beq.n	8003792 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0220 	bic.w	r2, r2, #32
 8003728:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0202 	bic.w	r2, r2, #2
 8003738:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	2164      	movs	r1, #100	@ 0x64
 800373e:	6978      	ldr	r0, [r7, #20]
 8003740:	f000 f97a 	bl	8003a38 <SPI_EndRxTxTransaction>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374e:	f043 0220 	orr.w	r2, r3, #32
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2200      	movs	r2, #0
 8003778:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800378a:	6978      	ldr	r0, [r7, #20]
 800378c:	f7ff ffaa 	bl	80036e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003790:	e002      	b.n	8003798 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7fd fca7 	bl	80010e6 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7ff ff8f 	bl	80036d0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0203 	bic.w	r2, r2, #3
 80037d6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037dc:	f043 0210 	orr.w	r2, r3, #16
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7ff ff79 	bl	80036e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800380c:	f7fd ff24 	bl	8001658 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	4413      	add	r3, r2
 800381a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800381c:	f7fd ff1c 	bl	8001658 <HAL_GetTick>
 8003820:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003822:	4b39      	ldr	r3, [pc, #228]	@ (8003908 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	015b      	lsls	r3, r3, #5
 8003828:	0d1b      	lsrs	r3, r3, #20
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	fb02 f303 	mul.w	r3, r2, r3
 8003830:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003832:	e054      	b.n	80038de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	d050      	beq.n	80038de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800383c:	f7fd ff0c 	bl	8001658 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	429a      	cmp	r2, r3
 800384a:	d902      	bls.n	8003852 <SPI_WaitFlagStateUntilTimeout+0x56>
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d13d      	bne.n	80038ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800386a:	d111      	bne.n	8003890 <SPI_WaitFlagStateUntilTimeout+0x94>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003874:	d004      	beq.n	8003880 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387e:	d107      	bne.n	8003890 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800388e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003898:	d10f      	bne.n	80038ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e017      	b.n	80038fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	3b01      	subs	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4013      	ands	r3, r2
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	bf0c      	ite	eq
 80038ee:	2301      	moveq	r3, #1
 80038f0:	2300      	movne	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d19b      	bne.n	8003834 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3720      	adds	r7, #32
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000004 	.word	0x20000004

0800390c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	@ 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800391e:	f7fd fe9b 	bl	8001658 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	4413      	add	r3, r2
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800392e:	f7fd fe93 	bl	8001658 <HAL_GetTick>
 8003932:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800393c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	00da      	lsls	r2, r3, #3
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	0d1b      	lsrs	r3, r3, #20
 800394c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003954:	e060      	b.n	8003a18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800395c:	d107      	bne.n	800396e <SPI_WaitFifoStateUntilTimeout+0x62>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d104      	bne.n	800396e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800396c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d050      	beq.n	8003a18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003976:	f7fd fe6f 	bl	8001658 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003982:	429a      	cmp	r2, r3
 8003984:	d902      	bls.n	800398c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	d13d      	bne.n	8003a08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800399a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039a4:	d111      	bne.n	80039ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ae:	d004      	beq.n	80039ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039b8:	d107      	bne.n	80039ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d2:	d10f      	bne.n	80039f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e010      	b.n	8003a2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4013      	ands	r3, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d196      	bne.n	8003956 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3728      	adds	r7, #40	@ 0x28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000004 	.word	0x20000004

08003a38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff ff5b 	bl	800390c <SPI_WaitFifoStateUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a60:	f043 0220 	orr.w	r2, r3, #32
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e027      	b.n	8003abc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2200      	movs	r2, #0
 8003a74:	2180      	movs	r1, #128	@ 0x80
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f7ff fec0 	bl	80037fc <SPI_WaitFlagStateUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a86:	f043 0220 	orr.w	r2, r3, #32
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e014      	b.n	8003abc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f7ff ff34 	bl	800390c <SPI_WaitFifoStateUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aae:	f043 0220 	orr.w	r2, r3, #32
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e000      	b.n	8003abc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e040      	b.n	8003b58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd fc8c 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	@ 0x24
 8003af0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0201 	bic.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa82 	bl	8004014 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f825 	bl	8003b60 <UART_SetConfig>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e01b      	b.n	8003b58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fb01 	bl	8004158 <UART_CheckIdleState>
 8003b56:	4603      	mov	r3, r0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b64:	b08a      	sub	sp, #40	@ 0x28
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b9e      	ldr	r3, [pc, #632]	@ (8003e08 <UART_SetConfig+0x2a8>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a93      	ldr	r2, [pc, #588]	@ (8003e0c <UART_SetConfig+0x2ac>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a8a      	ldr	r2, [pc, #552]	@ (8003e10 <UART_SetConfig+0x2b0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d126      	bne.n	8003c38 <UART_SetConfig+0xd8>
 8003bea:	4b8a      	ldr	r3, [pc, #552]	@ (8003e14 <UART_SetConfig+0x2b4>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d81b      	bhi.n	8003c30 <UART_SetConfig+0xd0>
 8003bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8003c00 <UART_SetConfig+0xa0>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c11 	.word	0x08003c11
 8003c04:	08003c21 	.word	0x08003c21
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c29 	.word	0x08003c29
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c16:	e0ab      	b.n	8003d70 <UART_SetConfig+0x210>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1e:	e0a7      	b.n	8003d70 <UART_SetConfig+0x210>
 8003c20:	2304      	movs	r3, #4
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c26:	e0a3      	b.n	8003d70 <UART_SetConfig+0x210>
 8003c28:	2308      	movs	r3, #8
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2e:	e09f      	b.n	8003d70 <UART_SetConfig+0x210>
 8003c30:	2310      	movs	r3, #16
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c36:	e09b      	b.n	8003d70 <UART_SetConfig+0x210>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a76      	ldr	r2, [pc, #472]	@ (8003e18 <UART_SetConfig+0x2b8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d138      	bne.n	8003cb4 <UART_SetConfig+0x154>
 8003c42:	4b74      	ldr	r3, [pc, #464]	@ (8003e14 <UART_SetConfig+0x2b4>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d82d      	bhi.n	8003cac <UART_SetConfig+0x14c>
 8003c50:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <UART_SetConfig+0xf8>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003cad 	.word	0x08003cad
 8003c60:	08003cad 	.word	0x08003cad
 8003c64:	08003cad 	.word	0x08003cad
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003cad 	.word	0x08003cad
 8003c70:	08003cad 	.word	0x08003cad
 8003c74:	08003cad 	.word	0x08003cad
 8003c78:	08003c95 	.word	0x08003c95
 8003c7c:	08003cad 	.word	0x08003cad
 8003c80:	08003cad 	.word	0x08003cad
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003ca5 	.word	0x08003ca5
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c92:	e06d      	b.n	8003d70 <UART_SetConfig+0x210>
 8003c94:	2302      	movs	r3, #2
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c9a:	e069      	b.n	8003d70 <UART_SetConfig+0x210>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca2:	e065      	b.n	8003d70 <UART_SetConfig+0x210>
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003caa:	e061      	b.n	8003d70 <UART_SetConfig+0x210>
 8003cac:	2310      	movs	r3, #16
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb2:	e05d      	b.n	8003d70 <UART_SetConfig+0x210>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a58      	ldr	r2, [pc, #352]	@ (8003e1c <UART_SetConfig+0x2bc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d125      	bne.n	8003d0a <UART_SetConfig+0x1aa>
 8003cbe:	4b55      	ldr	r3, [pc, #340]	@ (8003e14 <UART_SetConfig+0x2b4>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003cc8:	2b30      	cmp	r3, #48	@ 0x30
 8003cca:	d016      	beq.n	8003cfa <UART_SetConfig+0x19a>
 8003ccc:	2b30      	cmp	r3, #48	@ 0x30
 8003cce:	d818      	bhi.n	8003d02 <UART_SetConfig+0x1a2>
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d00a      	beq.n	8003cea <UART_SetConfig+0x18a>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d814      	bhi.n	8003d02 <UART_SetConfig+0x1a2>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <UART_SetConfig+0x182>
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d008      	beq.n	8003cf2 <UART_SetConfig+0x192>
 8003ce0:	e00f      	b.n	8003d02 <UART_SetConfig+0x1a2>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce8:	e042      	b.n	8003d70 <UART_SetConfig+0x210>
 8003cea:	2302      	movs	r3, #2
 8003cec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf0:	e03e      	b.n	8003d70 <UART_SetConfig+0x210>
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf8:	e03a      	b.n	8003d70 <UART_SetConfig+0x210>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d00:	e036      	b.n	8003d70 <UART_SetConfig+0x210>
 8003d02:	2310      	movs	r3, #16
 8003d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d08:	e032      	b.n	8003d70 <UART_SetConfig+0x210>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e0c <UART_SetConfig+0x2ac>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d12a      	bne.n	8003d6a <UART_SetConfig+0x20a>
 8003d14:	4b3f      	ldr	r3, [pc, #252]	@ (8003e14 <UART_SetConfig+0x2b4>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d22:	d01a      	beq.n	8003d5a <UART_SetConfig+0x1fa>
 8003d24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d28:	d81b      	bhi.n	8003d62 <UART_SetConfig+0x202>
 8003d2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d2e:	d00c      	beq.n	8003d4a <UART_SetConfig+0x1ea>
 8003d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d34:	d815      	bhi.n	8003d62 <UART_SetConfig+0x202>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <UART_SetConfig+0x1e2>
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3e:	d008      	beq.n	8003d52 <UART_SetConfig+0x1f2>
 8003d40:	e00f      	b.n	8003d62 <UART_SetConfig+0x202>
 8003d42:	2300      	movs	r3, #0
 8003d44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d48:	e012      	b.n	8003d70 <UART_SetConfig+0x210>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d50:	e00e      	b.n	8003d70 <UART_SetConfig+0x210>
 8003d52:	2304      	movs	r3, #4
 8003d54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d58:	e00a      	b.n	8003d70 <UART_SetConfig+0x210>
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d60:	e006      	b.n	8003d70 <UART_SetConfig+0x210>
 8003d62:	2310      	movs	r3, #16
 8003d64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d68:	e002      	b.n	8003d70 <UART_SetConfig+0x210>
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a25      	ldr	r2, [pc, #148]	@ (8003e0c <UART_SetConfig+0x2ac>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	f040 808a 	bne.w	8003e90 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d824      	bhi.n	8003dce <UART_SetConfig+0x26e>
 8003d84:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <UART_SetConfig+0x22c>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08003dcf 	.word	0x08003dcf
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003dcf 	.word	0x08003dcf
 8003d9c:	08003dbf 	.word	0x08003dbf
 8003da0:	08003dcf 	.word	0x08003dcf
 8003da4:	08003dcf 	.word	0x08003dcf
 8003da8:	08003dcf 	.word	0x08003dcf
 8003dac:	08003dc7 	.word	0x08003dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db0:	f7fe ff74 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8003db4:	61f8      	str	r0, [r7, #28]
        break;
 8003db6:	e010      	b.n	8003dda <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db8:	4b19      	ldr	r3, [pc, #100]	@ (8003e20 <UART_SetConfig+0x2c0>)
 8003dba:	61fb      	str	r3, [r7, #28]
        break;
 8003dbc:	e00d      	b.n	8003dda <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dbe:	f7fe fed5 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8003dc2:	61f8      	str	r0, [r7, #28]
        break;
 8003dc4:	e009      	b.n	8003dda <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dca:	61fb      	str	r3, [r7, #28]
        break;
 8003dcc:	e005      	b.n	8003dda <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003dd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8109 	beq.w	8003ff4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	4413      	add	r3, r2
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d305      	bcc.n	8003dfe <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d912      	bls.n	8003e24 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e04:	e0f6      	b.n	8003ff4 <UART_SetConfig+0x494>
 8003e06:	bf00      	nop
 8003e08:	efff69f3 	.word	0xefff69f3
 8003e0c:	40008000 	.word	0x40008000
 8003e10:	40013800 	.word	0x40013800
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40004400 	.word	0x40004400
 8003e1c:	40004800 	.word	0x40004800
 8003e20:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	2200      	movs	r2, #0
 8003e28:	461c      	mov	r4, r3
 8003e2a:	4615      	mov	r5, r2
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	022b      	lsls	r3, r5, #8
 8003e36:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e3a:	0222      	lsls	r2, r4, #8
 8003e3c:	68f9      	ldr	r1, [r7, #12]
 8003e3e:	6849      	ldr	r1, [r1, #4]
 8003e40:	0849      	lsrs	r1, r1, #1
 8003e42:	2000      	movs	r0, #0
 8003e44:	4688      	mov	r8, r1
 8003e46:	4681      	mov	r9, r0
 8003e48:	eb12 0a08 	adds.w	sl, r2, r8
 8003e4c:	eb43 0b09 	adc.w	fp, r3, r9
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e5e:	4650      	mov	r0, sl
 8003e60:	4659      	mov	r1, fp
 8003e62:	f7fc f9b3 	bl	80001cc <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e74:	d308      	bcc.n	8003e88 <UART_SetConfig+0x328>
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e7c:	d204      	bcs.n	8003e88 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	e0b5      	b.n	8003ff4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e8e:	e0b1      	b.n	8003ff4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e98:	d15d      	bne.n	8003f56 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003e9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d827      	bhi.n	8003ef2 <UART_SetConfig+0x392>
 8003ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <UART_SetConfig+0x348>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003ef3 	.word	0x08003ef3
 8003eb8:	08003ee3 	.word	0x08003ee3
 8003ebc:	08003ef3 	.word	0x08003ef3
 8003ec0:	08003ef3 	.word	0x08003ef3
 8003ec4:	08003ef3 	.word	0x08003ef3
 8003ec8:	08003eeb 	.word	0x08003eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe fee6 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8003ed0:	61f8      	str	r0, [r7, #28]
        break;
 8003ed2:	e014      	b.n	8003efe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7fe fef8 	bl	8002cc8 <HAL_RCC_GetPCLK2Freq>
 8003ed8:	61f8      	str	r0, [r7, #28]
        break;
 8003eda:	e010      	b.n	8003efe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003edc:	4b4c      	ldr	r3, [pc, #304]	@ (8004010 <UART_SetConfig+0x4b0>)
 8003ede:	61fb      	str	r3, [r7, #28]
        break;
 8003ee0:	e00d      	b.n	8003efe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee2:	f7fe fe43 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8003ee6:	61f8      	str	r0, [r7, #28]
        break;
 8003ee8:	e009      	b.n	8003efe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eee:	61fb      	str	r3, [r7, #28]
        break;
 8003ef0:	e005      	b.n	8003efe <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003efc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d077      	beq.n	8003ff4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005a      	lsls	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	441a      	add	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b0f      	cmp	r3, #15
 8003f1e:	d916      	bls.n	8003f4e <UART_SetConfig+0x3ee>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f26:	d212      	bcs.n	8003f4e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f023 030f 	bic.w	r3, r3, #15
 8003f30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	8afb      	ldrh	r3, [r7, #22]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	8afa      	ldrh	r2, [r7, #22]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	e052      	b.n	8003ff4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f54:	e04e      	b.n	8003ff4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d827      	bhi.n	8003fae <UART_SetConfig+0x44e>
 8003f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f64 <UART_SetConfig+0x404>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	08003f89 	.word	0x08003f89
 8003f68:	08003f91 	.word	0x08003f91
 8003f6c:	08003f99 	.word	0x08003f99
 8003f70:	08003faf 	.word	0x08003faf
 8003f74:	08003f9f 	.word	0x08003f9f
 8003f78:	08003faf 	.word	0x08003faf
 8003f7c:	08003faf 	.word	0x08003faf
 8003f80:	08003faf 	.word	0x08003faf
 8003f84:	08003fa7 	.word	0x08003fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f88:	f7fe fe88 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8003f8c:	61f8      	str	r0, [r7, #28]
        break;
 8003f8e:	e014      	b.n	8003fba <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f90:	f7fe fe9a 	bl	8002cc8 <HAL_RCC_GetPCLK2Freq>
 8003f94:	61f8      	str	r0, [r7, #28]
        break;
 8003f96:	e010      	b.n	8003fba <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f98:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <UART_SetConfig+0x4b0>)
 8003f9a:	61fb      	str	r3, [r7, #28]
        break;
 8003f9c:	e00d      	b.n	8003fba <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9e:	f7fe fde5 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8003fa2:	61f8      	str	r0, [r7, #28]
        break;
 8003fa4:	e009      	b.n	8003fba <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003faa:	61fb      	str	r3, [r7, #28]
        break;
 8003fac:	e005      	b.n	8003fba <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fb8:	bf00      	nop
    }

    if (pclk != 0U)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d019      	beq.n	8003ff4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	085a      	lsrs	r2, r3, #1
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	441a      	add	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b0f      	cmp	r3, #15
 8003fd8:	d909      	bls.n	8003fee <UART_SetConfig+0x48e>
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe0:	d205      	bcs.n	8003fee <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60da      	str	r2, [r3, #12]
 8003fec:	e002      	b.n	8003ff4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004000:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004004:	4618      	mov	r0, r3
 8004006:	3728      	adds	r7, #40	@ 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800400e:	bf00      	nop
 8004010:	00f42400 	.word	0x00f42400

08004014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01a      	beq.n	800412a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004112:	d10a      	bne.n	800412a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]
  }
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b098      	sub	sp, #96	@ 0x60
 800415c:	af02      	add	r7, sp, #8
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004168:	f7fd fa76 	bl	8001658 <HAL_GetTick>
 800416c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b08      	cmp	r3, #8
 800417a:	d12e      	bne.n	80041da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f88c 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d021      	beq.n	80041da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e062      	b.n	80042a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d149      	bne.n	800427c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f0:	2200      	movs	r2, #0
 80041f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f856 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d03c      	beq.n	800427c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	623b      	str	r3, [r7, #32]
   return(result);
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004220:	633b      	str	r3, [r7, #48]	@ 0x30
 8004222:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800422e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e6      	bne.n	8004202 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3308      	adds	r3, #8
 800423a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	60fb      	str	r3, [r7, #12]
   return(result);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004254:	61fa      	str	r2, [r7, #28]
 8004256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	69b9      	ldr	r1, [r7, #24]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	617b      	str	r3, [r7, #20]
   return(result);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e5      	bne.n	8004234 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e011      	b.n	80042a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3758      	adds	r7, #88	@ 0x58
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b8:	e04f      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d04b      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fd f9c9 	bl	8001658 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e04e      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d037      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b80      	cmp	r3, #128	@ 0x80
 80042ee:	d034      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b40      	cmp	r3, #64	@ 0x40
 80042f4:	d031      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b08      	cmp	r3, #8
 8004302:	d110      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2208      	movs	r2, #8
 800430a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f838 	bl	8004382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2208      	movs	r2, #8
 8004316:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e029      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004334:	d111      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800433e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f81e 	bl	8004382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e00f      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	429a      	cmp	r2, r3
 8004376:	d0a0      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004382:	b480      	push	{r7}
 8004384:	b095      	sub	sp, #84	@ 0x54
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800439e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e6      	bne.n	800438a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d118      	bne.n	800442a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	60bb      	str	r3, [r7, #8]
   return(result);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 0310 	bic.w	r3, r3, #16
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6979      	ldr	r1, [r7, #20]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	613b      	str	r3, [r7, #16]
   return(result);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e6      	bne.n	80043f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800443e:	bf00      	nop
 8004440:	3754      	adds	r7, #84	@ 0x54
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <memset>:
 800444a:	4402      	add	r2, r0
 800444c:	4603      	mov	r3, r0
 800444e:	4293      	cmp	r3, r2
 8004450:	d100      	bne.n	8004454 <memset+0xa>
 8004452:	4770      	bx	lr
 8004454:	f803 1b01 	strb.w	r1, [r3], #1
 8004458:	e7f9      	b.n	800444e <memset+0x4>
	...

0800445c <__libc_init_array>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	4d0d      	ldr	r5, [pc, #52]	@ (8004494 <__libc_init_array+0x38>)
 8004460:	4c0d      	ldr	r4, [pc, #52]	@ (8004498 <__libc_init_array+0x3c>)
 8004462:	1b64      	subs	r4, r4, r5
 8004464:	10a4      	asrs	r4, r4, #2
 8004466:	2600      	movs	r6, #0
 8004468:	42a6      	cmp	r6, r4
 800446a:	d109      	bne.n	8004480 <__libc_init_array+0x24>
 800446c:	4d0b      	ldr	r5, [pc, #44]	@ (800449c <__libc_init_array+0x40>)
 800446e:	4c0c      	ldr	r4, [pc, #48]	@ (80044a0 <__libc_init_array+0x44>)
 8004470:	f000 f818 	bl	80044a4 <_init>
 8004474:	1b64      	subs	r4, r4, r5
 8004476:	10a4      	asrs	r4, r4, #2
 8004478:	2600      	movs	r6, #0
 800447a:	42a6      	cmp	r6, r4
 800447c:	d105      	bne.n	800448a <__libc_init_array+0x2e>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	f855 3b04 	ldr.w	r3, [r5], #4
 8004484:	4798      	blx	r3
 8004486:	3601      	adds	r6, #1
 8004488:	e7ee      	b.n	8004468 <__libc_init_array+0xc>
 800448a:	f855 3b04 	ldr.w	r3, [r5], #4
 800448e:	4798      	blx	r3
 8004490:	3601      	adds	r6, #1
 8004492:	e7f2      	b.n	800447a <__libc_init_array+0x1e>
 8004494:	08004700 	.word	0x08004700
 8004498:	08004700 	.word	0x08004700
 800449c:	08004700 	.word	0x08004700
 80044a0:	08004704 	.word	0x08004704

080044a4 <_init>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr

080044b0 <_fini>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr
