
Perc_module_frontend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08005278  08005278  00006278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005518  08005518  00007074  2**0
                  CONTENTS
  4 .ARM          00000008  08005518  08005518  00006518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005520  08005520  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005520  08005520  00006520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005528  08005528  00006528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800552c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e04  20000078  080055a0  00007078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e7c  080055a0  00007e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bb5c  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004872  00000000  00000000  00032c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00018409  00000000  00000000  00037472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  0004f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002711  00000000  00000000  00050bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020515  00000000  00000000  00053301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028148  00000000  00000000  00073816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b82ec  00000000  00000000  0009b95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153c4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e68  00000000  00000000  00153c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00157af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005260 	.word	0x08005260

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005260 	.word	0x08005260

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <GFX_DrawChar.part.0>:
uint8_t GFX_GetFontSize(void)
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
 8000560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000564:	b093      	sub	sp, #76	@ 0x4c
 8000566:	461f      	mov	r7, r3
{
	if(chr > 0x7E) return; // chr > '~'

	for(uint8_t i=0; i<font[1]; i++ )
 8000568:	4bb2      	ldr	r3, [pc, #712]	@ (8000834 <GFX_DrawChar.part.0+0x2d4>)
void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
 800056a:	f89d 4070 	ldrb.w	r4, [sp, #112]	@ 0x70
 800056e:	940c      	str	r4, [sp, #48]	@ 0x30
	for(uint8_t i=0; i<font[1]; i++ )
 8000570:	681c      	ldr	r4, [r3, #0]
void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
 8000572:	9008      	str	r0, [sp, #32]
 8000574:	468b      	mov	fp, r1
 8000576:	4611      	mov	r1, r2
	for(uint8_t i=0; i<font[1]; i++ )
 8000578:	7862      	ldrb	r2, [r4, #1]
 800057a:	2a00      	cmp	r2, #0
 800057c:	f000 808b 	beq.w	8000696 <GFX_DrawChar.part.0+0x136>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2];
 8000580:	f1a1 0620 	sub.w	r6, r1, #32
	for(uint8_t i=0; i<font[1]; i++ )
 8000584:	f04f 0800 	mov.w	r8, #0

        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 8000588:	7823      	ldrb	r3, [r4, #0]
	for(uint8_t i=0; i<font[1]; i++ )
 800058a:	970d      	str	r7, [sp, #52]	@ 0x34
 800058c:	9611      	str	r6, [sp, #68]	@ 0x44
 800058e:	4647      	mov	r7, r8
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2];
 8000590:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8000592:	19e1      	adds	r1, r4, r7
 8000594:	fb00 1202 	mla	r2, r0, r2, r1
 8000598:	7896      	ldrb	r6, [r2, #2]
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 800059a:	2b00      	cmp	r3, #0
 800059c:	d07b      	beq.n	8000696 <GFX_DrawChar.part.0+0x136>
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
            }
            else if(background == 0)
            {
            	if(size == 1)
					GFX_DrawPixel(x+i, y+j, background);
 800059e:	9908      	ldr	r1, [sp, #32]
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 80005a0:	9707      	str	r7, [sp, #28]
					GFX_DrawPixel(x+i, y+j, background);
 80005a2:	1879      	adds	r1, r7, r1
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 80005a4:	2200      	movs	r2, #0
					GFX_DrawPixel(x+i, y+j, background);
 80005a6:	b209      	sxth	r1, r1
 80005a8:	910e      	str	r1, [sp, #56]	@ 0x38
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 80005aa:	4615      	mov	r5, r2
 80005ac:	465f      	mov	r7, fp
            if(line & 1)
 80005ae:	07f1      	lsls	r1, r6, #31
 80005b0:	f140 8092 	bpl.w	80006d8 <GFX_DrawChar.part.0+0x178>
            	if(size == 1)
 80005b4:	49a0      	ldr	r1, [pc, #640]	@ (8000838 <GFX_DrawChar.part.0+0x2d8>)
 80005b6:	7808      	ldrb	r0, [r1, #0]
 80005b8:	2801      	cmp	r0, #1
 80005ba:	f000 8110 	beq.w	80007de <GFX_DrawChar.part.0+0x27e>
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
 80005be:	fb02 7900 	mla	r9, r2, r0, r7
 80005c2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80005c6:	fb01 2200 	mla	r2, r1, r0, r2
}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
    for (int i=x; i<x+w; i++) {
 80005ca:	eb00 0c02 	add.w	ip, r0, r2
 80005ce:	4562      	cmp	r2, ip
 80005d0:	da52      	bge.n	8000678 <GFX_DrawChar.part.0+0x118>
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80005d2:	4448      	add	r0, r9
 80005d4:	f100 3bff 	add.w	fp, r0, #4294967295
	    dx = x_end - x_start;
 80005d8:	fa1f fe89 	uxth.w	lr, r9
 80005dc:	fa1f f08b 	uxth.w	r0, fp
 80005e0:	ebae 0100 	sub.w	r1, lr, r0
	    int16_t err = dx / 2;
 80005e4:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 80005e8:	fa03 f381 	sxtah	r3, r3, r1
 80005ec:	105b      	asrs	r3, r3, #1
	    dx = x_end - x_start;
 80005ee:	b289      	uxth	r1, r1
	    int16_t err = dx / 2;
 80005f0:	9304      	str	r3, [sp, #16]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80005f2:	ebab 0309 	sub.w	r3, fp, r9
	    dx = x_end - x_start;
 80005f6:	9105      	str	r1, [sp, #20]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80005f8:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
 80005fc:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000600:	e9cd e00f 	strd	lr, r0, [sp, #60]	@ 0x3c
 8000604:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000608:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 800060c:	9106      	str	r1, [sp, #24]
 800060e:	f8cd c004 	str.w	ip, [sp, #4]
 8000612:	4649      	mov	r1, r9
 8000614:	970b      	str	r7, [sp, #44]	@ 0x2c
 8000616:	4691      	mov	r9, r2
 8000618:	465a      	mov	r2, fp
	    if (steep) {
 800061a:	4291      	cmp	r1, r2
 800061c:	d13e      	bne.n	800069c <GFX_DrawChar.part.0+0x13c>
 800061e:	2400      	movs	r4, #0
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000620:	9e06      	ldr	r6, [sp, #24]
 8000622:	46ca      	mov	sl, r9
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
 8000624:	468b      	mov	fp, r1
 8000626:	464d      	mov	r5, r9
 8000628:	4627      	mov	r7, r4
	    for (; x_start<=x_end; x_start++) {
 800062a:	45aa      	cmp	sl, r5
 800062c:	db19      	blt.n	8000662 <GFX_DrawChar.part.0+0x102>
 800062e:	4291      	cmp	r1, r2
 8000630:	e9cd 1202 	strd	r1, r2, [sp, #8]
	        err -= dy;
 8000634:	b2b6      	uxth	r6, r6
 8000636:	d13b      	bne.n	80006b0 <GFX_DrawChar.part.0+0x150>
	        	GFX_DrawPixel(x_start, y_start, color);
 8000638:	b228      	sxth	r0, r5
 800063a:	4642      	mov	r2, r8
 800063c:	fa0f f18b 	sxth.w	r1, fp
 8000640:	f000 fd90 	bl	8001164 <SSD1306_DrawPixel>
	        err -= dy;
 8000644:	1ba2      	subs	r2, r4, r6
 8000646:	b214      	sxth	r4, r2
	        if (err < 0) {
 8000648:	2c00      	cmp	r4, #0
	    for (; x_start<=x_end; x_start++) {
 800064a:	f105 0501 	add.w	r5, r5, #1
	        err -= dy;
 800064e:	b292      	uxth	r2, r2
	        if (err < 0) {
 8000650:	da03      	bge.n	800065a <GFX_DrawChar.part.0+0xfa>
	            err += dx;
 8000652:	443a      	add	r2, r7
	            y_start += ystep;
 8000654:	f10b 3bff 	add.w	fp, fp, #4294967295
	            err += dx;
 8000658:	b214      	sxth	r4, r2
	    for (; x_start<=x_end; x_start++) {
 800065a:	45aa      	cmp	sl, r5
 800065c:	daec      	bge.n	8000638 <GFX_DrawChar.part.0+0xd8>
 800065e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    for (int i=x; i<x+w; i++) {
 8000662:	9b01      	ldr	r3, [sp, #4]
 8000664:	f109 0901 	add.w	r9, r9, #1
 8000668:	4599      	cmp	r9, r3
 800066a:	d1d6      	bne.n	800061a <GFX_DrawChar.part.0+0xba>
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 800066c:	4b71      	ldr	r3, [pc, #452]	@ (8000834 <GFX_DrawChar.part.0+0x2d4>)
 800066e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8000670:	681c      	ldr	r4, [r3, #0]
 8000672:	e9dd 5609 	ldrd	r5, r6, [sp, #36]	@ 0x24
 8000676:	7823      	ldrb	r3, [r4, #0]
 8000678:	3501      	adds	r5, #1
 800067a:	b26d      	sxtb	r5, r5
 800067c:	429d      	cmp	r5, r3
 800067e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8000682:	462a      	mov	r2, r5
 8000684:	db93      	blt.n	80005ae <GFX_DrawChar.part.0+0x4e>
	for(uint8_t i=0; i<font[1]; i++ )
 8000686:	46bb      	mov	fp, r7
 8000688:	9f07      	ldr	r7, [sp, #28]
 800068a:	7862      	ldrb	r2, [r4, #1]
 800068c:	1c79      	adds	r1, r7, #1
 800068e:	b2cf      	uxtb	r7, r1
 8000690:	4297      	cmp	r7, r2
 8000692:	f4ff af7d 	bcc.w	8000590 <GFX_DrawChar.part.0+0x30>
}
 8000696:	b013      	add	sp, #76	@ 0x4c
 8000698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    if (x_start > x_end) {
 800069c:	f340 80ad 	ble.w	80007fa <GFX_DrawChar.part.0+0x29a>
	    dx = x_end - x_start;
 80006a0:	e9dd 4704 	ldrd	r4, r7, [sp, #16]
	        err -= dy;
 80006a4:	e9cd 1202 	strd	r1, r2, [sp, #8]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80006a8:	4615      	mov	r5, r2
	    if (x_start > x_end) {
 80006aa:	46cb      	mov	fp, r9
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
 80006ac:	468a      	mov	sl, r1
	        err -= dy;
 80006ae:	2600      	movs	r6, #0
	        	GFX_DrawPixel(y_start, x_start, color);
 80006b0:	b229      	sxth	r1, r5
 80006b2:	4642      	mov	r2, r8
 80006b4:	fa0f f08b 	sxth.w	r0, fp
 80006b8:	f000 fd54 	bl	8001164 <SSD1306_DrawPixel>
	        err -= dy;
 80006bc:	1ba2      	subs	r2, r4, r6
 80006be:	b214      	sxth	r4, r2
	        if (err < 0) {
 80006c0:	2c00      	cmp	r4, #0
	    for (; x_start<=x_end; x_start++) {
 80006c2:	f105 0501 	add.w	r5, r5, #1
	        err -= dy;
 80006c6:	b292      	uxth	r2, r2
	        if (err < 0) {
 80006c8:	da03      	bge.n	80006d2 <GFX_DrawChar.part.0+0x172>
	            err += dx;
 80006ca:	443a      	add	r2, r7
	            y_start += ystep;
 80006cc:	f10b 3bff 	add.w	fp, fp, #4294967295
	            err += dx;
 80006d0:	b214      	sxth	r4, r2
	    for (; x_start<=x_end; x_start++) {
 80006d2:	4555      	cmp	r5, sl
 80006d4:	ddec      	ble.n	80006b0 <GFX_DrawChar.part.0+0x150>
 80006d6:	e7c2      	b.n	800065e <GFX_DrawChar.part.0+0xfe>
            else if(background == 0)
 80006d8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80006da:	2800      	cmp	r0, #0
 80006dc:	d1cc      	bne.n	8000678 <GFX_DrawChar.part.0+0x118>
            	if(size == 1)
 80006de:	4956      	ldr	r1, [pc, #344]	@ (8000838 <GFX_DrawChar.part.0+0x2d8>)
 80006e0:	f891 c000 	ldrb.w	ip, [r1]
 80006e4:	f1bc 0f01 	cmp.w	ip, #1
 80006e8:	f000 8083 	beq.w	80007f2 <GFX_DrawChar.part.0+0x292>
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background);
 80006ec:	fb02 7b0c 	mla	fp, r2, ip, r7
 80006f0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80006f4:	fb01 220c 	mla	r2, r1, ip, r2
    for (int i=x; i<x+w; i++) {
 80006f8:	eb0c 0002 	add.w	r0, ip, r2
 80006fc:	4282      	cmp	r2, r0
 80006fe:	dabb      	bge.n	8000678 <GFX_DrawChar.part.0+0x118>
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000700:	eb0c 010b 	add.w	r1, ip, fp
 8000704:	f101 39ff 	add.w	r9, r1, #4294967295
	    dx = x_end - x_start;
 8000708:	fa1f fc8b 	uxth.w	ip, fp
 800070c:	fa1f fe89 	uxth.w	lr, r9
 8000710:	ebac 040e 	sub.w	r4, ip, lr
	    int16_t err = dx / 2;
 8000714:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 8000718:	fa03 f384 	sxtah	r3, r3, r4
 800071c:	105b      	asrs	r3, r3, #1
	    dx = x_end - x_start;
 800071e:	b2a1      	uxth	r1, r4
	    int16_t err = dx / 2;
 8000720:	9303      	str	r3, [sp, #12]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000722:	eba9 030b 	sub.w	r3, r9, fp
	    dx = x_end - x_start;
 8000726:	9104      	str	r1, [sp, #16]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000728:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800072c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000730:	4692      	mov	sl, r2
 8000732:	970a      	str	r7, [sp, #40]	@ 0x28
 8000734:	9105      	str	r1, [sp, #20]
 8000736:	464a      	mov	r2, r9
 8000738:	9506      	str	r5, [sp, #24]
 800073a:	9609      	str	r6, [sp, #36]	@ 0x24
 800073c:	9001      	str	r0, [sp, #4]
 800073e:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 8000742:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
 8000746:	465f      	mov	r7, fp
	    if (steep) {
 8000748:	4297      	cmp	r7, r2
 800074a:	d12b      	bne.n	80007a4 <GFX_DrawChar.part.0+0x244>
 800074c:	2400      	movs	r4, #0
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800074e:	9e05      	ldr	r6, [sp, #20]
 8000750:	46d1      	mov	r9, sl
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background);
 8000752:	46bb      	mov	fp, r7
 8000754:	4655      	mov	r5, sl
 8000756:	46a0      	mov	r8, r4
	    for (; x_start<=x_end; x_start++) {
 8000758:	45a9      	cmp	r9, r5
 800075a:	db17      	blt.n	800078c <GFX_DrawChar.part.0+0x22c>
 800075c:	4297      	cmp	r7, r2
	        err -= dy;
 800075e:	b2b6      	uxth	r6, r6
 8000760:	9202      	str	r2, [sp, #8]
 8000762:	d128      	bne.n	80007b6 <GFX_DrawChar.part.0+0x256>
	        	GFX_DrawPixel(x_start, y_start, color);
 8000764:	b228      	sxth	r0, r5
 8000766:	2200      	movs	r2, #0
 8000768:	fa0f f18b 	sxth.w	r1, fp
 800076c:	f000 fcfa 	bl	8001164 <SSD1306_DrawPixel>
	        err -= dy;
 8000770:	1ba2      	subs	r2, r4, r6
 8000772:	b214      	sxth	r4, r2
	        if (err < 0) {
 8000774:	2c00      	cmp	r4, #0
	    for (; x_start<=x_end; x_start++) {
 8000776:	f105 0501 	add.w	r5, r5, #1
	        err -= dy;
 800077a:	b292      	uxth	r2, r2
	        if (err < 0) {
 800077c:	da03      	bge.n	8000786 <GFX_DrawChar.part.0+0x226>
	            err += dx;
 800077e:	4442      	add	r2, r8
	            y_start += ystep;
 8000780:	f10b 3bff 	add.w	fp, fp, #4294967295
	            err += dx;
 8000784:	b214      	sxth	r4, r2
	    for (; x_start<=x_end; x_start++) {
 8000786:	45a9      	cmp	r9, r5
 8000788:	daec      	bge.n	8000764 <GFX_DrawChar.part.0+0x204>
 800078a:	9a02      	ldr	r2, [sp, #8]
    for (int i=x; i<x+w; i++) {
 800078c:	9b01      	ldr	r3, [sp, #4]
 800078e:	f10a 0a01 	add.w	sl, sl, #1
 8000792:	459a      	cmp	sl, r3
 8000794:	d1d8      	bne.n	8000748 <GFX_DrawChar.part.0+0x1e8>
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 8000796:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <GFX_DrawChar.part.0+0x2d4>)
 8000798:	9d06      	ldr	r5, [sp, #24]
 800079a:	681c      	ldr	r4, [r3, #0]
 800079c:	e9dd 6709 	ldrd	r6, r7, [sp, #36]	@ 0x24
 80007a0:	7823      	ldrb	r3, [r4, #0]
 80007a2:	e769      	b.n	8000678 <GFX_DrawChar.part.0+0x118>
	    if (x_start > x_end) {
 80007a4:	dd37      	ble.n	8000816 <GFX_DrawChar.part.0+0x2b6>
	    int16_t err = dx / 2;
 80007a6:	9c03      	ldr	r4, [sp, #12]
	    dx = x_end - x_start;
 80007a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
	        err -= dy;
 80007ac:	9202      	str	r2, [sp, #8]
	    if (x_start > x_end) {
 80007ae:	46d3      	mov	fp, sl
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80007b0:	4615      	mov	r5, r2
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background);
 80007b2:	46b9      	mov	r9, r7
	        err -= dy;
 80007b4:	2600      	movs	r6, #0
	        	GFX_DrawPixel(y_start, x_start, color);
 80007b6:	b229      	sxth	r1, r5
 80007b8:	2200      	movs	r2, #0
 80007ba:	fa0f f08b 	sxth.w	r0, fp
 80007be:	f000 fcd1 	bl	8001164 <SSD1306_DrawPixel>
	        err -= dy;
 80007c2:	1ba2      	subs	r2, r4, r6
 80007c4:	b214      	sxth	r4, r2
	        if (err < 0) {
 80007c6:	2c00      	cmp	r4, #0
	    for (; x_start<=x_end; x_start++) {
 80007c8:	f105 0501 	add.w	r5, r5, #1
	        err -= dy;
 80007cc:	b292      	uxth	r2, r2
	        if (err < 0) {
 80007ce:	da03      	bge.n	80007d8 <GFX_DrawChar.part.0+0x278>
	            err += dx;
 80007d0:	4442      	add	r2, r8
	            y_start += ystep;
 80007d2:	f10b 3bff 	add.w	fp, fp, #4294967295
	            err += dx;
 80007d6:	b214      	sxth	r4, r2
	    for (; x_start<=x_end; x_start++) {
 80007d8:	454d      	cmp	r5, r9
 80007da:	ddec      	ble.n	80007b6 <GFX_DrawChar.part.0+0x256>
 80007dc:	e7d5      	b.n	800078a <GFX_DrawChar.part.0+0x22a>
            		GFX_DrawPixel(x+i, y+j, color);
 80007de:	19e9      	adds	r1, r5, r7
 80007e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80007e2:	b209      	sxth	r1, r1
					GFX_DrawPixel(x+i, y+j, background);
 80007e4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80007e6:	f000 fcbd 	bl	8001164 <SSD1306_DrawPixel>
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <GFX_DrawChar.part.0+0x2d4>)
 80007ec:	681c      	ldr	r4, [r3, #0]
 80007ee:	7823      	ldrb	r3, [r4, #0]
 80007f0:	e742      	b.n	8000678 <GFX_DrawChar.part.0+0x118>
					GFX_DrawPixel(x+i, y+j, background);
 80007f2:	19e9      	adds	r1, r5, r7
 80007f4:	b209      	sxth	r1, r1
 80007f6:	4602      	mov	r2, r0
 80007f8:	e7f4      	b.n	80007e4 <GFX_DrawChar.part.0+0x284>
	    dx = x_end - x_start;
 80007fa:	e9dd 030f 	ldrd	r0, r3, [sp, #60]	@ 0x3c
 80007fe:	1a18      	subs	r0, r3, r0
	    int16_t err = dx / 2;
 8000800:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 8000804:	fa04 f480 	sxtah	r4, r4, r0
	    dx = x_end - x_start;
 8000808:	b287      	uxth	r7, r0
	    int16_t err = dx / 2;
 800080a:	1064      	asrs	r4, r4, #1
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800080c:	4692      	mov	sl, r2
	    int16_t err = dx / 2;
 800080e:	46cb      	mov	fp, r9
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
 8000810:	460d      	mov	r5, r1
	    int16_t err = dx / 2;
 8000812:	2600      	movs	r6, #0
 8000814:	e709      	b.n	800062a <GFX_DrawChar.part.0+0xca>
	    dx = x_end - x_start;
 8000816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000818:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800081a:	1a58      	subs	r0, r3, r1
	    int16_t err = dx / 2;
 800081c:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 8000820:	fa04 f480 	sxtah	r4, r4, r0
	    dx = x_end - x_start;
 8000824:	fa1f f880 	uxth.w	r8, r0
	    int16_t err = dx / 2;
 8000828:	1064      	asrs	r4, r4, #1
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800082a:	4691      	mov	r9, r2
	    int16_t err = dx / 2;
 800082c:	46d3      	mov	fp, sl
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background);
 800082e:	463d      	mov	r5, r7
	    int16_t err = dx / 2;
 8000830:	2600      	movs	r6, #0
 8000832:	e791      	b.n	8000758 <GFX_DrawChar.part.0+0x1f8>
 8000834:	20000094 	.word	0x20000094
 8000838:	20000000 	.word	0x20000000

0800083c <GFX_SetFont>:
	font = font_t;
 800083c:	4b01      	ldr	r3, [pc, #4]	@ (8000844 <GFX_SetFont+0x8>)
 800083e:	6018      	str	r0, [r3, #0]
}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000094 	.word	0x20000094

08000848 <GFX_SetFontSize>:
	if(size_t != 0)
 8000848:	b108      	cbz	r0, 800084e <GFX_SetFontSize+0x6>
		size = size_t;
 800084a:	4b01      	ldr	r3, [pc, #4]	@ (8000850 <GFX_SetFontSize+0x8>)
 800084c:	7018      	strb	r0, [r3, #0]
}
 800084e:	4770      	bx	lr
 8000850:	20000000 	.word	0x20000000

08000854 <GFX_DrawString>:
{
 8000854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	znak = *str;
 8000858:	4690      	mov	r8, r2
{
 800085a:	b085      	sub	sp, #20
	znak = *str;
 800085c:	f818 2b01 	ldrb.w	r2, [r8], #1
{
 8000860:	f89d a038 	ldrb.w	sl, [sp, #56]	@ 0x38
	while(*str++)
 8000864:	2a00      	cmp	r2, #0
 8000866:	d03b      	beq.n	80008e0 <GFX_DrawString+0x8c>
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8000868:	4657      	mov	r7, sl
 800086a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800086e:	4e1e      	ldr	r6, [pc, #120]	@ (80008e8 <GFX_DrawString+0x94>)
 8000870:	4d1e      	ldr	r5, [pc, #120]	@ (80008ec <GFX_DrawString+0x98>)
 8000872:	fa1f f981 	uxth.w	r9, r1
 8000876:	4682      	mov	sl, r0
 8000878:	e002      	b.n	8000880 <GFX_DrawString+0x2c>
		znak = *str;
 800087a:	f818 2b01 	ldrb.w	r2, [r8], #1
	while(*str++)
 800087e:	b37a      	cbz	r2, 80008e0 <GFX_DrawString+0x8c>
	if(chr > 0x7E) return; // chr > '~'
 8000880:	2a7e      	cmp	r2, #126	@ 0x7e
 8000882:	d805      	bhi.n	8000890 <GFX_DrawString+0x3c>
 8000884:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8000888:	9700      	str	r7, [sp, #0]
 800088a:	4650      	mov	r0, sl
 800088c:	f7ff fe68 	bl	8000560 <GFX_DrawChar.part.0>
		x_tmp += ((uint8_t)font[1] * size) + 1;
 8000890:	6831      	ldr	r1, [r6, #0]
 8000892:	782a      	ldrb	r2, [r5, #0]
 8000894:	784b      	ldrb	r3, [r1, #1]
 8000896:	fb03 a302 	mla	r3, r3, r2, sl
 800089a:	f103 0a01 	add.w	sl, r3, #1
		if(background == 0)
 800089e:	2f00      	cmp	r7, #0
 80008a0:	d1eb      	bne.n	800087a <GFX_DrawString+0x26>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80008a2:	780b      	ldrb	r3, [r1, #0]
 80008a4:	fb13 f302 	smulbb	r3, r3, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0e6      	beq.n	800087a <GFX_DrawString+0x26>
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80008ac:	f10a 34ff 	add.w	r4, sl, #4294967295
 80008b0:	b224      	sxth	r4, r4
			for(uint8_t i=0; i<(font[0]*size); i++)
 80008b2:	46bb      	mov	fp, r7
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80008b4:	eb0b 0109 	add.w	r1, fp, r9
 80008b8:	2200      	movs	r2, #0
 80008ba:	b209      	sxth	r1, r1
 80008bc:	4620      	mov	r0, r4
 80008be:	f000 fc51 	bl	8001164 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80008c2:	6833      	ldr	r3, [r6, #0]
 80008c4:	782a      	ldrb	r2, [r5, #0]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	f10b 0b01 	add.w	fp, fp, #1
 80008cc:	fa5f fb8b 	uxtb.w	fp, fp
 80008d0:	fb13 f302 	smulbb	r3, r3, r2
 80008d4:	459b      	cmp	fp, r3
 80008d6:	dbed      	blt.n	80008b4 <GFX_DrawString+0x60>
		znak = *str;
 80008d8:	f818 2b01 	ldrb.w	r2, [r8], #1
	while(*str++)
 80008dc:	2a00      	cmp	r2, #0
 80008de:	d1cf      	bne.n	8000880 <GFX_DrawString+0x2c>
}
 80008e0:	b005      	add	sp, #20
 80008e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008e6:	bf00      	nop
 80008e8:	20000094 	.word	0x20000094
 80008ec:	20000000 	.word	0x20000000

080008f0 <SSD1306_SetOLED>:
#endif

struct OLEDdefinition *currentOLED;

void SSD1306_SetOLED(struct OLEDdefinition *in){
	currentOLED = in;
 80008f0:	4b01      	ldr	r3, [pc, #4]	@ (80008f8 <SSD1306_SetOLED+0x8>)
 80008f2:	6018      	str	r0, [r3, #0]
}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000098 	.word	0x20000098

080008fc <SSD1306_ResetOLEDS>:
	HAL_Delay(5);
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_SET);
}

void SSD1306_ResetOLEDS(void)
{
 80008fc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2120      	movs	r1, #32
 8000902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000906:	f001 fdf7 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800090a:	2005      	movs	r0, #5
 800090c:	f001 fb32 	bl	8001f74 <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_SET);
}
 8000910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(SSD1306_RESET_GPIO_Port, SSD1306_RESET_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2120      	movs	r1, #32
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f001 bdec 	b.w	80024f8 <HAL_GPIO_WritePin>

08000920 <SSD1306_RotateDisplay>:
{
	SSD1306_Command(Invert ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
}

void SSD1306_RotateDisplay(uint8_t Rotate)
{
 8000920:	b570      	push	{r4, r5, r6, lr}
	if(Rotate > 1) Rotate = 1;
 8000922:	2801      	cmp	r0, #1
 8000924:	bf28      	it	cs
 8000926:	2001      	movcs	r0, #1
{
 8000928:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 800092a:	4d24      	ldr	r5, [pc, #144]	@ (80009bc <SSD1306_RotateDisplay+0x9c>)
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 800092c:	4e24      	ldr	r6, [pc, #144]	@ (80009c0 <SSD1306_RotateDisplay+0xa0>)
	if(Rotate > 1) Rotate = 1;
 800092e:	4604      	mov	r4, r0

	SSD1306_Command(0xA0 | (0x01 & Rotate));  // Set Segment Re-Map Default
 8000930:	f064 035f 	orn	r3, r4, #95	@ 0x5f
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2110      	movs	r1, #16
 8000938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093c:	f88d 3007 	strb.w	r3, [sp, #7]
 8000940:	f001 fdda 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800094c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000950:	f001 fdd2 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000954:	f10d 0107 	add.w	r1, sp, #7
 8000958:	6830      	ldr	r0, [r6, #0]
 800095a:	230a      	movs	r3, #10
 800095c:	2201      	movs	r2, #1
 800095e:	f002 fe21 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000962:	682b      	ldr	r3, [r5, #0]
 8000964:	2201      	movs	r2, #1
 8000966:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800096a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
							// 0xA0 (0x00) => column Address 0 mapped to 127
                			// 0xA1 (0x01) => Column Address 127 mapped to 0

	SSD1306_Command(0xC0 | (0x08 & (Rotate<<3)));  // Set COM Output Scan Direction
 800096e:	00e4      	lsls	r4, r4, #3
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000970:	f001 fdc2 	bl	80024f8 <HAL_GPIO_WritePin>
	SSD1306_Command(0xC0 | (0x08 & (Rotate<<3)));  // Set COM Output Scan Direction
 8000974:	f064 043f 	orn	r4, r4, #63	@ 0x3f
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2110      	movs	r1, #16
 800097c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000980:	f88d 4007 	strb.w	r4, [sp, #7]
 8000984:	f001 fdb8 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	2200      	movs	r2, #0
 800098c:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000990:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000994:	f001 fdb0 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000998:	f10d 0107 	add.w	r1, sp, #7
 800099c:	6830      	ldr	r0, [r6, #0]
 800099e:	2201      	movs	r2, #1
 80009a0:	230a      	movs	r3, #10
 80009a2:	f002 fdff 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 80009a6:	682b      	ldr	r3, [r5, #0]
 80009a8:	2201      	movs	r2, #1
 80009aa:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80009ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80009b2:	f001 fda1 	bl	80024f8 <HAL_GPIO_WritePin>
							// 0xC0	(0x00) => normal mode (RESET) Scan from COM0 to COM[N-1];Where N is the Multiplex ratio.
							// 0xC8	(0xC8) => remapped mode. Scan from COM[N-1] to COM0;;Where N is the Multiplex ratio.
}
 80009b6:	b002      	add	sp, #8
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
 80009ba:	bf00      	nop
 80009bc:	20000098 	.word	0x20000098
 80009c0:	2000009c 	.word	0x2000009c

080009c4 <SSD1306_Init>:

//
// Initialization
//
void SSD1306_Init(void)
{
 80009c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80009c8:	4de6      	ldr	r5, [pc, #920]	@ (8000d64 <SSD1306_Init+0x3a0>)
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 80009ca:	4ee7      	ldr	r6, [pc, #924]	@ (8000d68 <SSD1306_Init+0x3a4>)
{
 80009cc:	b082      	sub	sp, #8
 80009ce:	23ae      	movs	r3, #174	@ 0xae
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2110      	movs	r1, #16
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d8:	f88d 3007 	strb.w	r3, [sp, #7]
 80009dc:	f001 fd8c 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	2200      	movs	r2, #0
 80009e4:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80009e8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80009ec:	f001 fd84 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 80009f0:	f10d 0107 	add.w	r1, sp, #7
 80009f4:	6830      	ldr	r0, [r6, #0]
 80009f6:	230a      	movs	r3, #10
 80009f8:	2201      	movs	r2, #1
 80009fa:	f002 fdd3 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 80009fe:	682b      	ldr	r3, [r5, #0]
 8000a00:	2400      	movs	r4, #0
 8000a02:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000a06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f001 fd74 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000a10:	4622      	mov	r2, r4
 8000a12:	2110      	movs	r1, #16
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a18:	f88d 4007 	strb.w	r4, [sp, #7]
 8000a1c:	f001 fd6c 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	4622      	mov	r2, r4
 8000a24:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000a28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000a2c:	f001 fd64 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000a30:	f10d 0107 	add.w	r1, sp, #7
 8000a34:	6830      	ldr	r0, [r6, #0]
 8000a36:	230a      	movs	r3, #10
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f002 fdb3 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000a3e:	682b      	ldr	r3, [r5, #0]
 8000a40:	2710      	movs	r7, #16
 8000a42:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000a46:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f001 fd54 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000a50:	4622      	mov	r2, r4
 8000a52:	4639      	mov	r1, r7
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a58:	f88d 7007 	strb.w	r7, [sp, #7]
 8000a5c:	f001 fd4c 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	4622      	mov	r2, r4
 8000a64:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000a68:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000a6c:	f001 fd44 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000a70:	f10d 0107 	add.w	r1, sp, #7
 8000a74:	6830      	ldr	r0, [r6, #0]
 8000a76:	230a      	movs	r3, #10
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f002 fd93 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	2201      	movs	r2, #1
 8000a82:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000a86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000a8a:	f001 fd35 	bl	80024f8 <HAL_GPIO_WritePin>
	SSD1306_Command(0xAE);  // Display Off

	SSD1306_Command(0x00);
	SSD1306_Command(0x10);
	SSD1306_Command(0x40);
 8000a8e:	f04f 0840 	mov.w	r8, #64	@ 0x40
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000a92:	4622      	mov	r2, r4
 8000a94:	4639      	mov	r1, r7
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9a:	f88d 8007 	strb.w	r8, [sp, #7]
 8000a9e:	f001 fd2b 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000aa2:	682b      	ldr	r3, [r5, #0]
 8000aa4:	4622      	mov	r2, r4
 8000aa6:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000aaa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000aae:	f001 fd23 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000ab2:	f10d 0107 	add.w	r1, sp, #7
 8000ab6:	6830      	ldr	r0, [r6, #0]
 8000ab8:	230a      	movs	r3, #10
 8000aba:	2201      	movs	r2, #1
 8000abc:	f002 fd72 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000ac0:	682b      	ldr	r3, [r5, #0]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ac8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000acc:	f001 fd14 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000ad0:	4622      	mov	r2, r4
 8000ad2:	4639      	mov	r1, r7
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ade:	f001 fd0b 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000ae2:	682b      	ldr	r3, [r5, #0]
 8000ae4:	4622      	mov	r2, r4
 8000ae6:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000aea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000aee:	f001 fd03 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000af2:	f10d 0107 	add.w	r1, sp, #7
 8000af6:	6830      	ldr	r0, [r6, #0]
 8000af8:	230a      	movs	r3, #10
 8000afa:	2201      	movs	r2, #1
 8000afc:	f002 fd52 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000b00:	682b      	ldr	r3, [r5, #0]
 8000b02:	2201      	movs	r2, #1
 8000b04:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000b08:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000b0c:	f001 fcf4 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000b10:	4622      	mov	r2, r4
 8000b12:	4639      	mov	r1, r7
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b18:	f88d 4007 	strb.w	r4, [sp, #7]
 8000b1c:	f001 fcec 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000b20:	682b      	ldr	r3, [r5, #0]
 8000b22:	4622      	mov	r2, r4
 8000b24:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000b28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000b2c:	f001 fce4 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000b30:	f10d 0107 	add.w	r1, sp, #7
 8000b34:	6830      	ldr	r0, [r6, #0]
 8000b36:	230a      	movs	r3, #10
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f002 fd33 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000b3e:	682b      	ldr	r3, [r5, #0]
 8000b40:	2201      	movs	r2, #1
 8000b42:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000b46:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000b4a:	f001 fcd5 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000b4e:	4622      	mov	r2, r4
 8000b50:	4639      	mov	r1, r7
 8000b52:	2381      	movs	r3, #129	@ 0x81
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b58:	f88d 3007 	strb.w	r3, [sp, #7]
 8000b5c:	f001 fccc 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000b60:	682b      	ldr	r3, [r5, #0]
 8000b62:	4622      	mov	r2, r4
 8000b64:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000b68:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000b6c:	f001 fcc4 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000b70:	f10d 0107 	add.w	r1, sp, #7
 8000b74:	6830      	ldr	r0, [r6, #0]
 8000b76:	230a      	movs	r3, #10
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f002 fd13 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000b7e:	682b      	ldr	r3, [r5, #0]
 8000b80:	2201      	movs	r2, #1
 8000b82:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000b86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000b8a:	f001 fcb5 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000b8e:	4622      	mov	r2, r4
 8000b90:	4639      	mov	r1, r7
 8000b92:	23ff      	movs	r3, #255	@ 0xff
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b98:	f88d 3007 	strb.w	r3, [sp, #7]
 8000b9c:	f001 fcac 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000ba0:	682b      	ldr	r3, [r5, #0]
 8000ba2:	4622      	mov	r2, r4
 8000ba4:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ba8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000bac:	f001 fca4 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000bb0:	f10d 0107 	add.w	r1, sp, #7
 8000bb4:	6830      	ldr	r0, [r6, #0]
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f002 fcf3 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000bbe:	682b      	ldr	r3, [r5, #0]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000bc6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000bca:	f001 fc95 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000bce:	4622      	mov	r2, r4
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	23a1      	movs	r3, #161	@ 0xa1
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd8:	f88d 3007 	strb.w	r3, [sp, #7]
 8000bdc:	f001 fc8c 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000be0:	682b      	ldr	r3, [r5, #0]
 8000be2:	4622      	mov	r2, r4
 8000be4:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000be8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000bec:	f001 fc84 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000bf0:	f10d 0107 	add.w	r1, sp, #7
 8000bf4:	6830      	ldr	r0, [r6, #0]
 8000bf6:	230a      	movs	r3, #10
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f002 fcd3 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	2201      	movs	r2, #1
 8000c02:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000c06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000c0a:	f001 fc75 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000c0e:	4622      	mov	r2, r4
 8000c10:	4639      	mov	r1, r7
 8000c12:	23c8      	movs	r3, #200	@ 0xc8
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c18:	f88d 3007 	strb.w	r3, [sp, #7]
 8000c1c:	f001 fc6c 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000c20:	682b      	ldr	r3, [r5, #0]
 8000c22:	4622      	mov	r2, r4
 8000c24:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000c28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000c2c:	f001 fc64 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000c30:	f10d 0107 	add.w	r1, sp, #7
 8000c34:	6830      	ldr	r0, [r6, #0]
 8000c36:	230a      	movs	r3, #10
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f002 fcb3 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000c3e:	682b      	ldr	r3, [r5, #0]
 8000c40:	2201      	movs	r2, #1
 8000c42:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000c46:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000c4a:	f001 fc55 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000c4e:	4622      	mov	r2, r4
 8000c50:	4639      	mov	r1, r7
 8000c52:	23a6      	movs	r3, #166	@ 0xa6
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c58:	f88d 3007 	strb.w	r3, [sp, #7]
 8000c5c:	f001 fc4c 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000c60:	682b      	ldr	r3, [r5, #0]
 8000c62:	4622      	mov	r2, r4
 8000c64:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000c68:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000c6c:	f001 fc44 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000c70:	f10d 0107 	add.w	r1, sp, #7
 8000c74:	6830      	ldr	r0, [r6, #0]
 8000c76:	230a      	movs	r3, #10
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f002 fc93 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000c7e:	682b      	ldr	r3, [r5, #0]
 8000c80:	2201      	movs	r2, #1
 8000c82:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000c86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000c8a:	f001 fc35 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000c8e:	4622      	mov	r2, r4
 8000c90:	4639      	mov	r1, r7
 8000c92:	23a8      	movs	r3, #168	@ 0xa8
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c98:	f88d 3007 	strb.w	r3, [sp, #7]
 8000c9c:	f001 fc2c 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000ca0:	682b      	ldr	r3, [r5, #0]
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ca8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000cac:	f001 fc24 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000cb0:	f10d 0107 	add.w	r1, sp, #7
 8000cb4:	6830      	ldr	r0, [r6, #0]
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f002 fc73 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000cbe:	682b      	ldr	r3, [r5, #0]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000cc6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000cca:	f001 fc15 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000cce:	4622      	mov	r2, r4
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	233f      	movs	r3, #63	@ 0x3f
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd8:	f88d 3007 	strb.w	r3, [sp, #7]
 8000cdc:	f001 fc0c 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000ce0:	682b      	ldr	r3, [r5, #0]
 8000ce2:	4622      	mov	r2, r4
 8000ce4:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ce8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000cec:	f001 fc04 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000cf0:	f10d 0107 	add.w	r1, sp, #7
 8000cf4:	6830      	ldr	r0, [r6, #0]
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f002 fc53 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000cfe:	682b      	ldr	r3, [r5, #0]
 8000d00:	2201      	movs	r2, #1
 8000d02:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000d06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000d0a:	f001 fbf5 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000d0e:	4622      	mov	r2, r4
 8000d10:	4639      	mov	r1, r7
 8000d12:	23d3      	movs	r3, #211	@ 0xd3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d18:	f88d 3007 	strb.w	r3, [sp, #7]
 8000d1c:	f001 fbec 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	4622      	mov	r2, r4
 8000d24:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000d28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000d2c:	f001 fbe4 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000d30:	f10d 0107 	add.w	r1, sp, #7
 8000d34:	6830      	ldr	r0, [r6, #0]
 8000d36:	230a      	movs	r3, #10
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f002 fc33 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000d3e:	682b      	ldr	r3, [r5, #0]
 8000d40:	2201      	movs	r2, #1
 8000d42:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000d46:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000d4a:	f001 fbd5 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000d4e:	4622      	mov	r2, r4
 8000d50:	4639      	mov	r1, r7
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d56:	f88d 4007 	strb.w	r4, [sp, #7]
 8000d5a:	f001 fbcd 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000d5e:	682b      	ldr	r3, [r5, #0]
 8000d60:	4622      	mov	r2, r4
 8000d62:	e003      	b.n	8000d6c <SSD1306_Init+0x3a8>
 8000d64:	20000098 	.word	0x20000098
 8000d68:	2000009c 	.word	0x2000009c
 8000d6c:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000d70:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000d74:	f001 fbc0 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000d78:	f10d 0107 	add.w	r1, sp, #7
 8000d7c:	6830      	ldr	r0, [r6, #0]
 8000d7e:	230a      	movs	r3, #10
 8000d80:	2201      	movs	r2, #1
 8000d82:	f002 fc0f 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000d86:	682b      	ldr	r3, [r5, #0]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000d8e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000d92:	f001 fbb1 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000d96:	4622      	mov	r2, r4
 8000d98:	4639      	mov	r1, r7
 8000d9a:	23d5      	movs	r3, #213	@ 0xd5
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da0:	f88d 3007 	strb.w	r3, [sp, #7]
 8000da4:	f001 fba8 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	4622      	mov	r2, r4
 8000dac:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000db0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000db4:	f001 fba0 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000db8:	f10d 0107 	add.w	r1, sp, #7
 8000dbc:	6830      	ldr	r0, [r6, #0]
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f002 fbef 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000dc6:	682b      	ldr	r3, [r5, #0]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000dce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000dd2:	f001 fb91 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4639      	mov	r1, r7
 8000dda:	2380      	movs	r3, #128	@ 0x80
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de0:	f88d 3007 	strb.w	r3, [sp, #7]
 8000de4:	f001 fb88 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000de8:	682b      	ldr	r3, [r5, #0]
 8000dea:	4622      	mov	r2, r4
 8000dec:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000df0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000df4:	f001 fb80 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000df8:	f10d 0107 	add.w	r1, sp, #7
 8000dfc:	6830      	ldr	r0, [r6, #0]
 8000dfe:	230a      	movs	r3, #10
 8000e00:	2201      	movs	r2, #1
 8000e02:	f002 fbcf 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000e06:	682b      	ldr	r3, [r5, #0]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000e0e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000e12:	f001 fb71 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000e16:	4622      	mov	r2, r4
 8000e18:	4639      	mov	r1, r7
 8000e1a:	23d9      	movs	r3, #217	@ 0xd9
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e24:	f001 fb68 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000e28:	682b      	ldr	r3, [r5, #0]
 8000e2a:	4622      	mov	r2, r4
 8000e2c:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000e30:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000e34:	f001 fb60 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000e38:	f10d 0107 	add.w	r1, sp, #7
 8000e3c:	6830      	ldr	r0, [r6, #0]
 8000e3e:	230a      	movs	r3, #10
 8000e40:	2201      	movs	r2, #1
 8000e42:	f002 fbaf 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000e46:	682b      	ldr	r3, [r5, #0]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000e4e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000e52:	f001 fb51 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000e56:	4622      	mov	r2, r4
 8000e58:	4639      	mov	r1, r7
 8000e5a:	2322      	movs	r3, #34	@ 0x22
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e60:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e64:	f001 fb48 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000e68:	682b      	ldr	r3, [r5, #0]
 8000e6a:	4622      	mov	r2, r4
 8000e6c:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000e70:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000e74:	f001 fb40 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000e78:	f10d 0107 	add.w	r1, sp, #7
 8000e7c:	6830      	ldr	r0, [r6, #0]
 8000e7e:	230a      	movs	r3, #10
 8000e80:	2201      	movs	r2, #1
 8000e82:	f002 fb8f 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000e8e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000e92:	f001 fb31 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000e96:	4622      	mov	r2, r4
 8000e98:	4639      	mov	r1, r7
 8000e9a:	23da      	movs	r3, #218	@ 0xda
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea0:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ea4:	f001 fb28 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	4622      	mov	r2, r4
 8000eac:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000eb0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000eb4:	f001 fb20 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000eb8:	f10d 0107 	add.w	r1, sp, #7
 8000ebc:	6830      	ldr	r0, [r6, #0]
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f002 fb6f 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000ec6:	682b      	ldr	r3, [r5, #0]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ece:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000ed2:	f001 fb11 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000ed6:	4622      	mov	r2, r4
 8000ed8:	4639      	mov	r1, r7
 8000eda:	2312      	movs	r3, #18
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee0:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ee4:	f001 fb08 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	4622      	mov	r2, r4
 8000eec:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000ef0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000ef4:	f001 fb00 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000ef8:	f10d 0107 	add.w	r1, sp, #7
 8000efc:	6830      	ldr	r0, [r6, #0]
 8000efe:	230a      	movs	r3, #10
 8000f00:	2201      	movs	r2, #1
 8000f02:	f002 fb4f 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000f06:	682b      	ldr	r3, [r5, #0]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000f0e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000f12:	f001 faf1 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000f16:	4622      	mov	r2, r4
 8000f18:	4639      	mov	r1, r7
 8000f1a:	23db      	movs	r3, #219	@ 0xdb
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f20:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f24:	f001 fae8 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000f30:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000f34:	f001 fae0 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000f38:	f10d 0107 	add.w	r1, sp, #7
 8000f3c:	6830      	ldr	r0, [r6, #0]
 8000f3e:	230a      	movs	r3, #10
 8000f40:	2201      	movs	r2, #1
 8000f42:	f002 fb2f 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000f46:	682b      	ldr	r3, [r5, #0]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000f4e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000f52:	f001 fad1 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000f56:	4622      	mov	r2, r4
 8000f58:	4639      	mov	r1, r7
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5e:	f88d 8007 	strb.w	r8, [sp, #7]
 8000f62:	f001 fac9 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000f66:	682b      	ldr	r3, [r5, #0]
 8000f68:	4622      	mov	r2, r4
 8000f6a:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000f6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000f72:	f001 fac1 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000f76:	f10d 0107 	add.w	r1, sp, #7
 8000f7a:	6830      	ldr	r0, [r6, #0]
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f002 fb10 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000f8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000f90:	f001 fab2 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000f94:	4622      	mov	r2, r4
 8000f96:	4639      	mov	r1, r7
 8000f98:	238d      	movs	r3, #141	@ 0x8d
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9e:	f88d 3007 	strb.w	r3, [sp, #7]
 8000fa2:	f001 faa9 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000fa6:	682b      	ldr	r3, [r5, #0]
 8000fa8:	4622      	mov	r2, r4
 8000faa:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000fae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000fb2:	f001 faa1 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000fb6:	f10d 0107 	add.w	r1, sp, #7
 8000fba:	6830      	ldr	r0, [r6, #0]
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f002 faf0 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000fcc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000fd0:	f001 fa92 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8000fd4:	4622      	mov	r2, r4
 8000fd6:	4639      	mov	r1, r7
 8000fd8:	2314      	movs	r3, #20
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fde:	f88d 3007 	strb.w	r3, [sp, #7]
 8000fe2:	f001 fa89 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8000fe6:	682b      	ldr	r3, [r5, #0]
 8000fe8:	4622      	mov	r2, r4
 8000fea:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8000fee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8000ff2:	f001 fa81 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8000ff6:	f10d 0107 	add.w	r1, sp, #7
 8000ffa:	6830      	ldr	r0, [r6, #0]
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	2201      	movs	r2, #1
 8001000:	f002 fad0 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8001004:	682b      	ldr	r3, [r5, #0]
 8001006:	2201      	movs	r2, #1
 8001008:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800100c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001010:	f001 fa72 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8001014:	4622      	mov	r2, r4
 8001016:	4639      	mov	r1, r7
 8001018:	23a4      	movs	r3, #164	@ 0xa4
 800101a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001022:	f001 fa69 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8001026:	682b      	ldr	r3, [r5, #0]
 8001028:	4622      	mov	r2, r4
 800102a:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800102e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001032:	f001 fa61 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8001036:	f10d 0107 	add.w	r1, sp, #7
 800103a:	6830      	ldr	r0, [r6, #0]
 800103c:	230a      	movs	r3, #10
 800103e:	2201      	movs	r2, #1
 8001040:	f002 fab0 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	2201      	movs	r2, #1
 8001048:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800104c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001050:	f001 fa52 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8001054:	4622      	mov	r2, r4
 8001056:	4639      	mov	r1, r7
 8001058:	232e      	movs	r3, #46	@ 0x2e
 800105a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001062:	f001 fa49 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8001066:	682b      	ldr	r3, [r5, #0]
 8001068:	4622      	mov	r2, r4
 800106a:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800106e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001072:	f001 fa41 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8001076:	f10d 0107 	add.w	r1, sp, #7
 800107a:	6830      	ldr	r0, [r6, #0]
 800107c:	230a      	movs	r3, #10
 800107e:	2201      	movs	r2, #1
 8001080:	f002 fa90 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	2201      	movs	r2, #1
 8001088:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800108c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001090:	f001 fa32 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8001094:	4622      	mov	r2, r4
 8001096:	4639      	mov	r1, r7
 8001098:	2323      	movs	r3, #35	@ 0x23
 800109a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109e:	f88d 3007 	strb.w	r3, [sp, #7]
 80010a2:	f001 fa29 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80010a6:	682b      	ldr	r3, [r5, #0]
 80010a8:	4622      	mov	r2, r4
 80010aa:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80010ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80010b2:	f001 fa21 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 80010b6:	f10d 0107 	add.w	r1, sp, #7
 80010ba:	6830      	ldr	r0, [r6, #0]
 80010bc:	230a      	movs	r3, #10
 80010be:	2201      	movs	r2, #1
 80010c0:	f002 fa70 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80010cc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80010d0:	f001 fa12 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 80010d4:	4622      	mov	r2, r4
 80010d6:	4639      	mov	r1, r7
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f88d 4007 	strb.w	r4, [sp, #7]
 80010e0:	f001 fa0a 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	4622      	mov	r2, r4
 80010e8:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80010ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80010f0:	f001 fa02 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 80010f4:	f10d 0107 	add.w	r1, sp, #7
 80010f8:	6830      	ldr	r0, [r6, #0]
 80010fa:	230a      	movs	r3, #10
 80010fc:	2201      	movs	r2, #1
 80010fe:	f002 fa51 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8001102:	682b      	ldr	r3, [r5, #0]
 8001104:	2201      	movs	r2, #1
 8001106:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800110a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800110e:	f001 f9f3 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 8001112:	4639      	mov	r1, r7
 8001114:	4622      	mov	r2, r4
 8001116:	23af      	movs	r3, #175	@ 0xaf
 8001118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001120:	f001 f9ea 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	4622      	mov	r2, r4
 8001128:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800112c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001130:	f001 f9e2 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8001134:	f10d 0107 	add.w	r1, sp, #7
 8001138:	6830      	ldr	r0, [r6, #0]
 800113a:	2201      	movs	r2, #1
 800113c:	230a      	movs	r3, #10
 800113e:	f002 fa31 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8001142:	682b      	ldr	r3, [r5, #0]
 8001144:	2201      	movs	r2, #1
 8001146:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800114a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800114e:	f001 f9d3 	bl	80024f8 <HAL_GPIO_WritePin>
#if ADVANCED_GRAPHIC_COMMANDS == 1
	SSD1306_StopFadeOutOrBlinking();
#endif

	SSD1306_DisplayON(1);
}
 8001152:	b002      	add	sp, #8
 8001154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001158 <SSD1306_SpiInit>:
#endif

#ifdef SSD1306_SPI_CONTROL
void SSD1306_SpiInit(SPI_HandleTypeDef *spi)
{
	ssd1306_spi = spi;
 8001158:	4b01      	ldr	r3, [pc, #4]	@ (8001160 <SSD1306_SpiInit+0x8>)
 800115a:	6018      	str	r0, [r3, #0]

#if defined(SSD1306_RESET_USE)
	//SSD1306_Reset();
#endif
	SSD1306_Init();
 800115c:	f7ff bc32 	b.w	80009c4 <SSD1306_Init>
 8001160:	2000009c 	.word	0x2000009c

08001164 <SSD1306_DrawPixel>:
//
// Draw pixel in the buffer
//
void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
	if (currentOLED->rotation_90)
 8001164:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <SSD1306_DrawPixel+0x84>)
{
 8001166:	b430      	push	{r4, r5}
	if (currentOLED->rotation_90)
 8001168:	681d      	ldr	r5, [r3, #0]
 800116a:	f895 4400 	ldrb.w	r4, [r5, #1024]	@ 0x400
	{
		if ((x < 0) || (x >= SSD1306_LCDHEIGHT) || (y < 0) || (y >= SSD1306_LCDWIDTH))
 800116e:	b283      	uxth	r3, r0
	if (currentOLED->rotation_90)
 8001170:	b14c      	cbz	r4, 8001186 <SSD1306_DrawPixel+0x22>
		if ((x < 0) || (x >= SSD1306_LCDHEIGHT) || (y < 0) || (y >= SSD1306_LCDWIDTH))
 8001172:	2b3f      	cmp	r3, #63	@ 0x3f
 8001174:	d811      	bhi.n	800119a <SSD1306_DrawPixel+0x36>
 8001176:	b28b      	uxth	r3, r1
 8001178:	2b7f      	cmp	r3, #127	@ 0x7f
 800117a:	d80e      	bhi.n	800119a <SSD1306_DrawPixel+0x36>
				 return;
		int16_t new_x = 127-y;
 800117c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
		int16_t new_y = x;
		x = new_x;
		y = new_y;
 8001180:	4601      	mov	r1, r0
		x = new_x;
 8001182:	b218      	sxth	r0, r3
 8001184:	e004      	b.n	8001190 <SSD1306_DrawPixel+0x2c>
	}
	else{
		 if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8001186:	2b7f      	cmp	r3, #127	@ 0x7f
 8001188:	d807      	bhi.n	800119a <SSD1306_DrawPixel+0x36>
 800118a:	b28b      	uxth	r3, r1
 800118c:	2b3f      	cmp	r3, #63	@ 0x3f
 800118e:	d804      	bhi.n	800119a <SSD1306_DrawPixel+0x36>
			 return;
	}

	 switch(Color)
 8001190:	2a01      	cmp	r2, #1
 8001192:	d01d      	beq.n	80011d0 <SSD1306_DrawPixel+0x6c>
 8001194:	2a02      	cmp	r2, #2
 8001196:	d00f      	beq.n	80011b8 <SSD1306_DrawPixel+0x54>
 8001198:	b10a      	cbz	r2, 800119e <SSD1306_DrawPixel+0x3a>
	 {
		 case WHITE:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] |=  (1 << (y&7)); break;
		 case BLACK:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); break;
		 case INVERSE: currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] ^=  (1 << (y&7)); break;
	 }
}
 800119a:	bc30      	pop	{r4, r5}
 800119c:	4770      	bx	lr
		 case BLACK:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); break;
 800119e:	10cb      	asrs	r3, r1, #3
 80011a0:	2280      	movs	r2, #128	@ 0x80
 80011a2:	fb13 0302 	smlabb	r3, r3, r2, r0
 80011a6:	f001 0007 	and.w	r0, r1, #7
 80011aa:	5cea      	ldrb	r2, [r5, r3]
 80011ac:	2101      	movs	r1, #1
 80011ae:	4081      	lsls	r1, r0
 80011b0:	ea22 0201 	bic.w	r2, r2, r1
 80011b4:	54ea      	strb	r2, [r5, r3]
 80011b6:	e7f0      	b.n	800119a <SSD1306_DrawPixel+0x36>
		 case INVERSE: currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] ^=  (1 << (y&7)); break;
 80011b8:	10ca      	asrs	r2, r1, #3
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	fb12 0203 	smlabb	r2, r2, r3, r0
 80011c0:	f001 0107 	and.w	r1, r1, #7
 80011c4:	5ca8      	ldrb	r0, [r5, r2]
 80011c6:	2301      	movs	r3, #1
 80011c8:	408b      	lsls	r3, r1
 80011ca:	4043      	eors	r3, r0
 80011cc:	54ab      	strb	r3, [r5, r2]
 80011ce:	e7e4      	b.n	800119a <SSD1306_DrawPixel+0x36>
		 case WHITE:   currentOLED->buffer[x+ (y/8)*SSD1306_LCDWIDTH] |=  (1 << (y&7)); break;
 80011d0:	10cb      	asrs	r3, r1, #3
 80011d2:	f001 0107 	and.w	r1, r1, #7
 80011d6:	408a      	lsls	r2, r1
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	fb13 0301 	smlabb	r3, r3, r1, r0
 80011de:	5ce9      	ldrb	r1, [r5, r3]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	54ea      	strb	r2, [r5, r3]
 80011e4:	e7d9      	b.n	800119a <SSD1306_DrawPixel+0x36>
 80011e6:	bf00      	nop
 80011e8:	20000098 	.word	0x20000098

080011ec <SSD1306_Clear>:
//
// Clear the buffer
//
void SSD1306_Clear(uint8_t Color)
{
	switch (Color)
 80011ec:	4601      	mov	r1, r0
 80011ee:	b140      	cbz	r0, 8001202 <SSD1306_Clear+0x16>
 80011f0:	2801      	cmp	r0, #1
 80011f2:	d10c      	bne.n	800120e <SSD1306_Clear+0x22>
	{
		case WHITE:
			memset(currentOLED->buffer, 0xFF, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <SSD1306_Clear+0x24>)
 80011f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	21ff      	movs	r1, #255	@ 0xff
 80011fe:	f003 bb9b 	b.w	8004938 <memset>
			break;
		case BLACK:
			memset(currentOLED->buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8001202:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <SSD1306_Clear+0x24>)
 8001204:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	f003 bb95 	b.w	8004938 <memset>
			break;
	}
}
 800120e:	4770      	bx	lr
 8001210:	20000098 	.word	0x20000098

08001214 <SSD1306_Display>:

//
// Send buffer to OLDE GCRAM
//
void SSD1306_Display(void)
{
 8001214:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 8001216:	4c42      	ldr	r4, [pc, #264]	@ (8001320 <SSD1306_Display+0x10c>)
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 8001218:	4e42      	ldr	r6, [pc, #264]	@ (8001324 <SSD1306_Display+0x110>)
{
 800121a:	b082      	sub	sp, #8
 800121c:	2322      	movs	r3, #34	@ 0x22
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2110      	movs	r1, #16
 8001222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001226:	f88d 3007 	strb.w	r3, [sp, #7]
 800122a:	f001 f965 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	2200      	movs	r2, #0
 8001232:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001236:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800123a:	f001 f95d 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 800123e:	230a      	movs	r3, #10
 8001240:	2201      	movs	r2, #1
 8001242:	f10d 0107 	add.w	r1, sp, #7
 8001246:	6830      	ldr	r0, [r6, #0]
 8001248:	f002 f9ac 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	2500      	movs	r5, #0
 8001250:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001254:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001258:	2201      	movs	r2, #1
 800125a:	f001 f94d 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 800125e:	462a      	mov	r2, r5
 8001260:	2110      	movs	r1, #16
 8001262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001266:	f88d 5007 	strb.w	r5, [sp, #7]
 800126a:	f001 f945 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	462a      	mov	r2, r5
 8001272:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001276:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800127a:	f001 f93d 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 800127e:	230a      	movs	r3, #10
 8001280:	2201      	movs	r2, #1
 8001282:	f10d 0107 	add.w	r1, sp, #7
 8001286:	6830      	ldr	r0, [r6, #0]
 8001288:	f002 f98c 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	2201      	movs	r2, #1
 8001290:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 8001294:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001298:	f001 f92e 	bl	80024f8 <HAL_GPIO_WritePin>
	SSD1306_Command(0x22);
	SSD1306_Command(0x00);
	SSD1306_Command(0x07);
 800129c:	2307      	movs	r3, #7
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_RESET);
 800129e:	462a      	mov	r2, r5
 80012a0:	2110      	movs	r1, #16
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a6:	f88d 3007 	strb.w	r3, [sp, #7]
 80012aa:	f001 f925 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	462a      	mov	r2, r5
 80012b2:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80012b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80012ba:	f001 f91d 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1306_spi, &com, 1, 10);
 80012be:	230a      	movs	r3, #10
 80012c0:	f10d 0107 	add.w	r1, sp, #7
 80012c4:	2201      	movs	r2, #1
 80012c6:	6830      	ldr	r0, [r6, #0]
 80012c8:	f002 f96c 	bl	80035a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80012d4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80012d8:	f001 f90e 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_I2C_Mem_Write(ssd1306_i2c, SSD1306_I2C_ADDRESS, 0x40, 1, (uint8_t*)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
#endif
#endif
#ifdef SSD1306_SPI_CONTROL
#ifdef SSD1306_SPI_DMA_ENABLE
	HAL_GPIO_WritePin(SSD1306_DC_GPIO_Port, SSD1306_DC_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2110      	movs	r1, #16
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e4:	f001 f908 	bl	80024f8 <HAL_GPIO_WritePin>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_RESET);
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	462a      	mov	r2, r5
 80012ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80012f0:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 80012f4:	f001 f900 	bl	80024f8 <HAL_GPIO_WritePin>
#endif
	while (ssd1306_spi->hdmatx->State != HAL_DMA_STATE_READY){};
 80012f8:	6830      	ldr	r0, [r6, #0]
 80012fa:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80012fc:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8001300:	2b01      	cmp	r3, #1
 8001302:	d1fb      	bne.n	80012fc <SSD1306_Display+0xe8>
	if(ssd1306_spi->hdmatx->State == HAL_DMA_STATE_READY)
 8001304:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8001308:	2b01      	cmp	r3, #1
 800130a:	d001      	beq.n	8001310 <SSD1306_Display+0xfc>
#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(currentOLED.PortCS, currentOLED.PinCS, GPIO_PIN_SET);
#endif
#endif
#endif
}
 800130c:	b002      	add	sp, #8
 800130e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_SPI_Transmit_DMA(ssd1306_spi, (uint8_t*)&currentOLED->buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8001310:	6821      	ldr	r1, [r4, #0]
 8001312:	f44f 6280 	mov.w	r2, #1024	@ 0x400
}
 8001316:	b002      	add	sp, #8
 8001318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_SPI_Transmit_DMA(ssd1306_spi, (uint8_t*)&currentOLED->buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 800131c:	f002 ba66 	b.w	80037ec <HAL_SPI_Transmit_DMA>
 8001320:	20000098 	.word	0x20000098
 8001324:	2000009c 	.word	0x2000009c

08001328 <SSD1306_DmaEndCallback>:
}

#if defined(SSD1306_SPI_CONTROL) && defined(SSD1306_SPI_DMA_ENABLE) && !defined(SPI_CS_HARDWARE_CONTROL)
void SSD1306_DmaEndCallback(SPI_HandleTypeDef *hspi)
{
	if(hspi == ssd1306_spi)
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <SSD1306_DmaEndCallback+0x1c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4283      	cmp	r3, r0
 800132e:	d000      	beq.n	8001332 <SSD1306_DmaEndCallback+0xa>
	{
		HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
	}
}
 8001330:	4770      	bx	lr
		HAL_GPIO_WritePin(currentOLED->PortCS, currentOLED->PinCS, GPIO_PIN_SET);
 8001332:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SSD1306_DmaEndCallback+0x20>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2201      	movs	r2, #1
 8001338:	f8b3 1408 	ldrh.w	r1, [r3, #1032]	@ 0x408
 800133c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8001340:	f001 b8da 	b.w	80024f8 <HAL_GPIO_WritePin>
 8001344:	2000009c 	.word	0x2000009c
 8001348:	20000098 	.word	0x20000098

0800134c <_Z13emptyCallback16EncoderDirectionh>:
	}
}

void emptyCallback(EncoderDirection dir, uint8_t velocity){

}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop

08001350 <_Z10drawScreenv.part.0>:
void drawScreen(){
 8001350:	b570      	push	{r4, r5, r6, lr}
			SSD1306_SetOLED(&oled1);
 8001352:	483b      	ldr	r0, [pc, #236]	@ (8001440 <_Z10drawScreenv.part.0+0xf0>)
			while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 8001354:	4e3b      	ldr	r6, [pc, #236]	@ (8001444 <_Z10drawScreenv.part.0+0xf4>)
void drawScreen(){
 8001356:	b088      	sub	sp, #32
			SSD1306_SetOLED(&oled1);
 8001358:	f7ff faca 	bl	80008f0 <SSD1306_SetOLED>
			SSD1306_Clear(BLACK);
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff ff45 	bl	80011ec <SSD1306_Clear>
			GFX_DrawString(0,3, stringstate, WHITE, BLACK);
 8001362:	2400      	movs	r4, #0
			GFX_SetFontSize(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff fa6f 	bl	8000848 <GFX_SetFontSize>
			GFX_DrawString(0,3, stringstate, WHITE, BLACK);
 800136a:	4a37      	ldr	r2, [pc, #220]	@ (8001448 <_Z10drawScreenv.part.0+0xf8>)
 800136c:	9400      	str	r4, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	2103      	movs	r1, #3
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff fa6e 	bl	8000854 <GFX_DrawString>
			GFX_DrawString(0,11, msg, WHITE, BLACK);
 8001378:	2301      	movs	r3, #1
 800137a:	4a34      	ldr	r2, [pc, #208]	@ (800144c <_Z10drawScreenv.part.0+0xfc>)
 800137c:	9400      	str	r4, [sp, #0]
 800137e:	210b      	movs	r1, #11
 8001380:	4620      	mov	r0, r4
 8001382:	f7ff fa67 	bl	8000854 <GFX_DrawString>
			SSD1306_Display();
 8001386:	f7ff ff45 	bl	8001214 <SSD1306_Display>
			while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 800138a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800138c:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8001390:	2a01      	cmp	r2, #1
 8001392:	b2d4      	uxtb	r4, r2
 8001394:	d1fa      	bne.n	800138c <_Z10drawScreenv.part.0+0x3c>
			SSD1306_SetOLED(&oled2);
 8001396:	482e      	ldr	r0, [pc, #184]	@ (8001450 <_Z10drawScreenv.part.0+0x100>)
 8001398:	f7ff faaa 	bl	80008f0 <SSD1306_SetOLED>
			SSD1306_Clear(BLACK);
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff ff25 	bl	80011ec <SSD1306_Clear>
			GFX_SetFontSize(1);
 80013a2:	4620      	mov	r0, r4
			char tmp[20] = "";
 80013a4:	2500      	movs	r5, #0
			GFX_SetFontSize(1);
 80013a6:	f7ff fa4f 	bl	8000848 <GFX_SetFontSize>
			sprintf(tmp, "Enc1 = %d", enc1.getCounter());
 80013aa:	482a      	ldr	r0, [pc, #168]	@ (8001454 <_Z10drawScreenv.part.0+0x104>)
			char tmp[20] = "";
 80013ac:	9507      	str	r5, [sp, #28]
 80013ae:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80013b2:	e9cd 5505 	strd	r5, r5, [sp, #20]
			sprintf(tmp, "Enc1 = %d", enc1.getCounter());
 80013b6:	f000 fa43 	bl	8001840 <_ZN7Encoder10getCounterEv>
 80013ba:	4927      	ldr	r1, [pc, #156]	@ (8001458 <_Z10drawScreenv.part.0+0x108>)
 80013bc:	4602      	mov	r2, r0
 80013be:	a803      	add	r0, sp, #12
 80013c0:	f003 fa9a 	bl	80048f8 <siprintf>
			GFX_DrawString(0,3, tmp, WHITE, BLACK);
 80013c4:	4623      	mov	r3, r4
 80013c6:	2103      	movs	r1, #3
 80013c8:	aa03      	add	r2, sp, #12
 80013ca:	4628      	mov	r0, r5
 80013cc:	9500      	str	r5, [sp, #0]
 80013ce:	f7ff fa41 	bl	8000854 <GFX_DrawString>
			sprintf(tmp, "Enc2 = %d", enc2.getCounter());
 80013d2:	4822      	ldr	r0, [pc, #136]	@ (800145c <_Z10drawScreenv.part.0+0x10c>)
 80013d4:	f000 fa34 	bl	8001840 <_ZN7Encoder10getCounterEv>
 80013d8:	4921      	ldr	r1, [pc, #132]	@ (8001460 <_Z10drawScreenv.part.0+0x110>)
 80013da:	4602      	mov	r2, r0
 80013dc:	a803      	add	r0, sp, #12
 80013de:	f003 fa8b 	bl	80048f8 <siprintf>
			GFX_DrawString(0,11, tmp, WHITE, BLACK);
 80013e2:	4623      	mov	r3, r4
 80013e4:	210b      	movs	r1, #11
 80013e6:	aa03      	add	r2, sp, #12
 80013e8:	4628      	mov	r0, r5
 80013ea:	9500      	str	r5, [sp, #0]
 80013ec:	f7ff fa32 	bl	8000854 <GFX_DrawString>
			sprintf(tmp, "Enc3 = %d", enc3.getCounter());
 80013f0:	481c      	ldr	r0, [pc, #112]	@ (8001464 <_Z10drawScreenv.part.0+0x114>)
 80013f2:	f000 fa25 	bl	8001840 <_ZN7Encoder10getCounterEv>
 80013f6:	491c      	ldr	r1, [pc, #112]	@ (8001468 <_Z10drawScreenv.part.0+0x118>)
 80013f8:	4602      	mov	r2, r0
 80013fa:	a803      	add	r0, sp, #12
 80013fc:	f003 fa7c 	bl	80048f8 <siprintf>
			GFX_DrawString(0,19, tmp, WHITE, BLACK);
 8001400:	4623      	mov	r3, r4
 8001402:	2113      	movs	r1, #19
 8001404:	aa03      	add	r2, sp, #12
 8001406:	4628      	mov	r0, r5
 8001408:	9500      	str	r5, [sp, #0]
 800140a:	f7ff fa23 	bl	8000854 <GFX_DrawString>
			sprintf(tmp, "Enc4 = %d", enc4.getCounter());
 800140e:	4817      	ldr	r0, [pc, #92]	@ (800146c <_Z10drawScreenv.part.0+0x11c>)
 8001410:	f000 fa16 	bl	8001840 <_ZN7Encoder10getCounterEv>
 8001414:	4916      	ldr	r1, [pc, #88]	@ (8001470 <_Z10drawScreenv.part.0+0x120>)
 8001416:	4602      	mov	r2, r0
 8001418:	a803      	add	r0, sp, #12
 800141a:	f003 fa6d 	bl	80048f8 <siprintf>
			GFX_DrawString(0,27, tmp, WHITE, BLACK);
 800141e:	aa03      	add	r2, sp, #12
 8001420:	4623      	mov	r3, r4
 8001422:	211b      	movs	r1, #27
 8001424:	4628      	mov	r0, r5
 8001426:	9500      	str	r5, [sp, #0]
 8001428:	f7ff fa14 	bl	8000854 <GFX_DrawString>
			SSD1306_Display();
 800142c:	f7ff fef2 	bl	8001214 <SSD1306_Display>
			while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 8001430:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8001432:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8001436:	2b01      	cmp	r3, #1
 8001438:	d1fb      	bne.n	8001432 <_Z10drawScreenv.part.0+0xe2>
}
 800143a:	b008      	add	sp, #32
 800143c:	bd70      	pop	{r4, r5, r6, pc}
 800143e:	bf00      	nop
 8001440:	20000584 	.word	0x20000584
 8001444:	20000ad8 	.word	0x20000ad8
 8001448:	20000004 	.word	0x20000004
 800144c:	200000a4 	.word	0x200000a4
 8001450:	20000178 	.word	0x20000178
 8001454:	2000014c 	.word	0x2000014c
 8001458:	08005278 	.word	0x08005278
 800145c:	20000120 	.word	0x20000120
 8001460:	08005284 	.word	0x08005284
 8001464:	200000f4 	.word	0x200000f4
 8001468:	08005290 	.word	0x08005290
 800146c:	200000c8 	.word	0x200000c8
 8001470:	0800529c 	.word	0x0800529c

08001474 <_Z15initializeOLEDsv>:
void initializeOLEDs(){
 8001474:	b5f0      	push	{r4, r5, r6, r7, lr}
	oled2.PortCS = SSD1306_CS2_GPIO_Port;
 8001476:	4b2c      	ldr	r3, [pc, #176]	@ (8001528 <_Z15initializeOLEDsv+0xb4>)
 8001478:	4a2c      	ldr	r2, [pc, #176]	@ (800152c <_Z15initializeOLEDsv+0xb8>)
	oled1.PortCS = SSD1306_CS_GPIO_Port;
 800147a:	4e2d      	ldr	r6, [pc, #180]	@ (8001530 <_Z15initializeOLEDsv+0xbc>)
	oled2.PortCS = SSD1306_CS2_GPIO_Port;
 800147c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
	oled2.PinCS = SSD1306_CS2_Pin;
 8001480:	2401      	movs	r4, #1
void initializeOLEDs(){
 8001482:	b083      	sub	sp, #12
	oled1.PortCS = SSD1306_CS_GPIO_Port;
 8001484:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
	oled1.rotation_90 = false;
 8001488:	2500      	movs	r5, #0
	GFX_SetFont(font_8x5);
 800148a:	482a      	ldr	r0, [pc, #168]	@ (8001534 <_Z15initializeOLEDsv+0xc0>)
	oled2.PinCS = SSD1306_CS2_Pin;
 800148c:	f8a3 4408 	strh.w	r4, [r3, #1032]	@ 0x408
	oled2.rotation_90 = true;
 8001490:	f883 4400 	strb.w	r4, [r3, #1024]	@ 0x400
	oled1.PinCS = SSD1306_CS_Pin;
 8001494:	2340      	movs	r3, #64	@ 0x40
	oled1.PortCS = SSD1306_CS_GPIO_Port;
 8001496:	f8c6 1404 	str.w	r1, [r6, #1028]	@ 0x404
	oled1.PinCS = SSD1306_CS_Pin;
 800149a:	f8a6 3408 	strh.w	r3, [r6, #1032]	@ 0x408
	SSD1306_SpiInit(&hspi1);
 800149e:	4f26      	ldr	r7, [pc, #152]	@ (8001538 <_Z15initializeOLEDsv+0xc4>)
	oled1.rotation_90 = false;
 80014a0:	f886 5400 	strb.w	r5, [r6, #1024]	@ 0x400
	GFX_SetFont(font_8x5);
 80014a4:	f7ff f9ca 	bl	800083c <GFX_SetFont>
	GFX_SetFontSize(1);
 80014a8:	4620      	mov	r0, r4
 80014aa:	f7ff f9cd 	bl	8000848 <GFX_SetFontSize>
	SSD1306_ResetOLEDS();
 80014ae:	f7ff fa25 	bl	80008fc <SSD1306_ResetOLEDS>
	SSD1306_SetOLED(&oled1);
 80014b2:	4630      	mov	r0, r6
 80014b4:	f7ff fa1c 	bl	80008f0 <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 80014b8:	4638      	mov	r0, r7
 80014ba:	f7ff fe4d 	bl	8001158 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff fa2e 	bl	8000920 <SSD1306_RotateDisplay>
	SSD1306_Clear(BLACK);
 80014c4:	4628      	mov	r0, r5
 80014c6:	f7ff fe91 	bl	80011ec <SSD1306_Clear>
	GFX_DrawString(0,3, "pierwszy", WHITE, BLACK);
 80014ca:	4623      	mov	r3, r4
 80014cc:	4a1b      	ldr	r2, [pc, #108]	@ (800153c <_Z15initializeOLEDsv+0xc8>)
 80014ce:	9500      	str	r5, [sp, #0]
 80014d0:	2103      	movs	r1, #3
 80014d2:	4628      	mov	r0, r5
 80014d4:	f7ff f9be 	bl	8000854 <GFX_DrawString>
	SSD1306_Display();
 80014d8:	f7ff fe9c 	bl	8001214 <SSD1306_Display>
	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 80014dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014de:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80014e2:	2a01      	cmp	r2, #1
 80014e4:	b2d4      	uxtb	r4, r2
 80014e6:	d1fa      	bne.n	80014de <_Z15initializeOLEDsv+0x6a>
	SSD1306_SetOLED(&oled2);
 80014e8:	480f      	ldr	r0, [pc, #60]	@ (8001528 <_Z15initializeOLEDsv+0xb4>)
 80014ea:	f7ff fa01 	bl	80008f0 <SSD1306_SetOLED>
	SSD1306_SpiInit(&hspi1);
 80014ee:	4812      	ldr	r0, [pc, #72]	@ (8001538 <_Z15initializeOLEDsv+0xc4>)
 80014f0:	f7ff fe32 	bl	8001158 <SSD1306_SpiInit>
	SSD1306_RotateDisplay(1);
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff fa13 	bl	8000920 <SSD1306_RotateDisplay>
	SSD1306_Clear(WHITE);
 80014fa:	4620      	mov	r0, r4
 80014fc:	f7ff fe76 	bl	80011ec <SSD1306_Clear>
	GFX_DrawString(0,3, "drugi", WHITE, BLACK);
 8001500:	2000      	movs	r0, #0
 8001502:	4a0f      	ldr	r2, [pc, #60]	@ (8001540 <_Z15initializeOLEDsv+0xcc>)
 8001504:	9000      	str	r0, [sp, #0]
 8001506:	4623      	mov	r3, r4
 8001508:	2103      	movs	r1, #3
 800150a:	f7ff f9a3 	bl	8000854 <GFX_DrawString>
	SSD1306_Display();
 800150e:	f7ff fe81 	bl	8001214 <SSD1306_Display>
	SSD1306_SetOLED(&oled1);
 8001512:	4807      	ldr	r0, [pc, #28]	@ (8001530 <_Z15initializeOLEDsv+0xbc>)
 8001514:	f7ff f9ec 	bl	80008f0 <SSD1306_SetOLED>
	while(hspi1.hdmatx->State != HAL_DMA_STATE_READY){}
 8001518:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800151a:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 800151e:	2b01      	cmp	r3, #1
 8001520:	d1fb      	bne.n	800151a <_Z15initializeOLEDsv+0xa6>
}
 8001522:	b003      	add	sp, #12
 8001524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001526:	bf00      	nop
 8001528:	20000178 	.word	0x20000178
 800152c:	48000400 	.word	0x48000400
 8001530:	20000584 	.word	0x20000584
 8001534:	080052bc 	.word	0x080052bc
 8001538:	20000ad8 	.word	0x20000ad8
 800153c:	080052a8 	.word	0x080052a8
 8001540:	080052b4 	.word	0x080052b4

08001544 <_Z18initializeEncodersv>:

void initializeEncoders(){
 8001544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	enc1.setCallback(emptyCallback);
 8001548:	4c1f      	ldr	r4, [pc, #124]	@ (80015c8 <_Z18initializeEncodersv+0x84>)
 800154a:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 80015d8 <_Z18initializeEncodersv+0x94>
	enc2.setCallback(emptyCallback);
 800154e:	4f1f      	ldr	r7, [pc, #124]	@ (80015cc <_Z18initializeEncodersv+0x88>)
	enc3.setCallback(emptyCallback);
 8001550:	4e1f      	ldr	r6, [pc, #124]	@ (80015d0 <_Z18initializeEncodersv+0x8c>)
	enc4.setCallback(emptyCallback);
 8001552:	4d20      	ldr	r5, [pc, #128]	@ (80015d4 <_Z18initializeEncodersv+0x90>)
	enc1.setCallback(emptyCallback);
 8001554:	4621      	mov	r1, r4
 8001556:	4640      	mov	r0, r8
 8001558:	f000 f97e 	bl	8001858 <_ZN7Encoder11setCallbackEPFv16EncoderDirectionhE>
	enc2.setCallback(emptyCallback);
 800155c:	4621      	mov	r1, r4
 800155e:	4638      	mov	r0, r7
 8001560:	f000 f97a 	bl	8001858 <_ZN7Encoder11setCallbackEPFv16EncoderDirectionhE>
	enc3.setCallback(emptyCallback);
 8001564:	4621      	mov	r1, r4
 8001566:	4630      	mov	r0, r6
 8001568:	f000 f976 	bl	8001858 <_ZN7Encoder11setCallbackEPFv16EncoderDirectionhE>
	enc4.setCallback(emptyCallback);
 800156c:	4621      	mov	r1, r4
 800156e:	4628      	mov	r0, r5
 8001570:	f000 f972 	bl	8001858 <_ZN7Encoder11setCallbackEPFv16EncoderDirectionhE>
	enc1.setConstrains(0, 256);
 8001574:	4640      	mov	r0, r8
 8001576:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800157a:	2100      	movs	r1, #0
 800157c:	f000 f922 	bl	80017c4 <_ZN7Encoder13setConstrainsEll>
	enc2.setConstrains(0, 256);
 8001580:	4638      	mov	r0, r7
 8001582:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001586:	2100      	movs	r1, #0
 8001588:	f000 f91c 	bl	80017c4 <_ZN7Encoder13setConstrainsEll>
	enc3.setConstrains(0, 256);
 800158c:	4630      	mov	r0, r6
 800158e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001592:	2100      	movs	r1, #0
 8001594:	f000 f916 	bl	80017c4 <_ZN7Encoder13setConstrainsEll>
	enc4.setConstrains(0, 256);
 8001598:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800159c:	4628      	mov	r0, r5
 800159e:	2100      	movs	r1, #0
 80015a0:	f000 f910 	bl	80017c4 <_ZN7Encoder13setConstrainsEll>
	enc1.setCounter(1);
 80015a4:	4640      	mov	r0, r8
 80015a6:	2101      	movs	r1, #1
 80015a8:	f000 f94c 	bl	8001844 <_ZN7Encoder10setCounterEl>
	enc2.setCounter(1);
 80015ac:	4638      	mov	r0, r7
 80015ae:	2101      	movs	r1, #1
 80015b0:	f000 f948 	bl	8001844 <_ZN7Encoder10setCounterEl>
	enc3.setCounter(1);
 80015b4:	4630      	mov	r0, r6
 80015b6:	2101      	movs	r1, #1
 80015b8:	f000 f944 	bl	8001844 <_ZN7Encoder10setCounterEl>
	enc4.setCounter(1);
 80015bc:	4628      	mov	r0, r5
 80015be:	2101      	movs	r1, #1
}
 80015c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	enc4.setCounter(1);
 80015c4:	f000 b93e 	b.w	8001844 <_ZN7Encoder10setCounterEl>
 80015c8:	0800134d 	.word	0x0800134d
 80015cc:	20000120 	.word	0x20000120
 80015d0:	200000f4 	.word	0x200000f4
 80015d4:	200000c8 	.word	0x200000c8
 80015d8:	2000014c 	.word	0x2000014c

080015dc <setup>:

void setup(){
 80015dc:	b508      	push	{r3, lr}
	initializeOLEDs();
 80015de:	f7ff ff49 	bl	8001474 <_Z15initializeOLEDsv>
	initializeEncoders();
}
 80015e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	initializeEncoders();
 80015e6:	f7ff bfad 	b.w	8001544 <_Z18initializeEncodersv>
 80015ea:	bf00      	nop

080015ec <Timer6Interrupt>:

void Timer6Interrupt(){
 80015ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!readState){
 80015ee:	4c2a      	ldr	r4, [pc, #168]	@ (8001698 <Timer6Interrupt+0xac>)
		writeAddress(currentReadChannel);
 80015f0:	4d2a      	ldr	r5, [pc, #168]	@ (800169c <Timer6Interrupt+0xb0>)
	if (!readState){
 80015f2:	7823      	ldrb	r3, [r4, #0]
 80015f4:	b1f3      	cbz	r3, 8001634 <Timer6Interrupt+0x48>
	state[channel] = (HAL_GPIO_ReadPin(MUX_Common_GPIO_Port, MUX_Common_Pin) == GPIO_PIN_SET);
 80015f6:	2180      	movs	r1, #128	@ 0x80
 80015f8:	4829      	ldr	r0, [pc, #164]	@ (80016a0 <Timer6Interrupt+0xb4>)
		readState = true;
	}
	if(readState){
		readInputState(currentReadChannel);
 80015fa:	782e      	ldrb	r6, [r5, #0]
	state[channel] = (HAL_GPIO_ReadPin(MUX_Common_GPIO_Port, MUX_Common_Pin) == GPIO_PIN_SET);
 80015fc:	4f29      	ldr	r7, [pc, #164]	@ (80016a4 <Timer6Interrupt+0xb8>)
 80015fe:	f000 ff75 	bl	80024ec <HAL_GPIO_ReadPin>
 8001602:	f1a0 0001 	sub.w	r0, r0, #1
 8001606:	fab0 f080 	clz	r0, r0
 800160a:	0940      	lsrs	r0, r0, #5
	if(HAL_GPIO_ReadPin(MUX_Common_GPIO_Port, MUX_Common_Pin)){
 800160c:	2180      	movs	r1, #128	@ 0x80
	state[channel] = (HAL_GPIO_ReadPin(MUX_Common_GPIO_Port, MUX_Common_Pin) == GPIO_PIN_SET);
 800160e:	55b8      	strb	r0, [r7, r6]
	if(HAL_GPIO_ReadPin(MUX_Common_GPIO_Port, MUX_Common_Pin)){
 8001610:	4823      	ldr	r0, [pc, #140]	@ (80016a0 <Timer6Interrupt+0xb4>)
 8001612:	f000 ff6b 	bl	80024ec <HAL_GPIO_ReadPin>
		++currentReadChannel;
 8001616:	782b      	ldrb	r3, [r5, #0]
 8001618:	4a23      	ldr	r2, [pc, #140]	@ (80016a8 <Timer6Interrupt+0xbc>)
 800161a:	3301      	adds	r3, #1
		stringstate[channel] = '1';
 800161c:	2800      	cmp	r0, #0
		++currentReadChannel;
 800161e:	b2db      	uxtb	r3, r3
		stringstate[channel] = '1';
 8001620:	bf0c      	ite	eq
 8001622:	2130      	moveq	r1, #48	@ 0x30
 8001624:	2131      	movne	r1, #49	@ 0x31
		if (currentReadChannel == 17){
 8001626:	2b11      	cmp	r3, #17
 8001628:	5591      	strb	r1, [r2, r6]
 800162a:	d023      	beq.n	8001674 <Timer6Interrupt+0x88>
		++currentReadChannel;
 800162c:	702b      	strb	r3, [r5, #0]
			enc1.refresh(state[0], state[1]);
			enc2.refresh(state[3], state[4]);
			enc3.refresh(state[6], state[7]);
			//enc4.refresh(state[9], state[10]);
		}
		readState = false;
 800162e:	2300      	movs	r3, #0
 8001630:	7023      	strb	r3, [r4, #0]
	}
}
 8001632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		writeAddress(currentReadChannel);
 8001634:	782e      	ldrb	r6, [r5, #0]
	HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin, (GPIO_PinState)bitRead(channel, 0));
 8001636:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800163a:	f006 0201 	and.w	r2, r6, #1
 800163e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001642:	f000 ff59 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_B_GPIO_Port, MUX_B_Pin, (GPIO_PinState)bitRead(channel, 1));
 8001646:	f3c6 0240 	ubfx	r2, r6, #1, #1
 800164a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800164e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001652:	f000 ff51 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_C_GPIO_Port, MUX_C_Pin, (GPIO_PinState)bitRead(channel, 2));
 8001656:	4812      	ldr	r0, [pc, #72]	@ (80016a0 <Timer6Interrupt+0xb4>)
 8001658:	f3c6 0280 	ubfx	r2, r6, #2, #1
 800165c:	2120      	movs	r1, #32
 800165e:	f000 ff4b 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_D_GPIO_Port, MUX_D_Pin, (GPIO_PinState)bitRead(channel, 3));
 8001662:	480f      	ldr	r0, [pc, #60]	@ (80016a0 <Timer6Interrupt+0xb4>)
 8001664:	f3c6 02c0 	ubfx	r2, r6, #3, #1
 8001668:	2140      	movs	r1, #64	@ 0x40
 800166a:	f000 ff45 	bl	80024f8 <HAL_GPIO_WritePin>
		readState = true;
 800166e:	2301      	movs	r3, #1
 8001670:	7023      	strb	r3, [r4, #0]
 8001672:	e7c0      	b.n	80015f6 <Timer6Interrupt+0xa>
			currentReadChannel = 0;
 8001674:	2300      	movs	r3, #0
			enc1.refresh(state[0], state[1]);
 8001676:	787a      	ldrb	r2, [r7, #1]
 8001678:	7839      	ldrb	r1, [r7, #0]
 800167a:	480c      	ldr	r0, [pc, #48]	@ (80016ac <Timer6Interrupt+0xc0>)
			currentReadChannel = 0;
 800167c:	702b      	strb	r3, [r5, #0]
			enc1.refresh(state[0], state[1]);
 800167e:	f000 f8a5 	bl	80017cc <_ZN7Encoder7refreshEbb>
			enc2.refresh(state[3], state[4]);
 8001682:	793a      	ldrb	r2, [r7, #4]
 8001684:	78f9      	ldrb	r1, [r7, #3]
 8001686:	480a      	ldr	r0, [pc, #40]	@ (80016b0 <Timer6Interrupt+0xc4>)
 8001688:	f000 f8a0 	bl	80017cc <_ZN7Encoder7refreshEbb>
			enc3.refresh(state[6], state[7]);
 800168c:	79fa      	ldrb	r2, [r7, #7]
 800168e:	79b9      	ldrb	r1, [r7, #6]
 8001690:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <Timer6Interrupt+0xc8>)
 8001692:	f000 f89b 	bl	80017cc <_ZN7Encoder7refreshEbb>
 8001696:	e7ca      	b.n	800162e <Timer6Interrupt+0x42>
 8001698:	200000a0 	.word	0x200000a0
 800169c:	200000a1 	.word	0x200000a1
 80016a0:	48000400 	.word	0x48000400
 80016a4:	200000b8 	.word	0x200000b8
 80016a8:	20000004 	.word	0x20000004
 80016ac:	2000014c 	.word	0x2000014c
 80016b0:	20000120 	.word	0x20000120
 80016b4:	200000f4 	.word	0x200000f4

080016b8 <UART_received>:

void UART_received(char* buf, uint16_t size){
 80016b8:	b530      	push	{r4, r5, lr}
 80016ba:	b087      	sub	sp, #28
	char emptymsg[20] = "";
 80016bc:	2300      	movs	r3, #0
void UART_received(char* buf, uint16_t size){
 80016be:	460c      	mov	r4, r1
	strncpy(msg, emptymsg, 20);
 80016c0:	2214      	movs	r2, #20
void UART_received(char* buf, uint16_t size){
 80016c2:	4605      	mov	r5, r0
	strncpy(msg, emptymsg, 20);
 80016c4:	a901      	add	r1, sp, #4
 80016c6:	4809      	ldr	r0, [pc, #36]	@ (80016ec <UART_received+0x34>)
	char emptymsg[20] = "";
 80016c8:	9305      	str	r3, [sp, #20]
 80016ca:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80016ce:	e9cd 3303 	strd	r3, r3, [sp, #12]
	strncpy(msg, emptymsg, 20);
 80016d2:	f003 f939 	bl	8004948 <strncpy>
	strncpy(msg, buf, size > 20 ? 20 : size - 2);
 80016d6:	2c14      	cmp	r4, #20
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <UART_received+0x34>)
 80016da:	bf94      	ite	ls
 80016dc:	1ea2      	subls	r2, r4, #2
 80016de:	2214      	movhi	r2, #20
 80016e0:	4629      	mov	r1, r5
}
 80016e2:	b007      	add	sp, #28
 80016e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	strncpy(msg, buf, size > 20 ? 20 : size - 2);
 80016e8:	f003 b92e 	b.w	8004948 <strncpy>
 80016ec:	200000a4 	.word	0x200000a4

080016f0 <loop>:
	if(hspi1.hdmatx->State == HAL_DMA_STATE_READY)
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <loop+0x14>)
 80016f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d000      	beq.n	80016fe <loop+0xe>

void loop(){
	drawScreen();
}
 80016fc:	4770      	bx	lr
 80016fe:	f7ff be27 	b.w	8001350 <_Z10drawScreenv.part.0>
 8001702:	bf00      	nop
 8001704:	20000ad8 	.word	0x20000ad8

08001708 <_GLOBAL__sub_I_oled1>:
 8001708:	b410      	push	{r4}
	DataRising = 2,
	ClkFalling = 4,
	DataFalling = 6
};

class Encoder{
 800170a:	4815      	ldr	r0, [pc, #84]	@ (8001760 <_GLOBAL__sub_I_oled1+0x58>)
 800170c:	4c15      	ldr	r4, [pc, #84]	@ (8001764 <_GLOBAL__sub_I_oled1+0x5c>)
 800170e:	4916      	ldr	r1, [pc, #88]	@ (8001768 <_GLOBAL__sub_I_oled1+0x60>)
 8001710:	4a16      	ldr	r2, [pc, #88]	@ (800176c <_GLOBAL__sub_I_oled1+0x64>)
 8001712:	2300      	movs	r3, #0
 8001714:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8001718:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
 800171c:	6163      	str	r3, [r4, #20]
 800171e:	61e3      	str	r3, [r4, #28]
 8001720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8001724:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 8001728:	e9c1 3303 	strd	r3, r3, [r1, #12]
 800172c:	e9c1 3309 	strd	r3, r3, [r1, #36]	@ 0x24
 8001730:	e9c2 3303 	strd	r3, r3, [r2, #12]
 8001734:	e9c2 3309 	strd	r3, r3, [r2, #36]	@ 0x24
 8001738:	6143      	str	r3, [r0, #20]
 800173a:	61c3      	str	r3, [r0, #28]
 800173c:	614b      	str	r3, [r1, #20]
 800173e:	61cb      	str	r3, [r1, #28]
 8001740:	6153      	str	r3, [r2, #20]
 8001742:	61d3      	str	r3, [r2, #28]
 8001744:	2301      	movs	r3, #1
 8001746:	61a3      	str	r3, [r4, #24]
 8001748:	6183      	str	r3, [r0, #24]
 800174a:	618b      	str	r3, [r1, #24]
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	23ff      	movs	r3, #255	@ 0xff
 8001750:	6223      	str	r3, [r4, #32]
 8001752:	6203      	str	r3, [r0, #32]
 8001754:	620b      	str	r3, [r1, #32]
 8001756:	6213      	str	r3, [r2, #32]
 8001758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000120 	.word	0x20000120
 8001764:	2000014c 	.word	0x2000014c
 8001768:	200000f4 	.word	0x200000f4
 800176c:	200000c8 	.word	0x200000c8

08001770 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <MX_DMA_Init+0x50>)
{
 8001772:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001774:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001776:	f040 0001 	orr.w	r0, r0, #1
 800177a:	6498      	str	r0, [r3, #72]	@ 0x48
 800177c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 800177e:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001780:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001782:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001786:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001788:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800178a:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 800178c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800178e:	f000 fc15 	bl	8001fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001792:	200d      	movs	r0, #13
 8001794:	f000 fc4e 	bl	8002034 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	4611      	mov	r1, r2
 800179c:	2010      	movs	r0, #16
 800179e:	f000 fc0d 	bl	8001fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80017a2:	2010      	movs	r0, #16
 80017a4:	f000 fc46 	bl	8002034 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2011      	movs	r0, #17
 80017ac:	4611      	mov	r1, r2
 80017ae:	f000 fc05 	bl	8001fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80017b2:	2011      	movs	r0, #17

}
 80017b4:	b003      	add	sp, #12
 80017b6:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80017ba:	f000 bc3b 	b.w	8002034 <HAL_NVIC_EnableIRQ>
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000

080017c4 <_ZN7Encoder13setConstrainsEll>:
  incValue = val;
}

void Encoder::setConstrains(int32_t low, int32_t up){
  lowerConstrain = low;
  upperConstrain = up;
 80017c4:	e9c0 1207 	strd	r1, r2, [r0, #28]
}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop

080017cc <_ZN7Encoder7refreshEbb>:
  //if (deltaT <  80) return 4;
  //if (deltaT < 120) return 2;
  return 1;
}

void Encoder::refresh(bool clk, bool data){
 80017cc:	b510      	push	{r4, lr}
 80017ce:	4604      	mov	r4, r0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	4608      	mov	r0, r1
 80017d6:	f361 0307 	bfi	r3, r1, #0, #8
  a = clk;
  b = data;

  if (!pa && a) {
 80017da:	7ba1      	ldrb	r1, [r4, #14]
  a = clk;
 80017dc:	7320      	strb	r0, [r4, #12]
 80017de:	f362 230f 	bfi	r3, r2, #8, #8
  b = data;
 80017e2:	7362      	strb	r2, [r4, #13]
  if (!pa && a) {
 80017e4:	b901      	cbnz	r1, 80017e8 <_ZN7Encoder7refreshEbb+0x1c>
 80017e6:	b9c8      	cbnz	r0, 800181c <_ZN7Encoder7refreshEbb+0x50>
	  }
  }

*/

  if (counter < lowerConstrain) {
 80017e8:	6962      	ldr	r2, [r4, #20]
    if (allowRollover)
    {
      counter = upperConstrain;
 80017ea:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  if (counter < lowerConstrain) {
 80017ee:	4291      	cmp	r1, r2
 80017f0:	dd06      	ble.n	8001800 <_ZN7Encoder7refreshEbb+0x34>
    if (allowRollover)
 80017f2:	7c62      	ldrb	r2, [r4, #17]
 80017f4:	b172      	cbz	r2, 8001814 <_ZN7Encoder7refreshEbb+0x48>
    {
      counter = lowerConstrain;
    }
    else
    {
      counter = upperConstrain;
 80017f6:	6160      	str	r0, [r4, #20]
  }

  pa = a;
  pb = b;

  previousState = currentState;
 80017f8:	7ca2      	ldrb	r2, [r4, #18]
  pa = a;
 80017fa:	81e3      	strh	r3, [r4, #14]
  previousState = currentState;
 80017fc:	74e2      	strb	r2, [r4, #19]
}
 80017fe:	bd10      	pop	{r4, pc}
  if (counter > upperConstrain) {
 8001800:	4282      	cmp	r2, r0
 8001802:	ddf9      	ble.n	80017f8 <_ZN7Encoder7refreshEbb+0x2c>
    if (allowRollover)
 8001804:	7c62      	ldrb	r2, [r4, #17]
 8001806:	2a00      	cmp	r2, #0
 8001808:	d0f5      	beq.n	80017f6 <_ZN7Encoder7refreshEbb+0x2a>
  previousState = currentState;
 800180a:	7ca2      	ldrb	r2, [r4, #18]
      counter = lowerConstrain;
 800180c:	6161      	str	r1, [r4, #20]
  pa = a;
 800180e:	81e3      	strh	r3, [r4, #14]
  previousState = currentState;
 8001810:	74e2      	strb	r2, [r4, #19]
}
 8001812:	bd10      	pop	{r4, pc}
  if (counter > upperConstrain) {
 8001814:	4281      	cmp	r1, r0
      counter = lowerConstrain;
 8001816:	6161      	str	r1, [r4, #20]
  if (counter > upperConstrain) {
 8001818:	dced      	bgt.n	80017f6 <_ZN7Encoder7refreshEbb+0x2a>
 800181a:	e7ed      	b.n	80017f8 <_ZN7Encoder7refreshEbb+0x2c>
      data ? OnChange(Increment, 0) : OnChange(Decrement, 0);
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	b132      	cbz	r2, 800182e <_ZN7Encoder7refreshEbb+0x62>
 8001820:	2001      	movs	r0, #1
 8001822:	4798      	blx	r3
      data ? counter++ : counter--;
 8001824:	6962      	ldr	r2, [r4, #20]
  pa = a;
 8001826:	89a3      	ldrh	r3, [r4, #12]
      data ? counter++ : counter--;
 8001828:	3201      	adds	r2, #1
 800182a:	6162      	str	r2, [r4, #20]
 800182c:	e7dd      	b.n	80017ea <_ZN7Encoder7refreshEbb+0x1e>
      data ? OnChange(Increment, 0) : OnChange(Decrement, 0);
 800182e:	4611      	mov	r1, r2
 8001830:	4610      	mov	r0, r2
 8001832:	4798      	blx	r3
      data ? counter++ : counter--;
 8001834:	6962      	ldr	r2, [r4, #20]
  pa = a;
 8001836:	89a3      	ldrh	r3, [r4, #12]
      data ? counter++ : counter--;
 8001838:	3a01      	subs	r2, #1
 800183a:	6162      	str	r2, [r4, #20]
 800183c:	e7d5      	b.n	80017ea <_ZN7Encoder7refreshEbb+0x1e>
 800183e:	bf00      	nop

08001840 <_ZN7Encoder10getCounterEv>:

int32_t Encoder::getCounter(){
  return counter;
}
 8001840:	6940      	ldr	r0, [r0, #20]
 8001842:	4770      	bx	lr

08001844 <_ZN7Encoder10setCounterEl>:

void Encoder::setCounter(int32_t value){
    if (value > upperConstrain) {
 8001844:	6a03      	ldr	r3, [r0, #32]
 8001846:	428b      	cmp	r3, r1
 8001848:	db03      	blt.n	8001852 <_ZN7Encoder10setCounterEl+0xe>
        counter = upperConstrain;
        return;
    }
    if (value < lowerConstrain){
 800184a:	69c3      	ldr	r3, [r0, #28]
 800184c:	428b      	cmp	r3, r1
 800184e:	bfb8      	it	lt
 8001850:	460b      	movlt	r3, r1
        counter = upperConstrain;
 8001852:	6143      	str	r3, [r0, #20]
        counter = lowerConstrain;
        return;
    }
    counter = value;
}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <_ZN7Encoder11setCallbackEPFv16EncoderDirectionhE>:
  }
  return false;
}

void Encoder::setCallback(void(*funcpointer)(EncoderDirection, uint8_t)){
  OnChange = funcpointer;
 8001858:	6001      	str	r1, [r0, #0]
}
 800185a:	4770      	bx	lr

0800185c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800185c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	2400      	movs	r4, #0
{
 8001860:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001866:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <MX_GPIO_Init+0x90>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
                          |MUX_A_Pin|MUX_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SSD1306_CS2_Pin|SSD1306_CS3_Pin|GPIO_PIN_3|MUX_C_Pin
 8001870:	4d1f      	ldr	r5, [pc, #124]	@ (80018f0 <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	f041 0101 	orr.w	r1, r1, #1
 8001876:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8001878:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800187a:	f001 0101 	and.w	r1, r1, #1
 800187e:	9100      	str	r1, [sp, #0]
 8001880:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001884:	f041 0102 	orr.w	r1, r1, #2
 8001888:	64d9      	str	r1, [r3, #76]	@ 0x4c
 800188a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
 8001890:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
 8001894:	f641 1170 	movw	r1, #6512	@ 0x1970
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
 800189e:	f000 fe2b 	bl	80024f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SSD1306_CS2_Pin|SSD1306_CS3_Pin|GPIO_PIN_3|MUX_C_Pin
 80018a2:	4622      	mov	r2, r4
 80018a4:	4628      	mov	r0, r5
 80018a6:	216b      	movs	r1, #107	@ 0x6b
 80018a8:	f000 fe26 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
                          |MUX_A_Pin|MUX_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = SSD1306_DC_Pin|SSD1306_RESET_Pin|SSD1306_CS_Pin|SSD1306_CS4_Pin
 80018b0:	f641 1370 	movw	r3, #6512	@ 0x1970
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	e9cd 3602 	strd	r3, r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f000 fd28 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB3 PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SSD1306_CS2_Pin|SSD1306_CS3_Pin|GPIO_PIN_3|MUX_C_Pin
 80018c4:	236b      	movs	r3, #107	@ 0x6b
                          |MUX_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	a902      	add	r1, sp, #8
 80018c8:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = SSD1306_CS2_Pin|SSD1306_CS3_Pin|GPIO_PIN_3|MUX_C_Pin
 80018ca:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	e9cd 6403 	strd	r6, r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f000 fd1f 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MUX_Common_Pin;
 80018d6:	2280      	movs	r2, #128	@ 0x80
 80018d8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MUX_Common_GPIO_Port, &GPIO_InitStruct);
 80018da:	a902      	add	r1, sp, #8
 80018dc:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = MUX_Common_Pin;
 80018de:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(MUX_Common_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f000 fd16 	bl	8002314 <HAL_GPIO_Init>

}
 80018e8:	b008      	add	sp, #32
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000400 	.word	0x48000400

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b510      	push	{r4, lr}
 80018f6:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f8:	2244      	movs	r2, #68	@ 0x44
 80018fa:	2100      	movs	r1, #0
 80018fc:	a806      	add	r0, sp, #24
 80018fe:	f003 f81b 	bl	8004938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001902:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001904:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800190c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001910:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001912:	f000 fdff 	bl	8002514 <HAL_PWREx_ControlVoltageScaling>
 8001916:	b108      	cbz	r0, 800191c <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191a:	e7fe      	b.n	800191a <SystemClock_Config+0x26>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001920:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001922:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001924:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001928:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLM = 1;
 800192a:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 10;
 800192c:	220a      	movs	r2, #10
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800192e:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001932:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001936:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001938:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193c:	f000 feca 	bl	80026d4 <HAL_RCC_OscConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	b108      	cbz	r0, 8001948 <SystemClock_Config+0x54>
 8001944:	b672      	cpsid	i
  while (1)
 8001946:	e7fe      	b.n	8001946 <SystemClock_Config+0x52>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001948:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800194a:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800194c:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800194e:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001952:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001956:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800195a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800195c:	f001 f9e8 	bl	8002d30 <HAL_RCC_ClockConfig>
 8001960:	b108      	cbz	r0, 8001966 <SystemClock_Config+0x72>
 8001962:	b672      	cpsid	i
  while (1)
 8001964:	e7fe      	b.n	8001964 <SystemClock_Config+0x70>
}
 8001966:	b018      	add	sp, #96	@ 0x60
 8001968:	bd10      	pop	{r4, pc}
 800196a:	bf00      	nop

0800196c <main>:
{
 800196c:	b508      	push	{r3, lr}
  HAL_Init();
 800196e:	f000 fadf 	bl	8001f30 <HAL_Init>
  SystemClock_Config();
 8001972:	f7ff ffbf 	bl	80018f4 <SystemClock_Config>
  MX_GPIO_Init();
 8001976:	f7ff ff71 	bl	800185c <MX_GPIO_Init>
  MX_DMA_Init();
 800197a:	f7ff fef9 	bl	8001770 <MX_DMA_Init>
  MX_SPI1_Init();
 800197e:	f000 f847 	bl	8001a10 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001982:	f000 f97b 	bl	8001c7c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001986:	f000 f997 	bl	8001cb8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800198a:	f000 f92d 	bl	8001be8 <MX_TIM6_Init>
  setup();
 800198e:	f7ff fe25 	bl	80015dc <setup>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uartbuffer, buffersize);
 8001992:	4908      	ldr	r1, [pc, #32]	@ (80019b4 <main+0x48>)
 8001994:	4808      	ldr	r0, [pc, #32]	@ (80019b8 <main+0x4c>)
 8001996:	22ff      	movs	r2, #255	@ 0xff
 8001998:	f002 ff8a 	bl	80048b0 <HAL_UARTEx_ReceiveToIdle_DMA>
  if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 800199c:	4807      	ldr	r0, [pc, #28]	@ (80019bc <main+0x50>)
 800199e:	f002 f879 	bl	8003a94 <HAL_TIM_Base_Start_IT>
 80019a2:	b108      	cbz	r0, 80019a8 <main+0x3c>
 80019a4:	b672      	cpsid	i
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <main+0x3a>
	 loop();
 80019a8:	f7ff fea2 	bl	80016f0 <loop>
 80019ac:	f7ff fea0 	bl	80016f0 <loop>
  while (1)
 80019b0:	e7fa      	b.n	80019a8 <main+0x3c>
 80019b2:	bf00      	nop
 80019b4:	20000990 	.word	0x20000990
 80019b8:	20000c20 	.word	0x20000c20
 80019bc:	20000b40 	.word	0x20000b40

080019c0 <HAL_SPI_TxCpltCallback>:
	SSD1306_DmaEndCallback(hspi);
 80019c0:	f7ff bcb2 	b.w	8001328 <SSD1306_DmaEndCallback>

080019c4 <HAL_TIM_PeriodElapsedCallback>:
	if (htim == &htim6){
 80019c4:	4b02      	ldr	r3, [pc, #8]	@ (80019d0 <HAL_TIM_PeriodElapsedCallback+0xc>)
 80019c6:	4283      	cmp	r3, r0
 80019c8:	d000      	beq.n	80019cc <HAL_TIM_PeriodElapsedCallback+0x8>
}
 80019ca:	4770      	bx	lr
		Timer6Interrupt();
 80019cc:	f7ff be0e 	b.w	80015ec <Timer6Interrupt>
 80019d0:	20000b40 	.word	0x20000b40

080019d4 <HAL_UARTEx_RxEventCallback>:
    if(huart->Instance == USART2)
 80019d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_UARTEx_RxEventCallback+0x2c>)
 80019d6:	6802      	ldr	r2, [r0, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d000      	beq.n	80019de <HAL_UARTEx_RxEventCallback+0xa>
 80019dc:	4770      	bx	lr
{
 80019de:	b510      	push	{r4, lr}
    	UART_received(&uartbuffer, Size);
 80019e0:	4808      	ldr	r0, [pc, #32]	@ (8001a04 <HAL_UARTEx_RxEventCallback+0x30>)
 80019e2:	460c      	mov	r4, r1
 80019e4:	f7ff fe68 	bl	80016b8 <UART_received>
    	HAL_UART_Transmit_DMA(&huart2, uartbuffer, Size);
 80019e8:	4622      	mov	r2, r4
 80019ea:	4906      	ldr	r1, [pc, #24]	@ (8001a04 <HAL_UARTEx_RxEventCallback+0x30>)
 80019ec:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <HAL_UARTEx_RxEventCallback+0x34>)
 80019ee:	f002 f96d 	bl	8003ccc <HAL_UART_Transmit_DMA>
}
 80019f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uartbuffer, buffersize);
 80019f6:	4903      	ldr	r1, [pc, #12]	@ (8001a04 <HAL_UARTEx_RxEventCallback+0x30>)
 80019f8:	4803      	ldr	r0, [pc, #12]	@ (8001a08 <HAL_UARTEx_RxEventCallback+0x34>)
 80019fa:	22ff      	movs	r2, #255	@ 0xff
 80019fc:	f002 bf58 	b.w	80048b0 <HAL_UARTEx_ReceiveToIdle_DMA>
 8001a00:	40004400 	.word	0x40004400
 8001a04:	20000990 	.word	0x20000990
 8001a08:	20000c20 	.word	0x20000c20

08001a0c <Error_Handler>:
 8001a0c:	b672      	cpsid	i
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <Error_Handler+0x2>

08001a10 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a10:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a12:	4811      	ldr	r0, [pc, #68]	@ (8001a58 <MX_SPI1_Init+0x48>)
 8001a14:	4c11      	ldr	r4, [pc, #68]	@ (8001a5c <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a16:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e9c0 4200 	strd	r4, r2, [r0]
 8001a20:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a28:	e9c0 3102 	strd	r3, r1, [r0, #8]
 8001a2c:	2428      	movs	r4, #40	@ 0x28
 8001a2e:	6182      	str	r2, [r0, #24]
 8001a30:	2107      	movs	r1, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a32:	2208      	movs	r2, #8
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a34:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a38:	e9c0 4307 	strd	r4, r3, [r0, #28]
 8001a3c:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 8001a40:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a44:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a46:	f001 fd31 	bl	80034ac <HAL_SPI_Init>
 8001a4a:	b900      	cbnz	r0, 8001a4e <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a4c:	bd10      	pop	{r4, pc}
 8001a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001a52:	f7ff bfdb 	b.w	8001a0c <Error_Handler>
 8001a56:	bf00      	nop
 8001a58:	20000ad8 	.word	0x20000ad8
 8001a5c:	40013000 	.word	0x40013000

08001a60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a60:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8001a62:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <HAL_SPI_MspInit+0x94>)
 8001a64:	6802      	ldr	r2, [r0, #0]
{
 8001a66:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8001a6a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001a70:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001a74:	9406      	str	r4, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8001a76:	d001      	beq.n	8001a7c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a78:	b008      	add	sp, #32
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7c:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8001a80:	4605      	mov	r5, r0
 8001a82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001a84:	4e1c      	ldr	r6, [pc, #112]	@ (8001af8 <HAL_SPI_MspInit+0x98>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a8a:	661a      	str	r2, [r3, #96]	@ 0x60
 8001a8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a8e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001aa6:	2282      	movs	r2, #130	@ 0x82
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2305      	movs	r3, #5
 8001abc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f000 fc29 	bl	8002314 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8001afc <HAL_SPI_MspInit+0x9c>)
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001aca:	4630      	mov	r0, r6
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001acc:	2210      	movs	r2, #16
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ace:	2380      	movs	r3, #128	@ 0x80
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad0:	e9c6 2402 	strd	r2, r4, [r6, #8]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad4:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ad8:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001adc:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001ade:	f000 fad1 	bl	8002084 <HAL_DMA_Init>
 8001ae2:	b918      	cbnz	r0, 8001aec <HAL_SPI_MspInit+0x8c>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001ae4:	656e      	str	r6, [r5, #84]	@ 0x54
 8001ae6:	62b5      	str	r5, [r6, #40]	@ 0x28
}
 8001ae8:	b008      	add	sp, #32
 8001aea:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001aec:	f7ff ff8e 	bl	8001a0c <Error_Handler>
 8001af0:	e7f8      	b.n	8001ae4 <HAL_SPI_MspInit+0x84>
 8001af2:	bf00      	nop
 8001af4:	40013000 	.word	0x40013000
 8001af8:	20000a90 	.word	0x20000a90
 8001afc:	40020030 	.word	0x40020030

08001b00 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b00:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <HAL_MspInit+0x2c>)
 8001b02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	661a      	str	r2, [r3, #96]	@ 0x60
 8001b0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8001b0c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	f002 0201 	and.w	r2, r2, #1
 8001b12:	9200      	str	r2, [sp, #0]
 8001b14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b18:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b28:	b002      	add	sp, #8
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000

08001b30 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b30:	e7fe      	b.n	8001b30 <NMI_Handler>
 8001b32:	bf00      	nop

08001b34 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <HardFault_Handler>
 8001b36:	bf00      	nop

08001b38 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <MemManage_Handler>
 8001b3a:	bf00      	nop

08001b3c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <BusFault_Handler>
 8001b3e:	bf00      	nop

08001b40 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <UsageFault_Handler>
 8001b42:	bf00      	nop

08001b44 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop

08001b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop

08001b4c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b50:	f000 b9fe 	b.w	8001f50 <HAL_IncTick>

08001b54 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b54:	4801      	ldr	r0, [pc, #4]	@ (8001b5c <DMA1_Channel3_IRQHandler+0x8>)
 8001b56:	f000 bb8f 	b.w	8002278 <HAL_DMA_IRQHandler>
 8001b5a:	bf00      	nop
 8001b5c:	20000a90 	.word	0x20000a90

08001b60 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b60:	4801      	ldr	r0, [pc, #4]	@ (8001b68 <DMA1_Channel6_IRQHandler+0x8>)
 8001b62:	f000 bb89 	b.w	8002278 <HAL_DMA_IRQHandler>
 8001b66:	bf00      	nop
 8001b68:	20000bd8 	.word	0x20000bd8

08001b6c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b6c:	4801      	ldr	r0, [pc, #4]	@ (8001b74 <DMA1_Channel7_IRQHandler+0x8>)
 8001b6e:	f000 bb83 	b.w	8002278 <HAL_DMA_IRQHandler>
 8001b72:	bf00      	nop
 8001b74:	20000b90 	.word	0x20000b90

08001b78 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b78:	4801      	ldr	r0, [pc, #4]	@ (8001b80 <USART2_IRQHandler+0x8>)
 8001b7a:	f002 b97d 	b.w	8003e78 <HAL_UART_IRQHandler>
 8001b7e:	bf00      	nop
 8001b80:	20000c20 	.word	0x20000c20

08001b84 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b84:	4801      	ldr	r0, [pc, #4]	@ (8001b8c <TIM6_IRQHandler+0x8>)
 8001b86:	f001 bfb9 	b.w	8003afc <HAL_TIM_IRQHandler>
 8001b8a:	bf00      	nop
 8001b8c:	20000b40 	.word	0x20000b40

08001b90 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b90:	490c      	ldr	r1, [pc, #48]	@ (8001bc4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b92:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc8 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001b94:	680b      	ldr	r3, [r1, #0]
{
 8001b96:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b98:	4c0c      	ldr	r4, [pc, #48]	@ (8001bcc <_sbrk+0x3c>)
 8001b9a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001b9c:	b12b      	cbz	r3, 8001baa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9e:	4418      	add	r0, r3
 8001ba0:	4290      	cmp	r0, r2
 8001ba2:	d807      	bhi.n	8001bb4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ba4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001baa:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <_sbrk+0x40>)
 8001bac:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001bae:	4418      	add	r0, r3
 8001bb0:	4290      	cmp	r0, r2
 8001bb2:	d9f7      	bls.n	8001ba4 <_sbrk+0x14>
    errno = ENOMEM;
 8001bb4:	f002 fedc 	bl	8004970 <__errno>
 8001bb8:	230c      	movs	r3, #12
 8001bba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd10      	pop	{r4, pc}
 8001bc4:	20000b3c 	.word	0x20000b3c
 8001bc8:	20008000 	.word	0x20008000
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	20000e80 	.word	0x20000e80

08001bd4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bd4:	4a03      	ldr	r2, [pc, #12]	@ (8001be4 <SystemInit+0x10>)
 8001bd6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001bda:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001be8:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bea:	4812      	ldr	r0, [pc, #72]	@ (8001c34 <MX_TIM6_Init+0x4c>)
 8001bec:	4912      	ldr	r1, [pc, #72]	@ (8001c38 <MX_TIM6_Init+0x50>)
{
 8001bee:	b085      	sub	sp, #20
  htim6.Init.Prescaler = 80;
 8001bf0:	2250      	movs	r2, #80	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf2:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 80;
 8001bf4:	e9c0 1200 	strd	r1, r2, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 100;
 8001bf8:	2264      	movs	r2, #100	@ 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfa:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim6.Init.Period = 100;
 8001bfe:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c02:	9303      	str	r3, [sp, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c04:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c06:	f001 fecb 	bl	80039a0 <HAL_TIM_Base_Init>
 8001c0a:	b950      	cbnz	r0, 8001c22 <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c0e:	4809      	ldr	r0, [pc, #36]	@ (8001c34 <MX_TIM6_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c12:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c16:	f002 f81d 	bl	8003c54 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1a:	b928      	cbnz	r0, 8001c28 <MX_TIM6_Init+0x40>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c1c:	b005      	add	sp, #20
 8001c1e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001c22:	f7ff fef3 	bl	8001a0c <Error_Handler>
 8001c26:	e7f1      	b.n	8001c0c <MX_TIM6_Init+0x24>
    Error_Handler();
 8001c28:	f7ff fef0 	bl	8001a0c <Error_Handler>
}
 8001c2c:	b005      	add	sp, #20
 8001c2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c32:	bf00      	nop
 8001c34:	20000b40 	.word	0x20000b40
 8001c38:	40001000 	.word	0x40001000

08001c3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <HAL_TIM_Base_MspInit+0x3c>)
 8001c3e:	6802      	ldr	r2, [r0, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d000      	beq.n	8001c46 <HAL_TIM_Base_MspInit+0xa>
 8001c44:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c46:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 8001c4a:	b500      	push	{lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c4c:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8001c4e:	f041 0110 	orr.w	r1, r1, #16
 8001c52:	6599      	str	r1, [r3, #88]	@ 0x58
 8001c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
{
 8001c56:	b083      	sub	sp, #12

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001c60:	2036      	movs	r0, #54	@ 0x36
 8001c62:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c64:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001c66:	f000 f9a9 	bl	8001fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001c6a:	2036      	movs	r0, #54	@ 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c6c:	b003      	add	sp, #12
 8001c6e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001c72:	f000 b9df 	b.w	8002034 <HAL_NVIC_EnableIRQ>
 8001c76:	bf00      	nop
 8001c78:	40001000 	.word	0x40001000

08001c7c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c7c:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c7e:	480c      	ldr	r0, [pc, #48]	@ (8001cb0 <MX_USART1_UART_Init+0x34>)
 8001c80:	4c0c      	ldr	r4, [pc, #48]	@ (8001cb4 <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 115200;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001c88:	220c      	movs	r2, #12
 8001c8a:	e9c0 4100 	strd	r4, r1, [r0]
 8001c8e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8001c92:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8001c96:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c9a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c9e:	f002 fc7f 	bl	80045a0 <HAL_UART_Init>
 8001ca2:	b900      	cbnz	r0, 8001ca6 <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ca4:	bd10      	pop	{r4, pc}
 8001ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001caa:	f7ff beaf 	b.w	8001a0c <Error_Handler>
 8001cae:	bf00      	nop
 8001cb0:	20000ca8 	.word	0x20000ca8
 8001cb4:	40013800 	.word	0x40013800

08001cb8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cb8:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cba:	480c      	ldr	r0, [pc, #48]	@ (8001cec <MX_USART2_UART_Init+0x34>)
 8001cbc:	4c0c      	ldr	r4, [pc, #48]	@ (8001cf0 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001cc4:	220c      	movs	r2, #12
 8001cc6:	e9c0 4100 	strd	r4, r1, [r0]
 8001cca:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8001cce:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8001cd2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cd6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cda:	f002 fc61 	bl	80045a0 <HAL_UART_Init>
 8001cde:	b900      	cbnz	r0, 8001ce2 <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce0:	bd10      	pop	{r4, pc}
 8001ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001ce6:	f7ff be91 	b.w	8001a0c <Error_Handler>
 8001cea:	bf00      	nop
 8001cec:	20000c20 	.word	0x20000c20
 8001cf0:	40004400 	.word	0x40004400

08001cf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8001cf8:	4604      	mov	r4, r0
 8001cfa:	b096      	sub	sp, #88	@ 0x58

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cfe:	2234      	movs	r2, #52	@ 0x34
 8001d00:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d02:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001d06:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001d0a:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d0c:	f002 fe14 	bl	8004938 <memset>
  if(uartHandle->Instance==USART1)
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	4a58      	ldr	r2, [pc, #352]	@ (8001e74 <HAL_UART_MspInit+0x180>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d005      	beq.n	8001d24 <HAL_UART_MspInit+0x30>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001d18:	4a57      	ldr	r2, [pc, #348]	@ (8001e78 <HAL_UART_MspInit+0x184>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d030      	beq.n	8001d80 <HAL_UART_MspInit+0x8c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d1e:	b016      	add	sp, #88	@ 0x58
 8001d20:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d24:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d26:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d28:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2a:	f001 f8db 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	f040 8093 	bne.w	8001e5a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d34:	4b51      	ldr	r3, [pc, #324]	@ (8001e7c <HAL_UART_MspInit+0x188>)
 8001d36:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d3c:	661a      	str	r2, [r3, #96]	@ 0x60
 8001d3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d40:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001d44:	9200      	str	r2, [sp, #0]
 8001d46:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d52:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 8001d56:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d5c:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d64:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d66:	2400      	movs	r4, #0
 8001d68:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d6e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d74:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	f000 facd 	bl	8002314 <HAL_GPIO_Init>
}
 8001d7a:	b016      	add	sp, #88	@ 0x58
 8001d7c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d80:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d82:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d84:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d86:	f001 f8ad 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d168      	bne.n	8001e60 <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e7c <HAL_UART_MspInit+0x188>)
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001d90:	4e3b      	ldr	r6, [pc, #236]	@ (8001e80 <HAL_UART_MspInit+0x18c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d94:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001d98:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d9c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001da0:	9202      	str	r2, [sp, #8]
 8001da2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dae:	2004      	movs	r0, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001db4:	2102      	movs	r1, #2
 8001db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dbc:	f04f 0800 	mov.w	r8, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc0:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dc2:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	a904      	add	r1, sp, #16
 8001dc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dce:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dd0:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f000 fa9e 	bl	8002314 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001dd8:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dda:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	a904      	add	r1, sp, #16
 8001de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001de4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001de6:	2302      	movs	r3, #2
 8001de8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dec:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f000 fa90 	bl	8002314 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001df4:	4923      	ldr	r1, [pc, #140]	@ (8001e84 <HAL_UART_MspInit+0x190>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001dfe:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001e00:	2280      	movs	r2, #128	@ 0x80
 8001e02:	e9c6 3302 	strd	r3, r3, [r6, #8]
 8001e06:	e9c6 2304 	strd	r2, r3, [r6, #16]
 8001e0a:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8001e0e:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e10:	f000 f938 	bl	8002084 <HAL_DMA_Init>
 8001e14:	bb50      	cbnz	r0, 8001e6c <HAL_UART_MspInit+0x178>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001e16:	4d1c      	ldr	r5, [pc, #112]	@ (8001e88 <HAL_UART_MspInit+0x194>)
 8001e18:	491c      	ldr	r1, [pc, #112]	@ (8001e8c <HAL_UART_MspInit+0x198>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e1a:	6766      	str	r6, [r4, #116]	@ 0x74
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e24:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001e26:	2110      	movs	r1, #16
 8001e28:	2280      	movs	r2, #128	@ 0x80
 8001e2a:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8001e2e:	e9c5 3305 	strd	r3, r3, [r5, #20]
 8001e32:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e36:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001e38:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e3a:	f000 f923 	bl	8002084 <HAL_DMA_Init>
 8001e3e:	b990      	cbnz	r0, 8001e66 <HAL_UART_MspInit+0x172>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	4611      	mov	r1, r2
 8001e44:	2026      	movs	r0, #38	@ 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e46:	6725      	str	r5, [r4, #112]	@ 0x70
 8001e48:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e4a:	f000 f8b7 	bl	8001fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e4e:	2026      	movs	r0, #38	@ 0x26
 8001e50:	f000 f8f0 	bl	8002034 <HAL_NVIC_EnableIRQ>
}
 8001e54:	b016      	add	sp, #88	@ 0x58
 8001e56:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 8001e5a:	f7ff fdd7 	bl	8001a0c <Error_Handler>
 8001e5e:	e769      	b.n	8001d34 <HAL_UART_MspInit+0x40>
      Error_Handler();
 8001e60:	f7ff fdd4 	bl	8001a0c <Error_Handler>
 8001e64:	e793      	b.n	8001d8e <HAL_UART_MspInit+0x9a>
      Error_Handler();
 8001e66:	f7ff fdd1 	bl	8001a0c <Error_Handler>
 8001e6a:	e7e9      	b.n	8001e40 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8001e6c:	f7ff fdce 	bl	8001a0c <Error_Handler>
 8001e70:	e7d1      	b.n	8001e16 <HAL_UART_MspInit+0x122>
 8001e72:	bf00      	nop
 8001e74:	40013800 	.word	0x40013800
 8001e78:	40004400 	.word	0x40004400
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	20000bd8 	.word	0x20000bd8
 8001e84:	4002006c 	.word	0x4002006c
 8001e88:	20000b90 	.word	0x20000b90
 8001e8c:	40020080 	.word	0x40020080

08001e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e94:	f7ff fe9e 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e98:	480c      	ldr	r0, [pc, #48]	@ (8001ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8001e9a:	490d      	ldr	r1, [pc, #52]	@ (8001ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed4 <LoopForever+0xe>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001edc <LoopForever+0x16>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f002 fd5d 	bl	800497c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ec2:	f7ff fd53 	bl	800196c <main>

08001ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec6:	e7fe      	b.n	8001ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ed4:	0800552c 	.word	0x0800552c
  ldr r2, =_sbss
 8001ed8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001edc:	20000e7c 	.word	0x20000e7c

08001ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC1_2_IRQHandler>
	...

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <HAL_InitTick+0x40>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b90b      	cbnz	r3, 8001ef0 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eec:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001eee:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ef0:	490d      	ldr	r1, [pc, #52]	@ (8001f28 <HAL_InitTick+0x44>)
 8001ef2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ef6:	4605      	mov	r5, r0
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	6808      	ldr	r0, [r1, #0]
 8001efe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f02:	f000 f8a5 	bl	8002050 <HAL_SYSTICK_Config>
 8001f06:	4604      	mov	r4, r0
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d1ef      	bne.n	8001eec <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0c:	2d0f      	cmp	r5, #15
 8001f0e:	d8ed      	bhi.n	8001eec <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f10:	4602      	mov	r2, r0
 8001f12:	4629      	mov	r1, r5
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f000 f850 	bl	8001fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	@ (8001f2c <HAL_InitTick+0x48>)
 8001f1e:	4620      	mov	r0, r4
 8001f20:	601d      	str	r5, [r3, #0]
}
 8001f22:	bd38      	pop	{r3, r4, r5, pc}
 8001f24:	2000001c 	.word	0x2000001c
 8001f28:	20000018 	.word	0x20000018
 8001f2c:	20000020 	.word	0x20000020

08001f30 <HAL_Init>:
{
 8001f30:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f32:	2003      	movs	r0, #3
 8001f34:	f000 f830 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f38:	200f      	movs	r0, #15
 8001f3a:	f7ff ffd3 	bl	8001ee4 <HAL_InitTick>
 8001f3e:	b110      	cbz	r0, 8001f46 <HAL_Init+0x16>
    status = HAL_ERROR;
 8001f40:	2401      	movs	r4, #1
}
 8001f42:	4620      	mov	r0, r4
 8001f44:	bd10      	pop	{r4, pc}
 8001f46:	4604      	mov	r4, r0
    HAL_MspInit();
 8001f48:	f7ff fdda 	bl	8001b00 <HAL_MspInit>
}
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	bd10      	pop	{r4, pc}

08001f50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001f50:	4a03      	ldr	r2, [pc, #12]	@ (8001f60 <HAL_IncTick+0x10>)
 8001f52:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <HAL_IncTick+0x14>)
 8001f54:	6811      	ldr	r1, [r2, #0]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	440b      	add	r3, r1
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000d30 	.word	0x20000d30
 8001f64:	2000001c 	.word	0x2000001c

08001f68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f68:	4b01      	ldr	r3, [pc, #4]	@ (8001f70 <HAL_GetTick+0x8>)
 8001f6a:	6818      	ldr	r0, [r3, #0]
}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000d30 	.word	0x20000d30

08001f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff fff6 	bl	8001f68 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001f7e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001f80:	d002      	beq.n	8001f88 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8001f82:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <HAL_Delay+0x20>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f88:	f7ff ffee 	bl	8001f68 <HAL_GetTick>
 8001f8c:	1b40      	subs	r0, r0, r5
 8001f8e:	42a0      	cmp	r0, r4
 8001f90:	d3fa      	bcc.n	8001f88 <HAL_Delay+0x14>
  {
  }
}
 8001f92:	bd38      	pop	{r3, r4, r5, pc}
 8001f94:	2000001c 	.word	0x2000001c

08001f98 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4907      	ldr	r1, [pc, #28]	@ (8001fb8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f9a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f9c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001faa:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001fb2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800202c <HAL_NVIC_SetPriority+0x70>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc6:	f1c3 0e07 	rsb	lr, r3, #7
 8001fca:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd2:	bf28      	it	cs
 8001fd4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd8:	f1bc 0f06 	cmp.w	ip, #6
 8001fdc:	d91c      	bls.n	8002018 <HAL_NVIC_SetPriority+0x5c>
 8001fde:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	fa03 f30c 	lsl.w	r3, r3, ip
 8001fea:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	fa03 f30e 	lsl.w	r3, r3, lr
 8001ff6:	ea21 0303 	bic.w	r3, r1, r3
 8001ffa:	fa03 f30c 	lsl.w	r3, r3, ip
 8001ffe:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002000:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002002:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002006:	db0a      	blt.n	800201e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800200c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002010:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002014:	f85d fb04 	ldr.w	pc, [sp], #4
 8002018:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	4694      	mov	ip, r2
 800201c:	e7e7      	b.n	8001fee <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <HAL_NVIC_SetPriority+0x74>)
 8002020:	f000 000f 	and.w	r0, r0, #15
 8002024:	4402      	add	r2, r0
 8002026:	7613      	strb	r3, [r2, #24]
 8002028:	f85d fb04 	ldr.w	pc, [sp], #4
 800202c:	e000ed00 	.word	0xe000ed00
 8002030:	e000ecfc 	.word	0xe000ecfc

08002034 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002034:	2800      	cmp	r0, #0
 8002036:	db07      	blt.n	8002048 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002038:	4a04      	ldr	r2, [pc, #16]	@ (800204c <HAL_NVIC_EnableIRQ+0x18>)
 800203a:	0941      	lsrs	r1, r0, #5
 800203c:	2301      	movs	r3, #1
 800203e:	f000 001f 	and.w	r0, r0, #31
 8002042:	4083      	lsls	r3, r0
 8002044:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000e100 	.word	0xe000e100

08002050 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	3801      	subs	r0, #1
 8002052:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002056:	d301      	bcc.n	800205c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002058:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800205a:	4770      	bx	lr
{
 800205c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	4c07      	ldr	r4, [pc, #28]	@ (8002080 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002064:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800206a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002070:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002072:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	619a      	str	r2, [r3, #24]
}
 8002076:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	6119      	str	r1, [r3, #16]
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002084:	2800      	cmp	r0, #0
 8002086:	d050      	beq.n	800212a <HAL_DMA_Init+0xa6>
{
 8002088:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800208a:	4a2e      	ldr	r2, [pc, #184]	@ (8002144 <HAL_DMA_Init+0xc0>)
 800208c:	6804      	ldr	r4, [r0, #0]
 800208e:	4294      	cmp	r4, r2
 8002090:	4603      	mov	r3, r0
 8002092:	d941      	bls.n	8002118 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002094:	492c      	ldr	r1, [pc, #176]	@ (8002148 <HAL_DMA_Init+0xc4>)
 8002096:	4a2d      	ldr	r2, [pc, #180]	@ (800214c <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA2;
 8002098:	4d2d      	ldr	r5, [pc, #180]	@ (8002150 <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800209a:	4421      	add	r1, r4
 800209c:	fba2 2101 	umull	r2, r1, r2, r1
 80020a0:	0909      	lsrs	r1, r1, #4
 80020a2:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020a4:	2202      	movs	r2, #2
 80020a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020aa:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ae:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 80020b0:	6820      	ldr	r0, [r4, #0]
 80020b2:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp |=  hdma->Init.Direction        |
 80020b4:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b6:	433a      	orrs	r2, r7
 80020b8:	695f      	ldr	r7, [r3, #20]
 80020ba:	6459      	str	r1, [r3, #68]	@ 0x44
 80020bc:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020be:	699f      	ldr	r7, [r3, #24]
 80020c0:	433a      	orrs	r2, r7
 80020c2:	69df      	ldr	r7, [r3, #28]
 80020c4:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c6:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020c8:	f420 40ff 	bic.w	r0, r0, #32640	@ 0x7f80
 80020cc:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80020d0:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 80020d2:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80020d4:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 80020d8:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80020da:	d014      	beq.n	8002106 <HAL_DMA_Init+0x82>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020dc:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020de:	f001 011c 	and.w	r1, r1, #28
 80020e2:	220f      	movs	r2, #15
 80020e4:	408a      	lsls	r2, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020e6:	4088      	lsls	r0, r1
    if (DMA1 == hdma->DmaBaseAddress)
 80020e8:	491a      	ldr	r1, [pc, #104]	@ (8002154 <HAL_DMA_Init+0xd0>)
 80020ea:	428d      	cmp	r5, r1
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020ec:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 80020f0:	d01d      	beq.n	800212e <HAL_DMA_Init+0xaa>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020f2:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 80020f6:	4022      	ands	r2, r4
 80020f8:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020fc:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 8002100:	4302      	orrs	r2, r0
 8002102:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002106:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002108:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210a:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800210c:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8002110:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 8002114:	bcf0      	pop	{r4, r5, r6, r7}
 8002116:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002118:	490f      	ldr	r1, [pc, #60]	@ (8002158 <HAL_DMA_Init+0xd4>)
 800211a:	4a0c      	ldr	r2, [pc, #48]	@ (800214c <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA1;
 800211c:	4d0d      	ldr	r5, [pc, #52]	@ (8002154 <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800211e:	4421      	add	r1, r4
 8002120:	fba2 2101 	umull	r2, r1, r2, r1
 8002124:	0909      	lsrs	r1, r1, #4
 8002126:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8002128:	e7bc      	b.n	80020a4 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 800212a:	2001      	movs	r0, #1
}
 800212c:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800212e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8002132:	400a      	ands	r2, r1
 8002134:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002138:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 800213c:	4302      	orrs	r2, r0
 800213e:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
 8002142:	e7e0      	b.n	8002106 <HAL_DMA_Init+0x82>
 8002144:	40020407 	.word	0x40020407
 8002148:	bffdfbf8 	.word	0xbffdfbf8
 800214c:	cccccccd 	.word	0xcccccccd
 8002150:	40020400 	.word	0x40020400
 8002154:	40020000 	.word	0x40020000
 8002158:	bffdfff8 	.word	0xbffdfff8

0800215c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800215c:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800215e:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8002162:	2c01      	cmp	r4, #1
 8002164:	d00b      	beq.n	800217e <HAL_DMA_Start_IT+0x22>
 8002166:	2401      	movs	r4, #1
 8002168:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800216c:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8002170:	2c01      	cmp	r4, #1
 8002172:	fa5f fc84 	uxtb.w	ip, r4
 8002176:	d005      	beq.n	8002184 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002178:	2300      	movs	r3, #0
 800217a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 800217e:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8002180:	bc70      	pop	{r4, r5, r6}
 8002182:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002184:	2502      	movs	r5, #2
 8002186:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 800218a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800218c:	2500      	movs	r5, #0
 800218e:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002190:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002192:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 8002194:	f026 0601 	bic.w	r6, r6, #1
 8002198:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800219a:	f005 051c 	and.w	r5, r5, #28
 800219e:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 80021a0:	fa0c f505 	lsl.w	r5, ip, r5
 80021a4:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021a6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021a8:	6883      	ldr	r3, [r0, #8]
 80021aa:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 80021ac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021ae:	bf0b      	itete	eq
 80021b0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80021b2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80021b4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80021b6:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80021b8:	b153      	cbz	r3, 80021d0 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	f043 030e 	orr.w	r3, r3, #14
 80021c0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80021c8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80021ca:	6023      	str	r3, [r4, #0]
}
 80021cc:	bc70      	pop	{r4, r5, r6}
 80021ce:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	f023 0304 	bic.w	r3, r3, #4
 80021d6:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	f043 030a 	orr.w	r3, r3, #10
 80021de:	6023      	str	r3, [r4, #0]
 80021e0:	e7ef      	b.n	80021c2 <HAL_DMA_Start_IT+0x66>
 80021e2:	bf00      	nop

080021e4 <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021e4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80021e8:	2a02      	cmp	r2, #2
{
 80021ea:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021ec:	d006      	beq.n	80021fc <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ee:	2204      	movs	r2, #4
 80021f0:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80021f2:	2200      	movs	r2, #0
    return HAL_ERROR;
 80021f4:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80021f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80021fa:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021fc:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021fe:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002200:	6808      	ldr	r0, [r1, #0]
 8002202:	f020 000e 	bic.w	r0, r0, #14
 8002206:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002208:	6808      	ldr	r0, [r1, #0]
 800220a:	f020 0001 	bic.w	r0, r0, #1
 800220e:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002210:	f04f 0c01 	mov.w	ip, #1
 8002214:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002216:	f002 021c 	and.w	r2, r2, #28
 800221a:	fa0c f202 	lsl.w	r2, ip, r2
 800221e:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002220:	2200      	movs	r2, #0
    return status;
 8002222:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002224:	f883 c025 	strb.w	ip, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002228:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop

08002230 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002230:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002234:	2a02      	cmp	r2, #2
 8002236:	d003      	beq.n	8002240 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002238:	2204      	movs	r2, #4
 800223a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 800223c:	2001      	movs	r0, #1
}
 800223e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002240:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002242:	6c42      	ldr	r2, [r0, #68]	@ 0x44
{
 8002244:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002246:	680c      	ldr	r4, [r1, #0]
 8002248:	f024 040e 	bic.w	r4, r4, #14
 800224c:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800224e:	680c      	ldr	r4, [r1, #0]
 8002250:	f024 0401 	bic.w	r4, r4, #1
 8002254:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002256:	f002 021c 	and.w	r2, r2, #28
 800225a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800225c:	2101      	movs	r1, #1
 800225e:	fa01 f202 	lsl.w	r2, r1, r2
 8002262:	6062      	str	r2, [r4, #4]
    if (hdma->XferAbortCallback != NULL)
 8002264:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002266:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800226a:	2400      	movs	r4, #0
 800226c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8002270:	b102      	cbz	r2, 8002274 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8002272:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002274:	2000      	movs	r0, #0
}
 8002276:	bd10      	pop	{r4, pc}

08002278 <HAL_DMA_IRQHandler>:
{
 8002278:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800227a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800227c:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800227e:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002280:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002282:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002284:	f003 031c 	and.w	r3, r3, #28
 8002288:	2204      	movs	r2, #4
 800228a:	409a      	lsls	r2, r3
 800228c:	420a      	tst	r2, r1
 800228e:	d00e      	beq.n	80022ae <HAL_DMA_IRQHandler+0x36>
 8002290:	f014 0f04 	tst.w	r4, #4
 8002294:	d00b      	beq.n	80022ae <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002296:	682b      	ldr	r3, [r5, #0]
 8002298:	069b      	lsls	r3, r3, #26
 800229a:	d403      	bmi.n	80022a4 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	f023 0304 	bic.w	r3, r3, #4
 80022a2:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80022a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80022a6:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80022a8:	b1cb      	cbz	r3, 80022de <HAL_DMA_IRQHandler+0x66>
}
 80022aa:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80022ac:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022ae:	2202      	movs	r2, #2
 80022b0:	409a      	lsls	r2, r3
 80022b2:	420a      	tst	r2, r1
 80022b4:	d015      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x6a>
 80022b6:	f014 0f02 	tst.w	r4, #2
 80022ba:	d012      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022bc:	682b      	ldr	r3, [r5, #0]
 80022be:	0699      	lsls	r1, r3, #26
 80022c0:	d406      	bmi.n	80022d0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022c2:	682b      	ldr	r3, [r5, #0]
 80022c4:	f023 030a 	bic.w	r3, r3, #10
 80022c8:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 80022d0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022d2:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80022d4:	2100      	movs	r1, #0
 80022d6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1e5      	bne.n	80022aa <HAL_DMA_IRQHandler+0x32>
}
 80022de:	bc70      	pop	{r4, r5, r6}
 80022e0:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80022e2:	2208      	movs	r2, #8
 80022e4:	409a      	lsls	r2, r3
 80022e6:	420a      	tst	r2, r1
 80022e8:	d0f9      	beq.n	80022de <HAL_DMA_IRQHandler+0x66>
 80022ea:	0722      	lsls	r2, r4, #28
 80022ec:	d5f7      	bpl.n	80022de <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ee:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 80022f0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f2:	f022 020e 	bic.w	r2, r2, #14
 80022f6:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022f8:	2201      	movs	r2, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 80022fe:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002300:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002302:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002304:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8002308:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 800230c:	2900      	cmp	r1, #0
 800230e:	d0e6      	beq.n	80022de <HAL_DMA_IRQHandler+0x66>
}
 8002310:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002312:	4708      	bx	r1

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002318:	680c      	ldr	r4, [r1, #0]
{
 800231a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231c:	2c00      	cmp	r4, #0
 800231e:	f000 80bd 	beq.w	800249c <HAL_GPIO_Init+0x188>
  uint32_t position = 0x00u;
 8002322:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002324:	f04f 0b01 	mov.w	fp, #1
 8002328:	e066      	b.n	80023f8 <HAL_GPIO_Init+0xe4>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232a:	2a03      	cmp	r2, #3
 800232c:	f040 80b9 	bne.w	80024a2 <HAL_GPIO_Init+0x18e>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002330:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8002334:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002338:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800233c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800233e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002342:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002344:	d054      	beq.n	80023f0 <HAL_GPIO_Init+0xdc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	4f64      	ldr	r7, [pc, #400]	@ (80024d8 <HAL_GPIO_Init+0x1c4>)
 8002348:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	663a      	str	r2, [r7, #96]	@ 0x60
 8002350:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002352:	f002 0201 	and.w	r2, r2, #1
 8002356:	9203      	str	r2, [sp, #12]
 8002358:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 800235a:	f023 0203 	bic.w	r2, r3, #3
 800235e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8002362:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002366:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800236a:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800236c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002370:	260f      	movs	r6, #15
 8002372:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002376:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800237a:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800237e:	d013      	beq.n	80023a8 <HAL_GPIO_Init+0x94>
 8002380:	4e56      	ldr	r6, [pc, #344]	@ (80024dc <HAL_GPIO_Init+0x1c8>)
 8002382:	42b0      	cmp	r0, r6
 8002384:	f000 8099 	beq.w	80024ba <HAL_GPIO_Init+0x1a6>
 8002388:	4e55      	ldr	r6, [pc, #340]	@ (80024e0 <HAL_GPIO_Init+0x1cc>)
 800238a:	42b0      	cmp	r0, r6
 800238c:	f000 809c 	beq.w	80024c8 <HAL_GPIO_Init+0x1b4>
 8002390:	f8df e154 	ldr.w	lr, [pc, #340]	@ 80024e8 <HAL_GPIO_Init+0x1d4>
 8002394:	4570      	cmp	r0, lr
 8002396:	bf0c      	ite	eq
 8002398:	f04f 0e03 	moveq.w	lr, #3
 800239c:	f04f 0e07 	movne.w	lr, #7
 80023a0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80023a4:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023a8:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023aa:	4a4e      	ldr	r2, [pc, #312]	@ (80024e4 <HAL_GPIO_Init+0x1d0>)
 80023ac:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023ae:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 80023b0:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80023b4:	4e4b      	ldr	r6, [pc, #300]	@ (80024e4 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 80023b6:	bf54      	ite	pl
 80023b8:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80023ba:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 80023be:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 80023c0:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c2:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80023c4:	4e47      	ldr	r6, [pc, #284]	@ (80024e4 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 80023c6:	bf54      	ite	pl
 80023c8:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80023ca:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 80023ce:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023d0:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d2:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80023d4:	4e43      	ldr	r6, [pc, #268]	@ (80024e4 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 80023d6:	bf54      	ite	pl
 80023d8:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80023da:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 80023de:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 80023e0:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023e2:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80023e4:	4d3f      	ldr	r5, [pc, #252]	@ (80024e4 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 80023e6:	bf54      	ite	pl
 80023e8:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80023ea:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 80023ee:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 80023f0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f2:	fa34 f203 	lsrs.w	r2, r4, r3
 80023f6:	d051      	beq.n	800249c <HAL_GPIO_Init+0x188>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023f8:	fa0b fe03 	lsl.w	lr, fp, r3
    if (iocurrent != 0x00u)
 80023fc:	ea1e 0a04 	ands.w	sl, lr, r4
 8002400:	d0f6      	beq.n	80023f0 <HAL_GPIO_Init+0xdc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002402:	684d      	ldr	r5, [r1, #4]
 8002404:	f005 0203 	and.w	r2, r5, #3
 8002408:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800240c:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800240e:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002412:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002416:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800241a:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800241e:	d884      	bhi.n	800232a <HAL_GPIO_Init+0x16>
        temp = GPIOx->OSPEEDR;
 8002420:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002424:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002426:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800242a:	fa06 f80c 	lsl.w	r8, r6, ip
 800242e:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8002432:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8002436:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243a:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800243c:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002440:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8002444:	fa0e fe03 	lsl.w	lr, lr, r3
 8002448:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 800244c:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8002450:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002454:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002458:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800245c:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002460:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002462:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002466:	f47f af63 	bne.w	8002330 <HAL_GPIO_Init+0x1c>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800246a:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 800246c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002470:	f003 0e07 	and.w	lr, r3, #7
 8002474:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002478:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800247c:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 8002480:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002484:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002486:	260f      	movs	r6, #15
 8002488:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800248c:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800248e:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002492:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 8002496:	f8c8 e020 	str.w	lr, [r8, #32]
 800249a:	e749      	b.n	8002330 <HAL_GPIO_Init+0x1c>
  }
}
 800249c:	b005      	add	sp, #20
 800249e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->PUPDR;
 80024a2:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a6:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a8:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ac:	fa06 fe0c 	lsl.w	lr, r6, ip
 80024b0:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 80024b4:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b8:	e73a      	b.n	8002330 <HAL_GPIO_Init+0x1c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ba:	f04f 0e01 	mov.w	lr, #1
 80024be:	fa0e fc0c 	lsl.w	ip, lr, ip
 80024c2:	ea47 070c 	orr.w	r7, r7, ip
 80024c6:	e76f      	b.n	80023a8 <HAL_GPIO_Init+0x94>
 80024c8:	f04f 0e02 	mov.w	lr, #2
 80024cc:	fa0e fc0c 	lsl.w	ip, lr, ip
 80024d0:	ea47 070c 	orr.w	r7, r7, ip
 80024d4:	e768      	b.n	80023a8 <HAL_GPIO_Init+0x94>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	48000400 	.word	0x48000400
 80024e0:	48000800 	.word	0x48000800
 80024e4:	40010400 	.word	0x40010400
 80024e8:	48000c00 	.word	0x48000c00

080024ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024ec:	6903      	ldr	r3, [r0, #16]
 80024ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80024f0:	bf14      	ite	ne
 80024f2:	2001      	movne	r0, #1
 80024f4:	2000      	moveq	r0, #0
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f8:	b10a      	cbz	r2, 80024fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024fa:	6181      	str	r1, [r0, #24]
 80024fc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024fe:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop

08002504 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002504:	4b02      	ldr	r3, [pc, #8]	@ (8002510 <HAL_PWREx_GetVoltageRange+0xc>)
 8002506:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002508:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40007000 	.word	0x40007000

08002514 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002514:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002518:	d00e      	beq.n	8002538 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800251a:	4a1b      	ldr	r2, [pc, #108]	@ (8002588 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800251c:	6813      	ldr	r3, [r2, #0]
 800251e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002526:	d005      	beq.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800252e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002532:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002534:	2000      	movs	r0, #0
 8002536:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002538:	4913      	ldr	r1, [pc, #76]	@ (8002588 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800253a:	680b      	ldr	r3, [r1, #0]
 800253c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002544:	d0f6      	beq.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002546:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002548:	4a10      	ldr	r2, [pc, #64]	@ (800258c <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800254a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800254e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002552:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002558:	2032      	movs	r0, #50	@ 0x32
 800255a:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800255e:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002566:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002568:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800256c:	d506      	bpl.n	800257c <HAL_PWREx_ControlVoltageScaling+0x68>
 800256e:	e000      	b.n	8002572 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8002570:	b123      	cbz	r3, 800257c <HAL_PWREx_ControlVoltageScaling+0x68>
 8002572:	694a      	ldr	r2, [r1, #20]
 8002574:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8002576:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257a:	d4f9      	bmi.n	8002570 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800257c:	4b02      	ldr	r3, [pc, #8]	@ (8002588 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	055b      	lsls	r3, r3, #21
 8002582:	d5d7      	bpl.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8002584:	2003      	movs	r0, #3
}
 8002586:	4770      	bx	lr
 8002588:	40007000 	.word	0x40007000
 800258c:	20000018 	.word	0x20000018
 8002590:	431bde83 	.word	0x431bde83

08002594 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002594:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002596:	4d20      	ldr	r5, [pc, #128]	@ (8002618 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002598:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800259a:	00db      	lsls	r3, r3, #3
{
 800259c:	b083      	sub	sp, #12
 800259e:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025a0:	d51a      	bpl.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025a2:	f7ff ffaf 	bl	8002504 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80025aa:	d027      	beq.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025ac:	2c80      	cmp	r4, #128	@ 0x80
 80025ae:	d82c      	bhi.n	800260a <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025b0:	d02f      	beq.n	8002612 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025b2:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 80025b6:	fab4 f484 	clz	r4, r4
 80025ba:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025bc:	4917      	ldr	r1, [pc, #92]	@ (800261c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80025be:	680b      	ldr	r3, [r1, #0]
 80025c0:	f023 0307 	bic.w	r3, r3, #7
 80025c4:	4323      	orrs	r3, r4
 80025c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025c8:	6808      	ldr	r0, [r1, #0]
 80025ca:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80025ce:	1b00      	subs	r0, r0, r4
 80025d0:	bf18      	it	ne
 80025d2:	2001      	movne	r0, #1
 80025d4:	b003      	add	sp, #12
 80025d6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025de:	65ab      	str	r3, [r5, #88]	@ 0x58
 80025e0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80025ea:	f7ff ff8b 	bl	8002504 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ee:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025fa:	d1d7      	bne.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80025fc:	2c80      	cmp	r4, #128	@ 0x80
 80025fe:	d906      	bls.n	800260e <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002600:	2ca1      	cmp	r4, #161	@ 0xa1
 8002602:	bf34      	ite	cc
 8002604:	2401      	movcc	r4, #1
 8002606:	2402      	movcs	r4, #2
 8002608:	e7d8      	b.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 800260a:	2403      	movs	r4, #3
 800260c:	e7d6      	b.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800260e:	2400      	movs	r4, #0
 8002610:	e7d4      	b.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002612:	2402      	movs	r4, #2
 8002614:	e7d2      	b.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x28>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40022000 	.word	0x40022000

08002620 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002620:	4a28      	ldr	r2, [pc, #160]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002622:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002624:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002626:	f013 030c 	ands.w	r3, r3, #12
 800262a:	d005      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x18>
 800262c:	2b0c      	cmp	r3, #12
 800262e:	d035      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002630:	2b04      	cmp	r3, #4
 8002632:	d141      	bne.n	80026b8 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8002634:	4824      	ldr	r0, [pc, #144]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002636:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002638:	4a22      	ldr	r2, [pc, #136]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800263a:	6811      	ldr	r1, [r2, #0]
 800263c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800263e:	bf54      	ite	pl
 8002640:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002644:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002646:	4921      	ldr	r1, [pc, #132]	@ (80026cc <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002648:	bf54      	ite	pl
 800264a:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800264e:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8002652:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002656:	b303      	cbz	r3, 800269a <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d11d      	bne.n	8002698 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800265c:	4b19      	ldr	r3, [pc, #100]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002664:	2b02      	cmp	r3, #2
 8002666:	d025      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x94>
 8002668:	4a19      	ldr	r2, [pc, #100]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800266a:	2b03      	cmp	r3, #3
 800266c:	bf08      	it	eq
 800266e:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002670:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002672:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002674:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800267c:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002680:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002684:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002686:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800268a:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800268c:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800268e:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002692:	fbb2 f0f3 	udiv	r0, r2, r3
 8002696:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002698:	2000      	movs	r0, #0
}
 800269a:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269c:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026a0:	2a01      	cmp	r2, #1
 80026a2:	d0c9      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026a4:	4b07      	ldr	r3, [pc, #28]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80026ac:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026ae:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 80026b2:	d1d9      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 80026b4:	4804      	ldr	r0, [pc, #16]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80026b6:	e7db      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026bc:	bf18      	it	ne
 80026be:	2000      	movne	r0, #0
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	0800549c 	.word	0x0800549c
 80026d0:	007a1200 	.word	0x007a1200

080026d4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80026d4:	2800      	cmp	r0, #0
 80026d6:	f000 821c 	beq.w	8002b12 <HAL_RCC_OscConfig+0x43e>
{
 80026da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026de:	4aa3      	ldr	r2, [pc, #652]	@ (800296c <HAL_RCC_OscConfig+0x298>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026e0:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e2:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e4:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026e6:	06df      	lsls	r7, r3, #27
{
 80026e8:	b083      	sub	sp, #12
 80026ea:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ec:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f0:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026f4:	d52e      	bpl.n	8002754 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026f6:	2d00      	cmp	r5, #0
 80026f8:	f000 813f 	beq.w	800297a <HAL_RCC_OscConfig+0x2a6>
 80026fc:	2d0c      	cmp	r5, #12
 80026fe:	f000 8139 	beq.w	8002974 <HAL_RCC_OscConfig+0x2a0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002702:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8002704:	4f99      	ldr	r7, [pc, #612]	@ (800296c <HAL_RCC_OscConfig+0x298>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 81af 	beq.w	8002a6a <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_MSI_ENABLE();
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002714:	f7ff fc28 	bl	8001f68 <HAL_GetTick>
 8002718:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800271a:	e006      	b.n	800272a <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800271c:	f7ff fc24 	bl	8001f68 <HAL_GetTick>
 8002720:	eba0 0008 	sub.w	r0, r0, r8
 8002724:	2802      	cmp	r0, #2
 8002726:	f200 81b0 	bhi.w	8002a8a <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	079a      	lsls	r2, r3, #30
 800272e:	d5f5      	bpl.n	800271c <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f043 0308 	orr.w	r3, r3, #8
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800273c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002740:	4313      	orrs	r3, r2
 8002742:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a22      	ldr	r2, [r4, #32]
 8002748:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800274c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002750:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	07d8      	lsls	r0, r3, #31
 8002756:	f100 80e0 	bmi.w	800291a <HAL_RCC_OscConfig+0x246>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	0798      	lsls	r0, r3, #30
 800275c:	d523      	bpl.n	80027a6 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800275e:	2d04      	cmp	r5, #4
 8002760:	f000 815f 	beq.w	8002a22 <HAL_RCC_OscConfig+0x34e>
 8002764:	2d0c      	cmp	r5, #12
 8002766:	f000 8159 	beq.w	8002a1c <HAL_RCC_OscConfig+0x348>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276a:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800276c:	4e7f      	ldr	r6, [pc, #508]	@ (800296c <HAL_RCC_OscConfig+0x298>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 81a6 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x3ec>
        __HAL_RCC_HSI_ENABLE();
 8002774:	6833      	ldr	r3, [r6, #0]
 8002776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800277c:	f7ff fbf4 	bl	8001f68 <HAL_GetTick>
 8002780:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002782:	e005      	b.n	8002790 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002784:	f7ff fbf0 	bl	8001f68 <HAL_GetTick>
 8002788:	1bc0      	subs	r0, r0, r7
 800278a:	2802      	cmp	r0, #2
 800278c:	f200 817d 	bhi.w	8002a8a <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002790:	6833      	ldr	r3, [r6, #0]
 8002792:	055a      	lsls	r2, r3, #21
 8002794:	d5f6      	bpl.n	8002784 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002796:	6873      	ldr	r3, [r6, #4]
 8002798:	6922      	ldr	r2, [r4, #16]
 800279a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800279e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80027a2:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	071e      	lsls	r6, r3, #28
 80027a8:	d531      	bpl.n	800280e <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027aa:	6963      	ldr	r3, [r4, #20]
      uint32_t csr_temp = RCC->CSR;
 80027ac:	4e6f      	ldr	r6, [pc, #444]	@ (800296c <HAL_RCC_OscConfig+0x298>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8147 	beq.w	8002a42 <HAL_RCC_OscConfig+0x36e>
      uint32_t csr_temp = RCC->CSR;
 80027b4:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80027b8:	69a2      	ldr	r2, [r4, #24]
 80027ba:	f003 0110 	and.w	r1, r3, #16
 80027be:	428a      	cmp	r2, r1
 80027c0:	d00f      	beq.n	80027e2 <HAL_RCC_OscConfig+0x10e>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80027c2:	f003 0103 	and.w	r1, r3, #3
 80027c6:	2902      	cmp	r1, #2
 80027c8:	f000 8118 	beq.w	80029fc <HAL_RCC_OscConfig+0x328>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80027cc:	07d8      	lsls	r0, r3, #31
 80027ce:	f100 820b 	bmi.w	8002be8 <HAL_RCC_OscConfig+0x514>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80027d2:	4966      	ldr	r1, [pc, #408]	@ (800296c <HAL_RCC_OscConfig+0x298>)
 80027d4:	f8d1 3094 	ldr.w	r3, [r1, #148]	@ 0x94
 80027d8:	f023 0310 	bic.w	r3, r3, #16
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      __HAL_RCC_LSI_ENABLE();
 80027e2:	4e62      	ldr	r6, [pc, #392]	@ (800296c <HAL_RCC_OscConfig+0x298>)
 80027e4:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80027f0:	f7ff fbba 	bl	8001f68 <HAL_GetTick>
 80027f4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027f6:	e005      	b.n	8002804 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7ff fbb6 	bl	8001f68 <HAL_GetTick>
 80027fc:	1bc0      	subs	r0, r0, r7
 80027fe:	2811      	cmp	r0, #17
 8002800:	f200 8143 	bhi.w	8002a8a <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002804:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002808:	079a      	lsls	r2, r3, #30
 800280a:	d5f5      	bpl.n	80027f8 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	075f      	lsls	r7, r3, #29
 8002810:	d546      	bpl.n	80028a0 <HAL_RCC_OscConfig+0x1cc>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002812:	4b56      	ldr	r3, [pc, #344]	@ (800296c <HAL_RCC_OscConfig+0x298>)
 8002814:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002816:	00d6      	lsls	r6, r2, #3
 8002818:	f100 8150 	bmi.w	8002abc <HAL_RCC_OscConfig+0x3e8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800281e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002822:	659a      	str	r2, [r3, #88]	@ 0x58
 8002824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800282e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002830:	4f4f      	ldr	r7, [pc, #316]	@ (8002970 <HAL_RCC_OscConfig+0x29c>)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	05d8      	lsls	r0, r3, #23
 8002836:	f140 81b2 	bpl.w	8002b9e <HAL_RCC_OscConfig+0x4ca>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800283a:	68a3      	ldr	r3, [r4, #8]
 800283c:	07d9      	lsls	r1, r3, #31
 800283e:	f140 816a 	bpl.w	8002b16 <HAL_RCC_OscConfig+0x442>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002842:	494a      	ldr	r1, [pc, #296]	@ (800296c <HAL_RCC_OscConfig+0x298>)
 8002844:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002848:	f003 0080 	and.w	r0, r3, #128	@ 0x80
 800284c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002850:	4302      	orrs	r2, r0
 8002852:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002856:	f013 0f04 	tst.w	r3, #4
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800285a:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800285e:	bf1e      	ittt	ne
 8002860:	f043 0304 	orrne.w	r3, r3, #4
 8002864:	f8c1 3090 	strne.w	r3, [r1, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002868:	f8d1 3090 	ldrne.w	r3, [r1, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8002874:	f7ff fb78 	bl	8001f68 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002878:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 800296c <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 800287c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002882:	e005      	b.n	8002890 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7ff fb70 	bl	8001f68 <HAL_GetTick>
 8002888:	1bc0      	subs	r0, r0, r7
 800288a:	4548      	cmp	r0, r9
 800288c:	f200 80fd 	bhi.w	8002a8a <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002890:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8002894:	079b      	lsls	r3, r3, #30
 8002896:	d5f5      	bpl.n	8002884 <HAL_RCC_OscConfig+0x1b0>
    if(pwrclkchanged == SET)
 8002898:	2e00      	cmp	r6, #0
 800289a:	f040 817a 	bne.w	8002b92 <HAL_RCC_OscConfig+0x4be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	0699      	lsls	r1, r3, #26
 80028a2:	d518      	bpl.n	80028d6 <HAL_RCC_OscConfig+0x202>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      __HAL_RCC_HSI48_ENABLE();
 80028a6:	4e31      	ldr	r6, [pc, #196]	@ (800296c <HAL_RCC_OscConfig+0x298>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 815e 	beq.w	8002b6a <HAL_RCC_OscConfig+0x496>
      __HAL_RCC_HSI48_ENABLE();
 80028ae:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80028ba:	f7ff fb55 	bl	8001f68 <HAL_GetTick>
 80028be:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028c0:	e005      	b.n	80028ce <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c2:	f7ff fb51 	bl	8001f68 <HAL_GetTick>
 80028c6:	1bc0      	subs	r0, r0, r7
 80028c8:	2802      	cmp	r0, #2
 80028ca:	f200 80de 	bhi.w	8002a8a <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ce:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80028d2:	079a      	lsls	r2, r3, #30
 80028d4:	d5f5      	bpl.n	80028c2 <HAL_RCC_OscConfig+0x1ee>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80028d8:	b1eb      	cbz	r3, 8002916 <HAL_RCC_OscConfig+0x242>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028da:	2b02      	cmp	r3, #2
 80028dc:	f000 81a2 	beq.w	8002c24 <HAL_RCC_OscConfig+0x550>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e0:	2d0c      	cmp	r5, #12
 80028e2:	f000 808b 	beq.w	80029fc <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4c21      	ldr	r4, [pc, #132]	@ (800296c <HAL_RCC_OscConfig+0x298>)
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028f0:	f7ff fb3a 	bl	8001f68 <HAL_GetTick>
 80028f4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f6:	e005      	b.n	8002904 <HAL_RCC_OscConfig+0x230>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7ff fb36 	bl	8001f68 <HAL_GetTick>
 80028fc:	1b40      	subs	r0, r0, r5
 80028fe:	2802      	cmp	r0, #2
 8002900:	f200 80c3 	bhi.w	8002a8a <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	019b      	lsls	r3, r3, #6
 8002908:	d4f6      	bmi.n	80028f8 <HAL_RCC_OscConfig+0x224>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800290a:	68e3      	ldr	r3, [r4, #12]
 800290c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8002910:	f023 0303 	bic.w	r3, r3, #3
 8002914:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8002916:	2000      	movs	r0, #0
 8002918:	e071      	b.n	80029fe <HAL_RCC_OscConfig+0x32a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800291a:	2d08      	cmp	r5, #8
 800291c:	d074      	beq.n	8002a08 <HAL_RCC_OscConfig+0x334>
 800291e:	2d0c      	cmp	r5, #12
 8002920:	d070      	beq.n	8002a04 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002922:	6863      	ldr	r3, [r4, #4]
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002928:	f000 80b3 	beq.w	8002a92 <HAL_RCC_OscConfig+0x3be>
 800292c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002930:	f000 814d 	beq.w	8002bce <HAL_RCC_OscConfig+0x4fa>
 8002934:	4f0d      	ldr	r7, [pc, #52]	@ (800296c <HAL_RCC_OscConfig+0x298>)
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800293c:	603a      	str	r2, [r7, #0]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002944:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 80a8 	bne.w	8002a9c <HAL_RCC_OscConfig+0x3c8>
        tickstart = HAL_GetTick();
 800294c:	f7ff fb0c 	bl	8001f68 <HAL_GetTick>
 8002950:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002952:	e006      	b.n	8002962 <HAL_RCC_OscConfig+0x28e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002954:	f7ff fb08 	bl	8001f68 <HAL_GetTick>
 8002958:	eba0 0008 	sub.w	r0, r0, r8
 800295c:	2864      	cmp	r0, #100	@ 0x64
 800295e:	f200 8094 	bhi.w	8002a8a <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	039b      	lsls	r3, r3, #14
 8002966:	d4f5      	bmi.n	8002954 <HAL_RCC_OscConfig+0x280>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	e6f6      	b.n	800275a <HAL_RCC_OscConfig+0x86>
 800296c:	40021000 	.word	0x40021000
 8002970:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002974:	2e01      	cmp	r6, #1
 8002976:	f47f aec4 	bne.w	8002702 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800297a:	4ba6      	ldr	r3, [pc, #664]	@ (8002c14 <HAL_RCC_OscConfig+0x540>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0798      	lsls	r0, r3, #30
 8002980:	d439      	bmi.n	80029f6 <HAL_RCC_OscConfig+0x322>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002982:	4ba4      	ldr	r3, [pc, #656]	@ (8002c14 <HAL_RCC_OscConfig+0x540>)
 8002984:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	0711      	lsls	r1, r2, #28
 800298a:	bf56      	itet	pl
 800298c:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8002990:	681b      	ldrmi	r3, [r3, #0]
 8002992:	091b      	lsrpl	r3, r3, #4
 8002994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002998:	4298      	cmp	r0, r3
 800299a:	f200 80a3 	bhi.w	8002ae4 <HAL_RCC_OscConfig+0x410>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800299e:	4b9d      	ldr	r3, [pc, #628]	@ (8002c14 <HAL_RCC_OscConfig+0x540>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	f042 0208 	orr.w	r2, r2, #8
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80029ae:	4302      	orrs	r2, r0
 80029b0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	6a21      	ldr	r1, [r4, #32]
 80029b6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80029ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029be:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c0:	2d00      	cmp	r5, #0
 80029c2:	f000 80fe 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x4ee>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029c6:	f7ff fe2b 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80029ca:	4b92      	ldr	r3, [pc, #584]	@ (8002c14 <HAL_RCC_OscConfig+0x540>)
 80029cc:	4a92      	ldr	r2, [pc, #584]	@ (8002c18 <HAL_RCC_OscConfig+0x544>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029d4:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 80029d6:	4a91      	ldr	r2, [pc, #580]	@ (8002c1c <HAL_RCC_OscConfig+0x548>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 80029e0:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e2:	4a8f      	ldr	r2, [pc, #572]	@ (8002c20 <HAL_RCC_OscConfig+0x54c>)
 80029e4:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80029e6:	f7ff fa7d 	bl	8001ee4 <HAL_InitTick>
        if(status != HAL_OK)
 80029ea:	b940      	cbnz	r0, 80029fe <HAL_RCC_OscConfig+0x32a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	07d8      	lsls	r0, r3, #31
 80029f0:	f57f aeb3 	bpl.w	800275a <HAL_RCC_OscConfig+0x86>
 80029f4:	e791      	b.n	800291a <HAL_RCC_OscConfig+0x246>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029f6:	69e3      	ldr	r3, [r4, #28]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1c2      	bne.n	8002982 <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 80029fc:	2001      	movs	r0, #1
}
 80029fe:	b003      	add	sp, #12
 8002a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a04:	2e03      	cmp	r6, #3
 8002a06:	d18c      	bne.n	8002922 <HAL_RCC_OscConfig+0x24e>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	4a82      	ldr	r2, [pc, #520]	@ (8002c14 <HAL_RCC_OscConfig+0x540>)
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	0391      	lsls	r1, r2, #14
 8002a0e:	f57f aea4 	bpl.w	800275a <HAL_RCC_OscConfig+0x86>
 8002a12:	6862      	ldr	r2, [r4, #4]
 8002a14:	2a00      	cmp	r2, #0
 8002a16:	f47f aea0 	bne.w	800275a <HAL_RCC_OscConfig+0x86>
 8002a1a:	e7ef      	b.n	80029fc <HAL_RCC_OscConfig+0x328>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a1c:	2e02      	cmp	r6, #2
 8002a1e:	f47f aea4 	bne.w	800276a <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a22:	4a7c      	ldr	r2, [pc, #496]	@ (8002c14 <HAL_RCC_OscConfig+0x540>)
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	0551      	lsls	r1, r2, #21
 8002a28:	d502      	bpl.n	8002a30 <HAL_RCC_OscConfig+0x35c>
 8002a2a:	68e2      	ldr	r2, [r4, #12]
 8002a2c:	2a00      	cmp	r2, #0
 8002a2e:	d0e5      	beq.n	80029fc <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4978      	ldr	r1, [pc, #480]	@ (8002c14 <HAL_RCC_OscConfig+0x540>)
 8002a32:	6920      	ldr	r0, [r4, #16]
 8002a34:	684a      	ldr	r2, [r1, #4]
 8002a36:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 8002a3a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002a3e:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a40:	e6b1      	b.n	80027a6 <HAL_RCC_OscConfig+0xd2>
      __HAL_RCC_LSI_DISABLE();
 8002a42:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002a4e:	f7ff fa8b 	bl	8001f68 <HAL_GetTick>
 8002a52:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a54:	e004      	b.n	8002a60 <HAL_RCC_OscConfig+0x38c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a56:	f7ff fa87 	bl	8001f68 <HAL_GetTick>
 8002a5a:	1bc0      	subs	r0, r0, r7
 8002a5c:	2811      	cmp	r0, #17
 8002a5e:	d814      	bhi.n	8002a8a <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a60:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002a64:	079b      	lsls	r3, r3, #30
 8002a66:	d4f6      	bmi.n	8002a56 <HAL_RCC_OscConfig+0x382>
 8002a68:	e6d0      	b.n	800280c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_MSI_DISABLE();
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002a72:	f7ff fa79 	bl	8001f68 <HAL_GetTick>
 8002a76:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	079b      	lsls	r3, r3, #30
 8002a7c:	d5b6      	bpl.n	80029ec <HAL_RCC_OscConfig+0x318>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a7e:	f7ff fa73 	bl	8001f68 <HAL_GetTick>
 8002a82:	eba0 0008 	sub.w	r0, r0, r8
 8002a86:	2802      	cmp	r0, #2
 8002a88:	d9f6      	bls.n	8002a78 <HAL_RCC_OscConfig+0x3a4>
            return HAL_TIMEOUT;
 8002a8a:	2003      	movs	r0, #3
}
 8002a8c:	b003      	add	sp, #12
 8002a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a92:	4a60      	ldr	r2, [pc, #384]	@ (8002c14 <HAL_RCC_OscConfig+0x540>)
 8002a94:	6813      	ldr	r3, [r2, #0]
 8002a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fa64 	bl	8001f68 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa0:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8002c14 <HAL_RCC_OscConfig+0x540>
        tickstart = HAL_GetTick();
 8002aa4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa6:	e004      	b.n	8002ab2 <HAL_RCC_OscConfig+0x3de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7ff fa5e 	bl	8001f68 <HAL_GetTick>
 8002aac:	1bc0      	subs	r0, r0, r7
 8002aae:	2864      	cmp	r0, #100	@ 0x64
 8002ab0:	d8eb      	bhi.n	8002a8a <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ab6:	039a      	lsls	r2, r3, #14
 8002ab8:	d5f6      	bpl.n	8002aa8 <HAL_RCC_OscConfig+0x3d4>
 8002aba:	e755      	b.n	8002968 <HAL_RCC_OscConfig+0x294>
    FlagStatus       pwrclkchanged = RESET;
 8002abc:	2600      	movs	r6, #0
 8002abe:	e6b7      	b.n	8002830 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002ac0:	6833      	ldr	r3, [r6, #0]
 8002ac2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ac6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fa4e 	bl	8001f68 <HAL_GetTick>
 8002acc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ace:	e004      	b.n	8002ada <HAL_RCC_OscConfig+0x406>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad0:	f7ff fa4a 	bl	8001f68 <HAL_GetTick>
 8002ad4:	1bc0      	subs	r0, r0, r7
 8002ad6:	2802      	cmp	r0, #2
 8002ad8:	d8d7      	bhi.n	8002a8a <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ada:	6833      	ldr	r3, [r6, #0]
 8002adc:	055b      	lsls	r3, r3, #21
 8002ade:	d4f7      	bmi.n	8002ad0 <HAL_RCC_OscConfig+0x3fc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	e660      	b.n	80027a6 <HAL_RCC_OscConfig+0xd2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae4:	f7ff fd56 	bl	8002594 <RCC_SetFlashLatencyFromMSIRange>
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d187      	bne.n	80029fc <HAL_RCC_OscConfig+0x328>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aec:	4b49      	ldr	r3, [pc, #292]	@ (8002c14 <HAL_RCC_OscConfig+0x540>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	f042 0208 	orr.w	r2, r2, #8
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002afa:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002afe:	430a      	orrs	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	6a21      	ldr	r1, [r4, #32]
 8002b06:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002b0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	e759      	b.n	80029c6 <HAL_RCC_OscConfig+0x2f2>
    return HAL_ERROR;
 8002b12:	2001      	movs	r0, #1
}
 8002b14:	4770      	bx	lr
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b16:	4f3f      	ldr	r7, [pc, #252]	@ (8002c14 <HAL_RCC_OscConfig+0x540>)
 8002b18:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002b1c:	f022 0201 	bic.w	r2, r2, #1
 8002b20:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b24:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002b28:	f022 0204 	bic.w	r2, r2, #4
 8002b2c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f47f ae9f 	bne.w	8002874 <HAL_RCC_OscConfig+0x1a0>
      tickstart = HAL_GetTick();
 8002b36:	f7ff fa17 	bl	8001f68 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002b3e:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b40:	e005      	b.n	8002b4e <HAL_RCC_OscConfig+0x47a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7ff fa11 	bl	8001f68 <HAL_GetTick>
 8002b46:	eba0 0008 	sub.w	r0, r0, r8
 8002b4a:	4548      	cmp	r0, r9
 8002b4c:	d89d      	bhi.n	8002a8a <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b52:	0798      	lsls	r0, r3, #30
 8002b54:	d4f5      	bmi.n	8002b42 <HAL_RCC_OscConfig+0x46e>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002b56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if(pwrclkchanged == SET)
 8002b62:	2e00      	cmp	r6, #0
 8002b64:	f43f ae9b 	beq.w	800289e <HAL_RCC_OscConfig+0x1ca>
 8002b68:	e013      	b.n	8002b92 <HAL_RCC_OscConfig+0x4be>
      __HAL_RCC_HSI48_DISABLE();
 8002b6a:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8002b76:	f7ff f9f7 	bl	8001f68 <HAL_GetTick>
 8002b7a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b7c:	e004      	b.n	8002b88 <HAL_RCC_OscConfig+0x4b4>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b7e:	f7ff f9f3 	bl	8001f68 <HAL_GetTick>
 8002b82:	1bc0      	subs	r0, r0, r7
 8002b84:	2802      	cmp	r0, #2
 8002b86:	d880      	bhi.n	8002a8a <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b88:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002b8c:	079b      	lsls	r3, r3, #30
 8002b8e:	d4f6      	bmi.n	8002b7e <HAL_RCC_OscConfig+0x4aa>
 8002b90:	e6a1      	b.n	80028d6 <HAL_RCC_OscConfig+0x202>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	4a20      	ldr	r2, [pc, #128]	@ (8002c14 <HAL_RCC_OscConfig+0x540>)
 8002b94:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b9c:	e67f      	b.n	800289e <HAL_RCC_OscConfig+0x1ca>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002ba6:	f7ff f9df 	bl	8001f68 <HAL_GetTick>
 8002baa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	05da      	lsls	r2, r3, #23
 8002bb0:	f53f ae43 	bmi.w	800283a <HAL_RCC_OscConfig+0x166>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb4:	f7ff f9d8 	bl	8001f68 <HAL_GetTick>
 8002bb8:	eba0 0008 	sub.w	r0, r0, r8
 8002bbc:	2802      	cmp	r0, #2
 8002bbe:	d9f5      	bls.n	8002bac <HAL_RCC_OscConfig+0x4d8>
 8002bc0:	e763      	b.n	8002a8a <HAL_RCC_OscConfig+0x3b6>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bc2:	f7ff fce7 	bl	8002594 <RCC_SetFlashLatencyFromMSIRange>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	f43f aefd 	beq.w	80029c6 <HAL_RCC_OscConfig+0x2f2>
 8002bcc:	e716      	b.n	80029fc <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bd2:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002be4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be6:	e759      	b.n	8002a9c <HAL_RCC_OscConfig+0x3c8>
          __HAL_RCC_LSI_DISABLE();
 8002be8:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8002bf4:	f7ff f9b8 	bl	8001f68 <HAL_GetTick>
 8002bf8:	4607      	mov	r7, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bfa:	e005      	b.n	8002c08 <HAL_RCC_OscConfig+0x534>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7ff f9b4 	bl	8001f68 <HAL_GetTick>
 8002c00:	1bc0      	subs	r0, r0, r7
 8002c02:	2811      	cmp	r0, #17
 8002c04:	f63f af41 	bhi.w	8002a8a <HAL_RCC_OscConfig+0x3b6>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c08:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002c0c:	0799      	lsls	r1, r3, #30
 8002c0e:	d4f5      	bmi.n	8002bfc <HAL_RCC_OscConfig+0x528>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002c10:	69a2      	ldr	r2, [r4, #24]
 8002c12:	e5de      	b.n	80027d2 <HAL_RCC_OscConfig+0xfe>
 8002c14:	40021000 	.word	0x40021000
 8002c18:	080054d4 	.word	0x080054d4
 8002c1c:	20000020 	.word	0x20000020
 8002c20:	20000018 	.word	0x20000018
      pll_config = RCC->PLLCFGR;
 8002c24:	4e40      	ldr	r6, [pc, #256]	@ (8002d28 <HAL_RCC_OscConfig+0x654>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      pll_config = RCC->PLLCFGR;
 8002c28:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	f003 0103 	and.w	r1, r3, #3
 8002c2e:	4291      	cmp	r1, r2
 8002c30:	d042      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x5e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c32:	2d0c      	cmp	r5, #12
 8002c34:	f43f aee2 	beq.w	80029fc <HAL_RCC_OscConfig+0x328>
            __HAL_RCC_PLL_DISABLE();
 8002c38:	4d3b      	ldr	r5, [pc, #236]	@ (8002d28 <HAL_RCC_OscConfig+0x654>)
 8002c3a:	682b      	ldr	r3, [r5, #0]
 8002c3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c40:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002c42:	f7ff f991 	bl	8001f68 <HAL_GetTick>
 8002c46:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c48:	e005      	b.n	8002c56 <HAL_RCC_OscConfig+0x582>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7ff f98d 	bl	8001f68 <HAL_GetTick>
 8002c4e:	1b80      	subs	r0, r0, r6
 8002c50:	2802      	cmp	r0, #2
 8002c52:	f63f af1a 	bhi.w	8002a8a <HAL_RCC_OscConfig+0x3b6>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c56:	682b      	ldr	r3, [r5, #0]
 8002c58:	019f      	lsls	r7, r3, #6
 8002c5a:	d4f6      	bmi.n	8002c4a <HAL_RCC_OscConfig+0x576>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5c:	68e9      	ldr	r1, [r5, #12]
 8002c5e:	4b33      	ldr	r3, [pc, #204]	@ (8002d2c <HAL_RCC_OscConfig+0x658>)
 8002c60:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c62:	4e31      	ldr	r6, [pc, #196]	@ (8002d28 <HAL_RCC_OscConfig+0x654>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c64:	400b      	ands	r3, r1
 8002c66:	4313      	orrs	r3, r2
 8002c68:	e9d4 210d 	ldrd	r2, r1, [r4, #52]	@ 0x34
 8002c6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c70:	3a01      	subs	r2, #1
 8002c72:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002c76:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8002c7a:	0849      	lsrs	r1, r1, #1
 8002c7c:	3901      	subs	r1, #1
 8002c7e:	0852      	lsrs	r2, r2, #1
 8002c80:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002c84:	3a01      	subs	r2, #1
 8002c86:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002c8a:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8002c8c:	682b      	ldr	r3, [r5, #0]
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c92:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c94:	68eb      	ldr	r3, [r5, #12]
 8002c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c9a:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8002c9c:	f7ff f964 	bl	8001f68 <HAL_GetTick>
 8002ca0:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca2:	e005      	b.n	8002cb0 <HAL_RCC_OscConfig+0x5dc>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7ff f960 	bl	8001f68 <HAL_GetTick>
 8002ca8:	1b00      	subs	r0, r0, r4
 8002caa:	2802      	cmp	r0, #2
 8002cac:	f63f aeed 	bhi.w	8002a8a <HAL_RCC_OscConfig+0x3b6>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb0:	6833      	ldr	r3, [r6, #0]
 8002cb2:	0198      	lsls	r0, r3, #6
 8002cb4:	d5f6      	bpl.n	8002ca4 <HAL_RCC_OscConfig+0x5d0>
 8002cb6:	e62e      	b.n	8002916 <HAL_RCC_OscConfig+0x242>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002cba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cbe:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002cc4:	d1b5      	bne.n	8002c32 <HAL_RCC_OscConfig+0x55e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cc6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002cc8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ccc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002cd0:	d1af      	bne.n	8002c32 <HAL_RCC_OscConfig+0x55e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002cd4:	0852      	lsrs	r2, r2, #1
 8002cd6:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8002cda:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cdc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002ce0:	d1a7      	bne.n	8002c32 <HAL_RCC_OscConfig+0x55e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ce2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002ce4:	0852      	lsrs	r2, r2, #1
 8002ce6:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8002cea:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cec:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002cf0:	d19f      	bne.n	8002c32 <HAL_RCC_OscConfig+0x55e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	6833      	ldr	r3, [r6, #0]
 8002cf4:	0199      	lsls	r1, r3, #6
 8002cf6:	f53f ae0e 	bmi.w	8002916 <HAL_RCC_OscConfig+0x242>
          __HAL_RCC_PLL_ENABLE();
 8002cfa:	6833      	ldr	r3, [r6, #0]
 8002cfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d00:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d02:	68f3      	ldr	r3, [r6, #12]
 8002d04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8002d0a:	f7ff f92d 	bl	8001f68 <HAL_GetTick>
 8002d0e:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d10:	e005      	b.n	8002d1e <HAL_RCC_OscConfig+0x64a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d12:	f7ff f929 	bl	8001f68 <HAL_GetTick>
 8002d16:	1b03      	subs	r3, r0, r4
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	f63f aeb6 	bhi.w	8002a8a <HAL_RCC_OscConfig+0x3b6>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	6833      	ldr	r3, [r6, #0]
 8002d20:	019a      	lsls	r2, r3, #6
 8002d22:	d5f6      	bpl.n	8002d12 <HAL_RCC_OscConfig+0x63e>
 8002d24:	e5f7      	b.n	8002916 <HAL_RCC_OscConfig+0x242>
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	f99f808c 	.word	0xf99f808c

08002d30 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002d30:	2800      	cmp	r0, #0
 8002d32:	f000 80a0 	beq.w	8002e76 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d36:	4a54      	ldr	r2, [pc, #336]	@ (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	428b      	cmp	r3, r1
{
 8002d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d44:	460d      	mov	r5, r1
 8002d46:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	d20c      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	6813      	ldr	r3, [r2, #0]
 8002d4c:	f023 0307 	bic.w	r3, r3, #7
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d54:	6813      	ldr	r3, [r2, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	428b      	cmp	r3, r1
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002d5e:	2001      	movs	r0, #1
}
 8002d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d68:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6c:	d570      	bpl.n	8002e50 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d6e:	4e47      	ldr	r6, [pc, #284]	@ (8002e8c <HAL_RCC_ClockConfig+0x15c>)
 8002d70:	68a0      	ldr	r0, [r4, #8]
 8002d72:	68b1      	ldr	r1, [r6, #8]
 8002d74:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 8002d78:	4288      	cmp	r0, r1
 8002d7a:	d904      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	68b1      	ldr	r1, [r6, #8]
 8002d7e:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 8002d82:	4301      	orrs	r1, r0
 8002d84:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	b332      	cbz	r2, 8002dd6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d88:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8a:	4b40      	ldr	r3, [pc, #256]	@ (8002e8c <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8c:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d90:	d065      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	2a02      	cmp	r2, #2
 8002d94:	d06c      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	d171      	bne.n	8002e7e <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d9a:	079e      	lsls	r6, r3, #30
 8002d9c:	d5df      	bpl.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4e3b      	ldr	r6, [pc, #236]	@ (8002e8c <HAL_RCC_ClockConfig+0x15c>)
 8002da0:	68b3      	ldr	r3, [r6, #8]
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002daa:	f7ff f8dd 	bl	8001f68 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dae:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002db2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db4:	e004      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db6:	f7ff f8d7 	bl	8001f68 <HAL_GetTick>
 8002dba:	1bc0      	subs	r0, r0, r7
 8002dbc:	4540      	cmp	r0, r8
 8002dbe:	d85c      	bhi.n	8002e7a <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc0:	68b3      	ldr	r3, [r6, #8]
 8002dc2:	6862      	ldr	r2, [r4, #4]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002dcc:	d1f3      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	0799      	lsls	r1, r3, #30
 8002dd2:	d506      	bpl.n	8002de2 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dd4:	68a0      	ldr	r0, [r4, #8]
 8002dd6:	492d      	ldr	r1, [pc, #180]	@ (8002e8c <HAL_RCC_ClockConfig+0x15c>)
 8002dd8:	688a      	ldr	r2, [r1, #8]
 8002dda:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002dde:	4282      	cmp	r2, r0
 8002de0:	d840      	bhi.n	8002e64 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de2:	4929      	ldr	r1, [pc, #164]	@ (8002e88 <HAL_RCC_ClockConfig+0x158>)
 8002de4:	680a      	ldr	r2, [r1, #0]
 8002de6:	f002 0207 	and.w	r2, r2, #7
 8002dea:	42aa      	cmp	r2, r5
 8002dec:	d909      	bls.n	8002e02 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	680a      	ldr	r2, [r1, #0]
 8002df0:	f022 0207 	bic.w	r2, r2, #7
 8002df4:	432a      	orrs	r2, r5
 8002df6:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df8:	680a      	ldr	r2, [r1, #0]
 8002dfa:	f002 0207 	and.w	r2, r2, #7
 8002dfe:	42aa      	cmp	r2, r5
 8002e00:	d1ad      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e02:	075a      	lsls	r2, r3, #29
 8002e04:	d506      	bpl.n	8002e14 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e06:	4921      	ldr	r1, [pc, #132]	@ (8002e8c <HAL_RCC_ClockConfig+0x15c>)
 8002e08:	68e0      	ldr	r0, [r4, #12]
 8002e0a:	688a      	ldr	r2, [r1, #8]
 8002e0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e10:	4302      	orrs	r2, r0
 8002e12:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e14:	071b      	lsls	r3, r3, #28
 8002e16:	d507      	bpl.n	8002e28 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e18:	4a1c      	ldr	r2, [pc, #112]	@ (8002e8c <HAL_RCC_ClockConfig+0x15c>)
 8002e1a:	6921      	ldr	r1, [r4, #16]
 8002e1c:	6893      	ldr	r3, [r2, #8]
 8002e1e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002e22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e26:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e28:	f7ff fbfa 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8002e2c:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <HAL_RCC_ClockConfig+0x15c>)
 8002e2e:	4c18      	ldr	r4, [pc, #96]	@ (8002e90 <HAL_RCC_ClockConfig+0x160>)
 8002e30:	6892      	ldr	r2, [r2, #8]
 8002e32:	4918      	ldr	r1, [pc, #96]	@ (8002e94 <HAL_RCC_ClockConfig+0x164>)
 8002e34:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002e38:	4603      	mov	r3, r0
 8002e3a:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8002e3c:	4816      	ldr	r0, [pc, #88]	@ (8002e98 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e3e:	f002 021f 	and.w	r2, r2, #31
 8002e42:	40d3      	lsrs	r3, r2
}
 8002e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8002e48:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e4a:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8002e4c:	f7ff b84a 	b.w	8001ee4 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e50:	2a00      	cmp	r2, #0
 8002e52:	d0c6      	beq.n	8002de2 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e54:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e58:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e5c:	d199      	bne.n	8002d92 <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5e:	019b      	lsls	r3, r3, #6
 8002e60:	d49d      	bmi.n	8002d9e <HAL_RCC_ClockConfig+0x6e>
 8002e62:	e77c      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e64:	688a      	ldr	r2, [r1, #8]
 8002e66:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002e6a:	4302      	orrs	r2, r0
 8002e6c:	608a      	str	r2, [r1, #8]
 8002e6e:	e7b8      	b.n	8002de2 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e70:	039f      	lsls	r7, r3, #14
 8002e72:	d494      	bmi.n	8002d9e <HAL_RCC_ClockConfig+0x6e>
 8002e74:	e773      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002e76:	2001      	movs	r0, #1
}
 8002e78:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002e7a:	2003      	movs	r0, #3
 8002e7c:	e770      	b.n	8002d60 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e7e:	0558      	lsls	r0, r3, #21
 8002e80:	f57f af6d 	bpl.w	8002d5e <HAL_RCC_ClockConfig+0x2e>
 8002e84:	e78b      	b.n	8002d9e <HAL_RCC_ClockConfig+0x6e>
 8002e86:	bf00      	nop
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	080054d4 	.word	0x080054d4
 8002e94:	20000018 	.word	0x20000018
 8002e98:	20000020 	.word	0x20000020

08002e9c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e9e:	4a06      	ldr	r2, [pc, #24]	@ (8002eb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002ea2:	4906      	ldr	r1, [pc, #24]	@ (8002ebc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ea4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002ea8:	6808      	ldr	r0, [r1, #0]
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
}
 8002eb0:	40d8      	lsrs	r0, r3
 8002eb2:	4770      	bx	lr
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	080054cc 	.word	0x080054cc
 8002ebc:	20000018 	.word	0x20000018

08002ec0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ec2:	4a06      	ldr	r2, [pc, #24]	@ (8002edc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002ec6:	4906      	ldr	r1, [pc, #24]	@ (8002ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ec8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002ecc:	6808      	ldr	r0, [r1, #0]
 8002ece:	5cd3      	ldrb	r3, [r2, r3]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
}
 8002ed4:	40d8      	lsrs	r0, r3
 8002ed6:	4770      	bx	lr
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	080054cc 	.word	0x080054cc
 8002ee0:	20000018 	.word	0x20000018

08002ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ee8:	6803      	ldr	r3, [r0, #0]
{
 8002eea:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eec:	f413 3000 	ands.w	r0, r3, #131072	@ 0x20000
{
 8002ef0:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ef2:	d052      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xb6>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ef4:	4b7b      	ldr	r3, [pc, #492]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ef6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ef8:	00d5      	lsls	r5, r2, #3
 8002efa:	f140 80d0 	bpl.w	800309e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f00:	4d79      	ldr	r5, [pc, #484]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002f02:	682b      	ldr	r3, [r5, #0]
 8002f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f08:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f0a:	f7ff f82d 	bl	8001f68 <HAL_GetTick>
 8002f0e:	4606      	mov	r6, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f10:	e005      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7ff f829 	bl	8001f68 <HAL_GetTick>
 8002f16:	1b83      	subs	r3, r0, r6
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	f200 80cb 	bhi.w	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f1e:	682b      	ldr	r3, [r5, #0]
 8002f20:	05d8      	lsls	r0, r3, #23
 8002f22:	d5f6      	bpl.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f24:	4d6f      	ldr	r5, [pc, #444]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f26:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f28:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f2c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002f30:	d026      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d024      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f36:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f3a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f42:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f46:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f4e:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f52:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f56:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8002f58:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f5c:	d510      	bpl.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7ff f803 	bl	8001f68 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8002f66:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f68:	e005      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe fffd 	bl	8001f68 <HAL_GetTick>
 8002f6e:	1b80      	subs	r0, r0, r6
 8002f70:	4540      	cmp	r0, r8
 8002f72:	f200 809f 	bhi.w	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f76:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002f7a:	079b      	lsls	r3, r3, #30
 8002f7c:	d5f5      	bpl.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x86>
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f7e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002f80:	4958      	ldr	r1, [pc, #352]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002f82:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8002f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f90:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f92:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 8002f94:	2f00      	cmp	r7, #0
 8002f96:	f040 8092 	bne.w	80030be <HAL_RCCEx_PeriphCLKConfig+0x1da>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f9a:	07df      	lsls	r7, r3, #31
 8002f9c:	d508      	bpl.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f9e:	4951      	ldr	r1, [pc, #324]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fa0:	6865      	ldr	r5, [r4, #4]
 8002fa2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002fa6:	f022 0203 	bic.w	r2, r2, #3
 8002faa:	432a      	orrs	r2, r5
 8002fac:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fb0:	079e      	lsls	r6, r3, #30
 8002fb2:	d508      	bpl.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fb4:	494b      	ldr	r1, [pc, #300]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fb6:	68a5      	ldr	r5, [r4, #8]
 8002fb8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002fbc:	f022 020c 	bic.w	r2, r2, #12
 8002fc0:	432a      	orrs	r2, r5
 8002fc2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fc6:	075d      	lsls	r5, r3, #29
 8002fc8:	d508      	bpl.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fca:	4946      	ldr	r1, [pc, #280]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fcc:	68e5      	ldr	r5, [r4, #12]
 8002fce:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002fd2:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8002fd6:	432a      	orrs	r2, r5
 8002fd8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fdc:	0699      	lsls	r1, r3, #26
 8002fde:	d508      	bpl.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fe0:	4940      	ldr	r1, [pc, #256]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002fe2:	6925      	ldr	r5, [r4, #16]
 8002fe4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002fe8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002fec:	432a      	orrs	r2, r5
 8002fee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ff2:	059a      	lsls	r2, r3, #22
 8002ff4:	d508      	bpl.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ff6:	493b      	ldr	r1, [pc, #236]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ff8:	6a25      	ldr	r5, [r4, #32]
 8002ffa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002ffe:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003002:	432a      	orrs	r2, r5
 8003004:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003008:	055f      	lsls	r7, r3, #21
 800300a:	d508      	bpl.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800300c:	4935      	ldr	r1, [pc, #212]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800300e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8003010:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003014:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003018:	432a      	orrs	r2, r5
 800301a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301e:	065e      	lsls	r6, r3, #25
 8003020:	d508      	bpl.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003022:	4930      	ldr	r1, [pc, #192]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003024:	6965      	ldr	r5, [r4, #20]
 8003026:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800302a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800302e:	432a      	orrs	r2, r5
 8003030:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003034:	061d      	lsls	r5, r3, #24
 8003036:	d508      	bpl.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003038:	492a      	ldr	r1, [pc, #168]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800303a:	69a5      	ldr	r5, [r4, #24]
 800303c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003040:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003044:	432a      	orrs	r2, r5
 8003046:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800304a:	05d9      	lsls	r1, r3, #23
 800304c:	d508      	bpl.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800304e:	4925      	ldr	r1, [pc, #148]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003050:	69e5      	ldr	r5, [r4, #28]
 8003052:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003056:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800305a:	432a      	orrs	r2, r5
 800305c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003060:	049a      	lsls	r2, r3, #18
 8003062:	d50b      	bpl.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003064:	491f      	ldr	r1, [pc, #124]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003066:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8003068:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800306c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003070:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003072:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003076:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800307a:	d026      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800307c:	035b      	lsls	r3, r3, #13
 800307e:	d50b      	bpl.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003080:	4a18      	ldr	r2, [pc, #96]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003082:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003084:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003088:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800308c:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800308e:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003092:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003096:	d01d      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8003098:	b002      	add	sp, #8
 800309a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030a0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80030a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80030b0:	2701      	movs	r7, #1
 80030b2:	e725      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b4:	6823      	ldr	r3, [r4, #0]
        status = ret;
 80030b6:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 80030b8:	2f00      	cmp	r7, #0
 80030ba:	f43f af6e 	beq.w	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030be:	4909      	ldr	r1, [pc, #36]	@ (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80030c0:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80030c2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80030c6:	658a      	str	r2, [r1, #88]	@ 0x58
 80030c8:	e767      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ca:	68ca      	ldr	r2, [r1, #12]
 80030cc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80030d0:	60ca      	str	r2, [r1, #12]
 80030d2:	e7d3      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d4:	68d3      	ldr	r3, [r2, #12]
 80030d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030da:	60d3      	str	r3, [r2, #12]
}
 80030dc:	b002      	add	sp, #8
 80030de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40007000 	.word	0x40007000

080030ec <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80030ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030f0:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030f2:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80030f4:	460e      	mov	r6, r1
 80030f6:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 80030f8:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80030fc:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030fe:	f7fe ff33 	bl	8001f68 <HAL_GetTick>
 8003102:	4437      	add	r7, r6
 8003104:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8003106:	f7fe ff2f 	bl	8001f68 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800310a:	4b32      	ldr	r3, [pc, #200]	@ (80031d4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800310c:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003114:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003118:	0d1b      	lsrs	r3, r3, #20
 800311a:	fb07 f303 	mul.w	r3, r7, r3
 800311e:	3601      	adds	r6, #1
 8003120:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003122:	d111      	bne.n	8003148 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 8003124:	68a3      	ldr	r3, [r4, #8]
 8003126:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800312a:	d009      	beq.n	8003140 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800312c:	7b23      	ldrb	r3, [r4, #12]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003134:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8003138:	68a3      	ldr	r3, [r4, #8]
 800313a:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800313e:	d1f5      	bne.n	800312c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 8003140:	2000      	movs	r0, #0
}
 8003142:	b002      	add	sp, #8
 8003144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003148:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800314a:	4623      	mov	r3, r4
 800314c:	e013      	b.n	8003176 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      tmpreg8 = *ptmpreg8;
 800314e:	7b23      	ldrb	r3, [r4, #12]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8003156:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800315a:	f7fe ff05 	bl	8001f68 <HAL_GetTick>
 800315e:	eba0 0008 	sub.w	r0, r0, r8
 8003162:	42b8      	cmp	r0, r7
 8003164:	d20c      	bcs.n	8003180 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 8003166:	9a01      	ldr	r2, [sp, #4]
      count--;
 8003168:	9b01      	ldr	r3, [sp, #4]
 800316a:	3b01      	subs	r3, #1
        tmp_timeout = 0U;
 800316c:	2a00      	cmp	r2, #0
      count--;
 800316e:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003170:	682b      	ldr	r3, [r5, #0]
        tmp_timeout = 0U;
 8003172:	bf08      	it	eq
 8003174:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800317c:	d1e7      	bne.n	800314e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
 800317e:	e7df      	b.n	8003140 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003180:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003184:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003186:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800318a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800318e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003190:	d013      	beq.n	80031ba <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003192:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8003194:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003198:	d107      	bne.n	80031aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031a8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80031aa:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80031ac:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80031ae:	f885 205d 	strb.w	r2, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80031b2:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80031b6:	2003      	movs	r0, #3
 80031b8:	e7c3      	b.n	8003142 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ba:	68aa      	ldr	r2, [r5, #8]
 80031bc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80031c0:	d002      	beq.n	80031c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80031c6:	d1e4      	bne.n	8003192 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e7df      	b.n	8003192 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 80031d2:	bf00      	nop
 80031d4:	20000018 	.word	0x20000018

080031d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031dc:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 80031de:	2300      	movs	r3, #0
{
 80031e0:	460e      	mov	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 80031e2:	f88d 3007 	strb.w	r3, [sp, #7]
 80031e6:	eb01 0902 	add.w	r9, r1, r2
{
 80031ea:	4617      	mov	r7, r2
 80031ec:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031ee:	f7fe febb 	bl	8001f68 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031f2:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8003318 <SPI_EndRxTxTransaction+0x140>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031f6:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 80031fa:	f7fe feb5 	bl	8001f68 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031fe:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 8003202:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003204:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003208:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800320c:	0d1b      	lsrs	r3, r3, #20
 800320e:	fb0a f303 	mul.w	r3, sl, r3
 8003212:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8003214:	1c73      	adds	r3, r6, #1
 8003216:	bf18      	it	ne
 8003218:	4683      	movne	fp, r0
 800321a:	d130      	bne.n	800327e <SPI_EndRxTxTransaction+0xa6>
 800321c:	68a3      	ldr	r3, [r4, #8]
 800321e:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8003222:	d1fb      	bne.n	800321c <SPI_EndRxTxTransaction+0x44>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003224:	f7fe fea0 	bl	8001f68 <HAL_GetTick>
 8003228:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 800322c:	f7fe fe9c 	bl	8001f68 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003230:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003234:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003236:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800323a:	fb09 f303 	mul.w	r3, r9, r3
 800323e:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 8003240:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003242:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003244:	d130      	bne.n	80032a8 <SPI_EndRxTxTransaction+0xd0>
 8003246:	68a3      	ldr	r3, [r4, #8]
 8003248:	061a      	lsls	r2, r3, #24
 800324a:	d4fc      	bmi.n	8003246 <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800324c:	463a      	mov	r2, r7
 800324e:	4631      	mov	r1, r6
 8003250:	4628      	mov	r0, r5
 8003252:	f7ff ff4b 	bl	80030ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003256:	bb58      	cbnz	r0, 80032b0 <SPI_EndRxTxTransaction+0xd8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8003258:	b005      	add	sp, #20
 800325a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800325e:	f7fe fe83 	bl	8001f68 <HAL_GetTick>
 8003262:	eba0 000b 	sub.w	r0, r0, fp
 8003266:	4582      	cmp	sl, r0
 8003268:	d92a      	bls.n	80032c0 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 800326a:	9a02      	ldr	r2, [sp, #8]
      count--;
 800326c:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800326e:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8003270:	2a00      	cmp	r2, #0
      count--;
 8003272:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8003276:	bf08      	it	eq
 8003278:	f04f 0a00 	moveq.w	sl, #0
      count--;
 800327c:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800327e:	68a3      	ldr	r3, [r4, #8]
 8003280:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8003284:	d1eb      	bne.n	800325e <SPI_EndRxTxTransaction+0x86>
 8003286:	e7cd      	b.n	8003224 <SPI_EndRxTxTransaction+0x4c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003288:	f7fe fe6e 	bl	8001f68 <HAL_GetTick>
 800328c:	eba0 0008 	sub.w	r0, r0, r8
 8003290:	4581      	cmp	r9, r0
 8003292:	d915      	bls.n	80032c0 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8003294:	9a03      	ldr	r2, [sp, #12]
      count--;
 8003296:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003298:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 800329a:	2a00      	cmp	r2, #0
      count--;
 800329c:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80032a0:	bf08      	it	eq
 80032a2:	f04f 0900 	moveq.w	r9, #0
      count--;
 80032a6:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032a8:	68a3      	ldr	r3, [r4, #8]
 80032aa:	061b      	lsls	r3, r3, #24
 80032ac:	d4ec      	bmi.n	8003288 <SPI_EndRxTxTransaction+0xb0>
 80032ae:	e7cd      	b.n	800324c <SPI_EndRxTxTransaction+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80032b2:	f043 0320 	orr.w	r3, r3, #32
 80032b6:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032b8:	2003      	movs	r0, #3
}
 80032ba:	b005      	add	sp, #20
 80032bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c0:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032c4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c6:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032ce:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d0:	d016      	beq.n	8003300 <SPI_EndRxTxTransaction+0x128>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032d2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80032d4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80032d8:	d107      	bne.n	80032ea <SPI_EndRxTxTransaction+0x112>
          SPI_RESET_CRC(hspi);
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032e8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 80032f2:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f4:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 80032f8:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fc:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032fe:	e7db      	b.n	80032b8 <SPI_EndRxTxTransaction+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003300:	68aa      	ldr	r2, [r5, #8]
 8003302:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8003306:	d002      	beq.n	800330e <SPI_EndRxTxTransaction+0x136>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003308:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800330c:	d1e1      	bne.n	80032d2 <SPI_EndRxTxTransaction+0xfa>
          __HAL_SPI_DISABLE(hspi);
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e7dc      	b.n	80032d2 <SPI_EndRxTxTransaction+0xfa>
 8003318:	20000018 	.word	0x20000018

0800331c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	460c      	mov	r4, r1
 8003322:	4606      	mov	r6, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003324:	f7fe fe20 	bl	8001f68 <HAL_GetTick>
 8003328:	3464      	adds	r4, #100	@ 0x64
 800332a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 800332c:	f7fe fe1c 	bl	8001f68 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003330:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003332:	6832      	ldr	r2, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800333a:	fb04 f303 	mul.w	r3, r4, r3
 800333e:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003340:	6893      	ldr	r3, [r2, #8]
 8003342:	061a      	lsls	r2, r3, #24
 8003344:	d52f      	bpl.n	80033a6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
 8003346:	4605      	mov	r5, r0
 8003348:	e00a      	b.n	8003360 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x44>
      if (count == 0U)
 800334a:	9a01      	ldr	r2, [sp, #4]
      count--;
 800334c:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800334e:	6831      	ldr	r1, [r6, #0]
      count--;
 8003350:	3b01      	subs	r3, #1
 8003352:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003354:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 8003356:	2a00      	cmp	r2, #0
 8003358:	bf08      	it	eq
 800335a:	2400      	moveq	r4, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	d522      	bpl.n	80033a6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003360:	f7fe fe02 	bl	8001f68 <HAL_GetTick>
 8003364:	1b40      	subs	r0, r0, r5
 8003366:	42a0      	cmp	r0, r4
 8003368:	d3ef      	bcc.n	800334a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800336a:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800336e:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003370:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003374:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003378:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800337a:	d017      	beq.n	80033ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800337c:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 800337e:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003382:	d107      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          SPI_RESET_CRC(hspi);
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003392:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003394:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8003396:	2300      	movs	r3, #0
 8003398:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800339a:	f886 205d 	strb.w	r2, [r6, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800339e:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
}
 80033a2:	b002      	add	sp, #8
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80033a6:	2000      	movs	r0, #0
}
 80033a8:	b002      	add	sp, #8
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ac:	68b2      	ldr	r2, [r6, #8]
 80033ae:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80033b2:	d002      	beq.n	80033ba <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80033b8:	d1e0      	bne.n	800337c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
          __HAL_SPI_DISABLE(hspi);
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e7db      	b.n	800337c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
 80033c4:	20000018 	.word	0x20000018

080033c8 <SPI_EndRxTxTransaction.constprop.0>:
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 80033c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ca:	b083      	sub	sp, #12
  __IO uint8_t  tmpreg8 = 0;
 80033cc:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 80033ce:	460f      	mov	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 80033d0:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 80033d4:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033d6:	f7fe fdc7 	bl	8001f68 <HAL_GetTick>
 80033da:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80033de:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80033e0:	f7fe fdc2 	bl	8001f68 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033e4:	4b30      	ldr	r3, [pc, #192]	@ (80034a8 <SPI_EndRxTxTransaction.constprop.0+0xe0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033ec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80033f0:	0d1b      	lsrs	r3, r3, #20
 80033f2:	fb04 f303 	mul.w	r3, r4, r3
 80033f6:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8003400:	d032      	beq.n	8003468 <SPI_EndRxTxTransaction.constprop.0+0xa0>
 8003402:	4606      	mov	r6, r0
 8003404:	e00b      	b.n	800341e <SPI_EndRxTxTransaction.constprop.0+0x56>
      if (count == 0U)
 8003406:	9a01      	ldr	r2, [sp, #4]
      count--;
 8003408:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800340a:	6829      	ldr	r1, [r5, #0]
      count--;
 800340c:	3b01      	subs	r3, #1
 800340e:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8003410:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 8003412:	2a00      	cmp	r2, #0
 8003414:	bf08      	it	eq
 8003416:	2400      	moveq	r4, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8003418:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800341c:	d024      	beq.n	8003468 <SPI_EndRxTxTransaction.constprop.0+0xa0>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800341e:	f7fe fda3 	bl	8001f68 <HAL_GetTick>
 8003422:	1b80      	subs	r0, r0, r6
 8003424:	42a0      	cmp	r0, r4
 8003426:	d3ee      	bcc.n	8003406 <SPI_EndRxTxTransaction.constprop.0+0x3e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003428:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800342c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003432:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003436:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003438:	d02a      	beq.n	8003490 <SPI_EndRxTxTransaction.constprop.0+0xc8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800343a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800343c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003440:	d107      	bne.n	8003452 <SPI_EndRxTxTransaction.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003450:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003452:	2301      	movs	r3, #1
 8003454:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003458:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 800345a:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800345c:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 8003460:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003464:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003466:	e010      	b.n	800348a <SPI_EndRxTxTransaction.constprop.0+0xc2>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003468:	4639      	mov	r1, r7
 800346a:	4628      	mov	r0, r5
 800346c:	f7ff ff56 	bl	800331c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003470:	b938      	cbnz	r0, 8003482 <SPI_EndRxTxTransaction.constprop.0+0xba>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003472:	463a      	mov	r2, r7
 8003474:	2164      	movs	r1, #100	@ 0x64
 8003476:	4628      	mov	r0, r5
 8003478:	f7ff fe38 	bl	80030ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800347c:	b908      	cbnz	r0, 8003482 <SPI_EndRxTxTransaction.constprop.0+0xba>
}
 800347e:	b003      	add	sp, #12
 8003480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003482:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003484:	f043 0320 	orr.w	r3, r3, #32
 8003488:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 800348a:	2003      	movs	r0, #3
}
 800348c:	b003      	add	sp, #12
 800348e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003490:	68aa      	ldr	r2, [r5, #8]
 8003492:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8003496:	d002      	beq.n	800349e <SPI_EndRxTxTransaction.constprop.0+0xd6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003498:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800349c:	d1cd      	bne.n	800343a <SPI_EndRxTxTransaction.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e7c8      	b.n	800343a <SPI_EndRxTxTransaction.constprop.0+0x72>
 80034a8:	20000018 	.word	0x20000018

080034ac <HAL_SPI_Init>:
  if (hspi == NULL)
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d074      	beq.n	800359a <HAL_SPI_Init+0xee>
{
 80034b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b4:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034b6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d053      	beq.n	8003564 <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034bc:	2300      	movs	r3, #0
 80034be:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c6:	2200      	movs	r2, #0
 80034c8:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ca:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d057      	beq.n	8003582 <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 80034d2:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d4:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80034d6:	2302      	movs	r3, #2
 80034d8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80034dc:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034de:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80034e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034e6:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e8:	d842      	bhi.n	8003570 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034ea:	d151      	bne.n	8003590 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ec:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034ee:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f2:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 80034f6:	6862      	ldr	r2, [r4, #4]
 80034f8:	68a3      	ldr	r3, [r4, #8]
 80034fa:	69a6      	ldr	r6, [r4, #24]
 80034fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003500:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 8003504:	431a      	orrs	r2, r3
 8003506:	6923      	ldr	r3, [r4, #16]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	4313      	orrs	r3, r2
 800350e:	6962      	ldr	r2, [r4, #20]
 8003510:	f002 0201 	and.w	r2, r2, #1
 8003514:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003516:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003518:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003524:	69e3      	ldr	r3, [r4, #28]
 8003526:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 800352a:	6a23      	ldr	r3, [r4, #32]
 800352c:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 8003530:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 8003534:	4313      	orrs	r3, r2
 8003536:	ea43 0308 	orr.w	r3, r3, r8
 800353a:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800353c:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800353e:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003540:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003544:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003546:	f000 0010 	and.w	r0, r0, #16
 800354a:	ea4e 0306 	orr.w	r3, lr, r6
 800354e:	4303      	orrs	r3, r0
 8003550:	ea43 030c 	orr.w	r3, r3, ip
 8003554:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003556:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003558:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800355a:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800355c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8003560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003564:	6863      	ldr	r3, [r4, #4]
 8003566:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800356a:	d0aa      	beq.n	80034c2 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800356c:	61e0      	str	r0, [r4, #28]
 800356e:	e7a8      	b.n	80034c2 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003570:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8003574:	d113      	bne.n	800359e <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003576:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003578:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800357c:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8003580:	e7b9      	b.n	80034f6 <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 8003582:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003584:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8003588:	f7fe fa6a 	bl	8001a60 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800358c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800358e:	e7a0      	b.n	80034d2 <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003590:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003594:	2500      	movs	r5, #0
 8003596:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003598:	e7ad      	b.n	80034f6 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 800359a:	2001      	movs	r0, #1
}
 800359c:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800359e:	f04f 0c00 	mov.w	ip, #0
 80035a2:	e7f7      	b.n	8003594 <HAL_SPI_Init+0xe8>

080035a4 <HAL_SPI_Transmit>:
{
 80035a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a8:	4604      	mov	r4, r0
 80035aa:	b082      	sub	sp, #8
 80035ac:	461d      	mov	r5, r3
 80035ae:	460f      	mov	r7, r1
 80035b0:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80035b2:	f7fe fcd9 	bl	8001f68 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80035b6:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d15e      	bne.n	800367c <HAL_SPI_Transmit+0xd8>
  if ((pData == NULL) || (Size == 0U))
 80035be:	4606      	mov	r6, r0
 80035c0:	b2d8      	uxtb	r0, r3
 80035c2:	2f00      	cmp	r7, #0
 80035c4:	d05b      	beq.n	800367e <HAL_SPI_Transmit+0xda>
 80035c6:	f1b8 0f00 	cmp.w	r8, #0
 80035ca:	d058      	beq.n	800367e <HAL_SPI_Transmit+0xda>
  __HAL_LOCK(hspi);
 80035cc:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d053      	beq.n	800367c <HAL_SPI_Transmit+0xd8>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d4:	68a1      	ldr	r1, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80035d6:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hspi);
 80035d8:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035dc:	2200      	movs	r2, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035de:	2003      	movs	r0, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e0:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035e4:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 80035e8:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ec:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80035ee:	63a7      	str	r7, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80035f0:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80035f4:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035f8:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80035fa:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80035fe:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    __HAL_SPI_DISABLE(hspi);
 8003602:	4618      	mov	r0, r3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003604:	d107      	bne.n	8003616 <HAL_SPI_Transmit+0x72>
    __HAL_SPI_DISABLE(hspi);
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800360c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003614:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	0652      	lsls	r2, r2, #25
 800361a:	d403      	bmi.n	8003624 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003622:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003624:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003626:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003628:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800362c:	d82a      	bhi.n	8003684 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800362e:	2900      	cmp	r1, #0
 8003630:	f000 80bf 	beq.w	80037b2 <HAL_SPI_Transmit+0x20e>
 8003634:	f1b8 0f01 	cmp.w	r8, #1
 8003638:	f000 80bb 	beq.w	80037b2 <HAL_SPI_Transmit+0x20e>
    while (hspi->TxXferCount > 0U)
 800363c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03f      	beq.n	80036c4 <HAL_SPI_Transmit+0x120>
 8003644:	1c68      	adds	r0, r5, #1
 8003646:	d012      	beq.n	800366e <HAL_SPI_Transmit+0xca>
 8003648:	e084      	b.n	8003754 <HAL_SPI_Transmit+0x1b0>
        if (hspi->TxXferCount > 1U)
 800364a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800364c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003652:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 8003654:	f240 809a 	bls.w	800378c <HAL_SPI_Transmit+0x1e8>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003658:	f831 3b02 	ldrh.w	r3, [r1], #2
 800365c:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800365e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003660:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003662:	3b02      	subs	r3, #2
 8003664:	b29b      	uxth	r3, r3
 8003666:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8003668:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 800366a:	b289      	uxth	r1, r1
 800366c:	b351      	cbz	r1, 80036c4 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	6893      	ldr	r3, [r2, #8]
 8003672:	0799      	lsls	r1, r3, #30
 8003674:	d4e9      	bmi.n	800364a <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003676:	f7fe fc77 	bl	8001f68 <HAL_GetTick>
 800367a:	e7f5      	b.n	8003668 <HAL_SPI_Transmit+0xc4>
    return HAL_BUSY;
 800367c:	2002      	movs	r0, #2
}
 800367e:	b002      	add	sp, #8
 8003680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003684:	2900      	cmp	r1, #0
 8003686:	f000 808b 	beq.w	80037a0 <HAL_SPI_Transmit+0x1fc>
 800368a:	f1b8 0f01 	cmp.w	r8, #1
 800368e:	f000 8087 	beq.w	80037a0 <HAL_SPI_Transmit+0x1fc>
    while (hspi->TxXferCount > 0U)
 8003692:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003694:	b292      	uxth	r2, r2
 8003696:	b1aa      	cbz	r2, 80036c4 <HAL_SPI_Transmit+0x120>
 8003698:	1c6a      	adds	r2, r5, #1
 800369a:	d13f      	bne.n	800371c <HAL_SPI_Transmit+0x178>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	0797      	lsls	r7, r2, #30
 80036a0:	d56c      	bpl.n	800377c <HAL_SPI_Transmit+0x1d8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80036a4:	f832 1b02 	ldrh.w	r1, [r2], #2
 80036a8:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 80036aa:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ae:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80036b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80036b4:	fa1f fc8c 	uxth.w	ip, ip
 80036b8:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80036bc:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80036be:	b292      	uxth	r2, r2
 80036c0:	2a00      	cmp	r2, #0
 80036c2:	d1eb      	bne.n	800369c <HAL_SPI_Transmit+0xf8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036c4:	4632      	mov	r2, r6
 80036c6:	4629      	mov	r1, r5
 80036c8:	4620      	mov	r0, r4
 80036ca:	f7ff fd85 	bl	80031d8 <SPI_EndRxTxTransaction>
 80036ce:	b108      	cbz	r0, 80036d4 <HAL_SPI_Transmit+0x130>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036d0:	2320      	movs	r3, #32
 80036d2:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036d4:	68a3      	ldr	r3, [r4, #8]
 80036d6:	b933      	cbnz	r3, 80036e6 <HAL_SPI_Transmit+0x142>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036d8:	6822      	ldr	r2, [r4, #0]
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	68d3      	ldr	r3, [r2, #12]
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	6893      	ldr	r3, [r2, #8]
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ec:	6e20      	ldr	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 80036ee:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f0:	1ac0      	subs	r0, r0, r3
 80036f2:	bf18      	it	ne
 80036f4:	2001      	movne	r0, #1
  __HAL_UNLOCK(hspi);
 80036f6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80036fa:	b002      	add	sp, #8
 80036fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003700:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003702:	f832 3b02 	ldrh.w	r3, [r2], #2
 8003706:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8003708:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800370a:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800370c:	3b01      	subs	r3, #1
 800370e:	b29b      	uxth	r3, r3
 8003710:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8003712:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0d4      	beq.n	80036c4 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800371a:	6820      	ldr	r0, [r4, #0]
 800371c:	6883      	ldr	r3, [r0, #8]
 800371e:	0799      	lsls	r1, r3, #30
 8003720:	d4ee      	bmi.n	8003700 <HAL_SPI_Transmit+0x15c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003722:	f7fe fc21 	bl	8001f68 <HAL_GetTick>
 8003726:	1b83      	subs	r3, r0, r6
 8003728:	42ab      	cmp	r3, r5
 800372a:	d3f2      	bcc.n	8003712 <HAL_SPI_Transmit+0x16e>
          hspi->State = HAL_SPI_STATE_READY;
 800372c:	2301      	movs	r3, #1
 800372e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003732:	2300      	movs	r3, #0
 8003734:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003738:	2003      	movs	r0, #3
 800373a:	e7a0      	b.n	800367e <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800373c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003740:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8003742:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003744:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003746:	3b02      	subs	r3, #2
 8003748:	b29b      	uxth	r3, r3
 800374a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800374c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0b7      	beq.n	80036c4 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	0792      	lsls	r2, r2, #30
 800375a:	d541      	bpl.n	80037e0 <HAL_SPI_Transmit+0x23c>
        if (hspi->TxXferCount > 1U)
 800375c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800375e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8003760:	b292      	uxth	r2, r2
 8003762:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003764:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 8003766:	d8e9      	bhi.n	800373c <HAL_SPI_Transmit+0x198>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003768:	7802      	ldrb	r2, [r0, #0]
 800376a:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800376c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800376e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8003770:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8003772:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8003774:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8003776:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8003778:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800377a:	e7e7      	b.n	800374c <HAL_SPI_Transmit+0x1a8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800377c:	f7fe fbf4 	bl	8001f68 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8003780:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d09d      	beq.n	80036c4 <HAL_SPI_Transmit+0x120>
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	e787      	b.n	800369c <HAL_SPI_Transmit+0xf8>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800378c:	7803      	ldrb	r3, [r0, #0]
 800378e:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8003790:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8003792:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8003794:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8003796:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8003798:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800379a:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800379c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800379e:	e763      	b.n	8003668 <HAL_SPI_Transmit+0xc4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037a0:	f837 2b02 	ldrh.w	r2, [r7], #2
 80037a4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80037a6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a8:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80037aa:	3a01      	subs	r2, #1
 80037ac:	b292      	uxth	r2, r2
 80037ae:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 80037b0:	e76f      	b.n	8003692 <HAL_SPI_Transmit+0xee>
      if (hspi->TxXferCount > 1U)
 80037b2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80037b4:	b292      	uxth	r2, r2
 80037b6:	2a01      	cmp	r2, #1
 80037b8:	d908      	bls.n	80037cc <HAL_SPI_Transmit+0x228>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037ba:	f837 2b02 	ldrh.w	r2, [r7], #2
 80037be:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80037c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c2:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80037c4:	3b02      	subs	r3, #2
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80037ca:	e737      	b.n	800363c <HAL_SPI_Transmit+0x98>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037cc:	783a      	ldrb	r2, [r7, #0]
 80037ce:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80037d0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr ++;
 80037d2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80037d4:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 80037d6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80037d8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 80037da:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80037dc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80037de:	e72d      	b.n	800363c <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e0:	f7fe fbc2 	bl	8001f68 <HAL_GetTick>
 80037e4:	1b83      	subs	r3, r0, r6
 80037e6:	42ab      	cmp	r3, r5
 80037e8:	d3b0      	bcc.n	800374c <HAL_SPI_Transmit+0x1a8>
 80037ea:	e79f      	b.n	800372c <HAL_SPI_Transmit+0x188>

080037ec <HAL_SPI_Transmit_DMA>:
  if (hspi->State != HAL_SPI_STATE_READY)
 80037ec:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d164      	bne.n	80038be <HAL_SPI_Transmit_DMA+0xd2>
  if ((pData == NULL) || (Size == 0U))
 80037f4:	2900      	cmp	r1, #0
 80037f6:	d064      	beq.n	80038c2 <HAL_SPI_Transmit_DMA+0xd6>
 80037f8:	2a00      	cmp	r2, #0
 80037fa:	d062      	beq.n	80038c2 <HAL_SPI_Transmit_DMA+0xd6>
{
 80037fc:	b510      	push	{r4, lr}
 80037fe:	4604      	mov	r4, r0
 8003800:	b2d8      	uxtb	r0, r3
  __HAL_LOCK(hspi);
 8003802:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d06f      	beq.n	80038ea <HAL_SPI_Transmit_DMA+0xfe>
 800380a:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800380e:	68a0      	ldr	r0, [r4, #8]
  hspi->TxXferSize  = Size;
 8003810:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003812:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003814:	f04f 0c03 	mov.w	ip, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003818:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800381c:	f884 c05d 	strb.w	ip, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 8003820:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003824:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003826:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003828:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800382a:	6423      	str	r3, [r4, #64]	@ 0x40
    __HAL_SPI_DISABLE(hspi);
 800382c:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = 0U;
 800382e:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003832:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003836:	d107      	bne.n	8003848 <HAL_SPI_Transmit_DMA+0x5c>
    __HAL_SPI_DISABLE(hspi);
 8003838:	6813      	ldr	r3, [r2, #0]
 800383a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800383e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003840:	6813      	ldr	r3, [r2, #0]
 8003842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003846:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003848:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800384a:	4b29      	ldr	r3, [pc, #164]	@ (80038f0 <HAL_SPI_Transmit_DMA+0x104>)
 800384c:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800384e:	4b29      	ldr	r3, [pc, #164]	@ (80038f4 <HAL_SPI_Transmit_DMA+0x108>)
 8003850:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003852:	4b29      	ldr	r3, [pc, #164]	@ (80038f8 <HAL_SPI_Transmit_DMA+0x10c>)
 8003854:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	6383      	str	r3, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800385a:	6853      	ldr	r3, [r2, #4]
 800385c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003860:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003862:	68e3      	ldr	r3, [r4, #12]
 8003864:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003868:	d80f      	bhi.n	800388a <HAL_SPI_Transmit_DMA+0x9e>
 800386a:	6983      	ldr	r3, [r0, #24]
 800386c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003870:	d10b      	bne.n	800388a <HAL_SPI_Transmit_DMA+0x9e>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003872:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003874:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003878:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800387a:	d12d      	bne.n	80038d8 <HAL_SPI_Transmit_DMA+0xec>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800387c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003880:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003882:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003884:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8003888:	87e3      	strh	r3, [r4, #62]	@ 0x3e
                                 hspi->TxXferCount))
 800388a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800388c:	320c      	adds	r2, #12
 800388e:	b29b      	uxth	r3, r3
 8003890:	f7fe fc64 	bl	800215c <HAL_DMA_Start_IT>
 8003894:	b9b8      	cbnz	r0, 80038c6 <HAL_SPI_Transmit_DMA+0xda>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	0652      	lsls	r2, r2, #25
 800389c:	d403      	bmi.n	80038a6 <HAL_SPI_Transmit_DMA+0xba>
    __HAL_SPI_ENABLE(hspi);
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038a4:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80038a6:	2200      	movs	r2, #0
 80038a8:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	f042 0220 	orr.w	r2, r2, #32
 80038b2:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	f042 0202 	orr.w	r2, r2, #2
 80038ba:	605a      	str	r2, [r3, #4]
}
 80038bc:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80038be:	2002      	movs	r0, #2
 80038c0:	4770      	bx	lr
    return HAL_ERROR;
 80038c2:	2001      	movs	r0, #1
}
 80038c4:	4770      	bx	lr
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80038c6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80038c8:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80038ca:	f043 0310 	orr.w	r3, r3, #16
    __HAL_UNLOCK(hspi);
 80038ce:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80038d2:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_ERROR;
 80038d4:	2001      	movs	r0, #1
}
 80038d6:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80038d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038dc:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80038de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80038e0:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80038e4:	3301      	adds	r3, #1
 80038e6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80038e8:	e7cf      	b.n	800388a <HAL_SPI_Transmit_DMA+0x9e>
    return HAL_BUSY;
 80038ea:	2002      	movs	r0, #2
}
 80038ec:	bd10      	pop	{r4, pc}
 80038ee:	bf00      	nop
 80038f0:	08003901 	.word	0x08003901
 80038f4:	08003935 	.word	0x08003935
 80038f8:	08003911 	.word	0x08003911

080038fc <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop

08003900 <SPI_DMAHalfTransmitCplt>:
{
 8003900:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003902:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003904:	f7ff fffa 	bl	80038fc <HAL_SPI_TxHalfCpltCallback>
}
 8003908:	bd08      	pop	{r3, pc}
 800390a:	bf00      	nop

0800390c <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop

08003910 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003910:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003912:	6802      	ldr	r2, [r0, #0]
{
 8003914:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003916:	6853      	ldr	r3, [r2, #4]
 8003918:	f023 0303 	bic.w	r3, r3, #3
 800391c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800391e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003920:	2101      	movs	r1, #1
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003922:	f043 0310 	orr.w	r3, r3, #16
 8003926:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003928:	f880 105d 	strb.w	r1, [r0, #93]	@ 0x5d
  HAL_SPI_ErrorCallback(hspi);
 800392c:	f7ff ffee 	bl	800390c <HAL_SPI_ErrorCallback>
}
 8003930:	bd08      	pop	{r3, pc}
 8003932:	bf00      	nop

08003934 <SPI_DMATransmitCplt>:
{
 8003934:	b530      	push	{r4, r5, lr}
 8003936:	4605      	mov	r5, r0
 8003938:	b083      	sub	sp, #12
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800393a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  tickstart = HAL_GetTick();
 800393c:	f7fe fb14 	bl	8001f68 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	069b      	lsls	r3, r3, #26
 8003946:	d421      	bmi.n	800398c <SPI_DMATransmitCplt+0x58>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	f022 0220 	bic.w	r2, r2, #32
 8003950:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	f022 0202 	bic.w	r2, r2, #2
 8003958:	4601      	mov	r1, r0
 800395a:	605a      	str	r2, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800395c:	4620      	mov	r0, r4
 800395e:	f7ff fd33 	bl	80033c8 <SPI_EndRxTxTransaction.constprop.0>
 8003962:	b118      	cbz	r0, 800396c <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003964:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003966:	f043 0320 	orr.w	r3, r3, #32
 800396a:	6623      	str	r3, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800396c:	68a3      	ldr	r3, [r4, #8]
 800396e:	b933      	cbnz	r3, 800397e <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003970:	6822      	ldr	r2, [r4, #0]
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	68d3      	ldr	r3, [r2, #12]
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	6893      	ldr	r3, [r2, #8]
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY;
 800397e:	2301      	movs	r3, #1
    hspi->TxXferCount = 0U;
 8003980:	2200      	movs	r2, #0
 8003982:	87e2      	strh	r2, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003984:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003988:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800398a:	b923      	cbnz	r3, 8003996 <SPI_DMATransmitCplt+0x62>
  HAL_SPI_TxCpltCallback(hspi);
 800398c:	4620      	mov	r0, r4
 800398e:	f7fe f817 	bl	80019c0 <HAL_SPI_TxCpltCallback>
}
 8003992:	b003      	add	sp, #12
 8003994:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8003996:	4620      	mov	r0, r4
 8003998:	f7ff ffb8 	bl	800390c <HAL_SPI_ErrorCallback>
}
 800399c:	b003      	add	sp, #12
 800399e:	bd30      	pop	{r4, r5, pc}

080039a0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d065      	beq.n	8003a70 <HAL_TIM_Base_Init+0xd0>
{
 80039a4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80039aa:	4604      	mov	r4, r0
 80039ac:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d04f      	beq.n	8003a54 <HAL_TIM_Base_Init+0xb4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b6:	4e35      	ldr	r6, [pc, #212]	@ (8003a8c <HAL_TIM_Base_Init+0xec>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ba:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039bc:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 80039be:	2202      	movs	r2, #2
 80039c0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c4:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 80039c6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c8:	d033      	beq.n	8003a32 <HAL_TIM_Base_Init+0x92>
 80039ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ce:	d046      	beq.n	8003a5e <HAL_TIM_Base_Init+0xbe>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d0:	4e2f      	ldr	r6, [pc, #188]	@ (8003a90 <HAL_TIM_Base_Init+0xf0>)
 80039d2:	42b3      	cmp	r3, r6
 80039d4:	d04e      	beq.n	8003a74 <HAL_TIM_Base_Init+0xd4>
 80039d6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80039da:	42b3      	cmp	r3, r6
 80039dc:	d02d      	beq.n	8003a3a <HAL_TIM_Base_Init+0x9a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039e2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80039e4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80039e8:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039ea:	2201      	movs	r2, #1
 80039ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	07d2      	lsls	r2, r2, #31
 80039f2:	d503      	bpl.n	80039fc <HAL_TIM_Base_Init+0x5c>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a02:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003a06:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003a0a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003a0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003a12:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003a1e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003a22:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8003a26:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003a2a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003a2e:	2000      	movs	r0, #0
}
 8003a30:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8003a32:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a34:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a38:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a3c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a40:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a46:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003a48:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a4a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a4c:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003a4e:	6962      	ldr	r2, [r4, #20]
 8003a50:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a52:	e7ca      	b.n	80039ea <HAL_TIM_Base_Init+0x4a>
    htim->Lock = HAL_UNLOCKED;
 8003a54:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003a58:	f7fe f8f0 	bl	8001c3c <HAL_TIM_Base_MspInit>
 8003a5c:	e7aa      	b.n	80039b4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003a5e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a60:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a64:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a66:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a68:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6c:	4332      	orrs	r2, r6
 8003a6e:	e7b6      	b.n	80039de <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 8003a70:	2001      	movs	r0, #1
}
 8003a72:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a74:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a76:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a7a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a80:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 8003a82:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a84:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a86:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a88:	e7e1      	b.n	8003a4e <HAL_TIM_Base_Init+0xae>
 8003a8a:	bf00      	nop
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40014000 	.word	0x40014000

08003a94 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003a94:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d116      	bne.n	8003aca <HAL_TIM_Base_Start_IT+0x36>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a9c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9e:	4910      	ldr	r1, [pc, #64]	@ (8003ae0 <HAL_TIM_Base_Start_IT+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab0:	d00d      	beq.n	8003ace <HAL_TIM_Base_Start_IT+0x3a>
 8003ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab6:	d00a      	beq.n	8003ace <HAL_TIM_Base_Start_IT+0x3a>
 8003ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae4 <HAL_TIM_Base_Start_IT+0x50>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	4770      	bx	lr
    return HAL_ERROR;
 8003aca:	2001      	movs	r0, #1
}
 8003acc:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ace:	6899      	ldr	r1, [r3, #8]
 8003ad0:	4a05      	ldr	r2, [pc, #20]	@ (8003ae8 <HAL_TIM_Base_Start_IT+0x54>)
 8003ad2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad4:	2a06      	cmp	r2, #6
 8003ad6:	d0f6      	beq.n	8003ac6 <HAL_TIM_Base_Start_IT+0x32>
 8003ad8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003adc:	d1ef      	bne.n	8003abe <HAL_TIM_Base_Start_IT+0x2a>
 8003ade:	e7f2      	b.n	8003ac6 <HAL_TIM_Base_Start_IT+0x32>
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	00010007 	.word	0x00010007

08003aec <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop

08003af0 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop

08003af8 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop

08003afc <HAL_TIM_IRQHandler>:
{
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003afe:	6803      	ldr	r3, [r0, #0]
 8003b00:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b02:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b04:	07a1      	lsls	r1, r4, #30
{
 8003b06:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b08:	d501      	bpl.n	8003b0e <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b0a:	07b2      	lsls	r2, r6, #30
 8003b0c:	d457      	bmi.n	8003bbe <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b0e:	0767      	lsls	r7, r4, #29
 8003b10:	d501      	bpl.n	8003b16 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b12:	0770      	lsls	r0, r6, #29
 8003b14:	d440      	bmi.n	8003b98 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b16:	0721      	lsls	r1, r4, #28
 8003b18:	d501      	bpl.n	8003b1e <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b1a:	0732      	lsls	r2, r6, #28
 8003b1c:	d42a      	bmi.n	8003b74 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b1e:	06e7      	lsls	r7, r4, #27
 8003b20:	d501      	bpl.n	8003b26 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b22:	06f0      	lsls	r0, r6, #27
 8003b24:	d413      	bmi.n	8003b4e <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b26:	07e1      	lsls	r1, r4, #31
 8003b28:	d501      	bpl.n	8003b2e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b2a:	07f2      	lsls	r2, r6, #31
 8003b2c:	d465      	bmi.n	8003bfa <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b2e:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b32:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b36:	d052      	beq.n	8003bde <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b38:	0633      	lsls	r3, r6, #24
 8003b3a:	d466      	bmi.n	8003c0a <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b3c:	0660      	lsls	r0, r4, #25
 8003b3e:	d501      	bpl.n	8003b44 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b40:	0671      	lsls	r1, r6, #25
 8003b42:	d473      	bmi.n	8003c2c <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b44:	06a2      	lsls	r2, r4, #26
 8003b46:	d501      	bpl.n	8003b4c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b48:	06b3      	lsls	r3, r6, #26
 8003b4a:	d44d      	bmi.n	8003be8 <HAL_TIM_IRQHandler+0xec>
}
 8003b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b4e:	682b      	ldr	r3, [r5, #0]
 8003b50:	f06f 0210 	mvn.w	r2, #16
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b56:	2208      	movs	r2, #8
 8003b58:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003b60:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b62:	d174      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b64:	f7ff ffc2 	bl	8003aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f7ff ffc3 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	772b      	strb	r3, [r5, #28]
 8003b72:	e7d8      	b.n	8003b26 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	f06f 0208 	mvn.w	r2, #8
 8003b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003b84:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b86:	d15f      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b88:	f7ff ffb0 	bl	8003aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	f7ff ffb1 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	2300      	movs	r3, #0
 8003b94:	772b      	strb	r3, [r5, #28]
 8003b96:	e7c2      	b.n	8003b1e <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	f06f 0204 	mvn.w	r2, #4
 8003b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bac:	d149      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	f7ff ff9d 	bl	8003aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f7ff ff9e 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	772b      	strb	r3, [r5, #28]
 8003bbc:	e7ab      	b.n	8003b16 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bbe:	f06f 0202 	mvn.w	r2, #2
 8003bc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	079b      	lsls	r3, r3, #30
 8003bcc:	d136      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	f7ff ff8d 	bl	8003aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	f7ff ff8e 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	772b      	strb	r3, [r5, #28]
 8003bdc:	e797      	b.n	8003b0e <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003bde:	2f00      	cmp	r7, #0
 8003be0:	d0ac      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003be2:	0637      	lsls	r7, r6, #24
 8003be4:	d41a      	bmi.n	8003c1c <HAL_TIM_IRQHandler+0x120>
 8003be6:	e7a9      	b.n	8003b3c <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003be8:	682b      	ldr	r3, [r5, #0]
 8003bea:	f06f 0220 	mvn.w	r2, #32
 8003bee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003bf0:	4628      	mov	r0, r5
}
 8003bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003bf6:	f000 b863 	b.w	8003cc0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	f06f 0201 	mvn.w	r2, #1
 8003c00:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c02:	4628      	mov	r0, r5
 8003c04:	f7fd fede 	bl	80019c4 <HAL_TIM_PeriodElapsedCallback>
 8003c08:	e791      	b.n	8003b2e <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c0a:	682b      	ldr	r3, [r5, #0]
 8003c0c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003c10:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c12:	4628      	mov	r0, r5
 8003c14:	f000 f856 	bl	8003cc4 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c18:	2f00      	cmp	r7, #0
 8003c1a:	d08f      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003c24:	4628      	mov	r0, r5
 8003c26:	f000 f84f 	bl	8003cc8 <HAL_TIMEx_Break2Callback>
 8003c2a:	e787      	b.n	8003b3c <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c32:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c34:	4628      	mov	r0, r5
 8003c36:	f7ff ff5f 	bl	8003af8 <HAL_TIM_TriggerCallback>
 8003c3a:	e783      	b.n	8003b44 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 8003c3c:	f7ff ff58 	bl	8003af0 <HAL_TIM_IC_CaptureCallback>
 8003c40:	e7ca      	b.n	8003bd8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	f7ff ff55 	bl	8003af0 <HAL_TIM_IC_CaptureCallback>
 8003c46:	e7b7      	b.n	8003bb8 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c48:	f7ff ff52 	bl	8003af0 <HAL_TIM_IC_CaptureCallback>
 8003c4c:	e7a1      	b.n	8003b92 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	f7ff ff4f 	bl	8003af0 <HAL_TIM_IC_CaptureCallback>
 8003c52:	e78c      	b.n	8003b6e <HAL_TIM_IRQHandler+0x72>

08003c54 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c54:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003c58:	2a01      	cmp	r2, #1
 8003c5a:	d02b      	beq.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8003c5c:	b470      	push	{r4, r5, r6}
 8003c5e:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c60:	4d15      	ldr	r5, [pc, #84]	@ (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 8003c62:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c6a:	42a8      	cmp	r0, r5
  tmpcr2 = htim->Instance->CR2;
 8003c6c:	6842      	ldr	r2, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c6e:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003c70:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c72:	d016      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c74:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c78:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8003c7e:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c80:	d002      	beq.n	8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8003c82:	4a0e      	ldr	r2, [pc, #56]	@ (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8003c84:	4290      	cmp	r0, r2
 8003c86:	d104      	bne.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c88:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8a:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c8e:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c90:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003c92:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003c9a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003c9e:	bc70      	pop	{r4, r5, r6}
 8003ca0:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ca2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ca4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ca8:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8003caa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cae:	4332      	orrs	r2, r6
  htim->Instance->CR2 = tmpcr2;
 8003cb0:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb2:	e7e9      	b.n	8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 8003cb4:	2002      	movs	r0, #2
}
 8003cb6:	4770      	bx	lr
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40014000 	.word	0x40014000

08003cc0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop

08003cc4 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop

08003cc8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop

08003ccc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ccc:	b570      	push	{r4, r5, r6, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cce:	6fc6      	ldr	r6, [r0, #124]	@ 0x7c
 8003cd0:	2e20      	cmp	r6, #32
 8003cd2:	d122      	bne.n	8003d1a <HAL_UART_Transmit_DMA+0x4e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	b1f1      	cbz	r1, 8003d16 <HAL_UART_Transmit_DMA+0x4a>
 8003cd8:	4613      	mov	r3, r2
 8003cda:	b1e2      	cbz	r2, 8003d16 <HAL_UART_Transmit_DMA+0x4a>
      return HAL_ERROR;
    }

    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;
 8003cdc:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	2200      	movs	r2, #0
    huart->pTxBuffPtr  = pData;
 8003ce2:	64c1      	str	r1, [r0, #76]	@ 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    huart->TxXferSize  = Size;
 8003ce8:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 8003cec:	6f00      	ldr	r0, [r0, #112]	@ 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cee:	2521      	movs	r5, #33	@ 0x21
 8003cf0:	67e5      	str	r5, [r4, #124]	@ 0x7c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003cf2:	6825      	ldr	r5, [r4, #0]
    if (huart->hdmatx != NULL)
 8003cf4:	b1a0      	cbz	r0, 8003d20 <HAL_UART_Transmit_DMA+0x54>
      huart->hdmatx->XferAbortCallback = NULL;
 8003cf6:	6382      	str	r2, [r0, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003cf8:	f105 0228 	add.w	r2, r5, #40	@ 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003cfc:	4d10      	ldr	r5, [pc, #64]	@ (8003d40 <HAL_UART_Transmit_DMA+0x74>)
 8003cfe:	62c5      	str	r5, [r0, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d00:	4d10      	ldr	r5, [pc, #64]	@ (8003d44 <HAL_UART_Transmit_DMA+0x78>)
 8003d02:	6305      	str	r5, [r0, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d04:	4d10      	ldr	r5, [pc, #64]	@ (8003d48 <HAL_UART_Transmit_DMA+0x7c>)
 8003d06:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003d08:	f7fe fa28 	bl	800215c <HAL_DMA_Start_IT>
 8003d0c:	b138      	cbz	r0, 8003d1e <HAL_UART_Transmit_DMA+0x52>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d0e:	2310      	movs	r3, #16
 8003d10:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003d14:	67e6      	str	r6, [r4, #124]	@ 0x7c
      return HAL_ERROR;
 8003d16:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8003d1a:	2002      	movs	r0, #2
}
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}
 8003d1e:	6825      	ldr	r5, [r4, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003d20:	2340      	movs	r3, #64	@ 0x40
 8003d22:	622b      	str	r3, [r5, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	f105 0308 	add.w	r3, r5, #8
 8003d28:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	f105 0108 	add.w	r1, r5, #8
 8003d34:	e841 3200 	strex	r2, r3, [r1]
 8003d38:	2a00      	cmp	r2, #0
 8003d3a:	d1f3      	bne.n	8003d24 <HAL_UART_Transmit_DMA+0x58>
    return HAL_OK;
 8003d3c:	2000      	movs	r0, #0
}
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d99 	.word	0x08003d99
 8003d48:	08003db1 	.word	0x08003db1

08003d4c <HAL_UART_TxCpltCallback>:
/**
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop

08003d50 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d50:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003d52:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d54:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f013 0320 	ands.w	r3, r3, #32
 8003d5c:	d117      	bne.n	8003d8e <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8003d5e:	6802      	ldr	r2, [r0, #0]
 8003d60:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	f102 0308 	add.w	r3, r2, #8
 8003d68:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	f102 0008 	add.w	r0, r2, #8
 8003d74:	e840 3100 	strex	r1, r3, [r0]
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	d1f3      	bne.n	8003d64 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	e842 3100 	strex	r1, r3, [r2]
 8003d88:	2900      	cmp	r1, #0
 8003d8a:	d1f7      	bne.n	8003d7c <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d8c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8003d8e:	f7ff ffdd 	bl	8003d4c <HAL_UART_TxCpltCallback>
}
 8003d92:	bd08      	pop	{r3, pc}

08003d94 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop

08003d98 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d98:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003d9a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003d9c:	f7ff fffa 	bl	8003d94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003da0:	bd08      	pop	{r3, pc}
 8003da2:	bf00      	nop

08003da4 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop

08003da8 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop

08003dac <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop

08003db0 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003db0:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003db2:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003db4:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
{
 8003db6:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003db8:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	0612      	lsls	r2, r2, #24
 8003dc0:	d501      	bpl.n	8003dc6 <UART_DMAError+0x16>
 8003dc2:	2921      	cmp	r1, #33	@ 0x21
 8003dc4:	d00d      	beq.n	8003de2 <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	0652      	lsls	r2, r2, #25
 8003dca:	d501      	bpl.n	8003dd0 <UART_DMAError+0x20>
 8003dcc:	2c22      	cmp	r4, #34	@ 0x22
 8003dce:	d016      	beq.n	8003dfe <UART_DMAError+0x4e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003dd0:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8003dd4:	f043 0310 	orr.w	r3, r3, #16
 8003dd8:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ddc:	f7ff ffe6 	bl	8003dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de0:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003dec:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	e843 2100 	strex	r1, r2, [r3]
 8003df4:	2900      	cmp	r1, #0
 8003df6:	d1f7      	bne.n	8003de8 <UART_DMAError+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8003df8:	2220      	movs	r2, #32
 8003dfa:	67c2      	str	r2, [r0, #124]	@ 0x7c
}
 8003dfc:	e7e3      	b.n	8003dc6 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e08:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	e843 2100 	strex	r1, r2, [r3]
 8003e10:	2900      	cmp	r1, #0
 8003e12:	d1f7      	bne.n	8003e04 <UART_DMAError+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	f103 0208 	add.w	r2, r3, #8
 8003e18:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	f103 0408 	add.w	r4, r3, #8
 8003e24:	e844 2100 	strex	r1, r2, [r4]
 8003e28:	2900      	cmp	r1, #0
 8003e2a:	d1f3      	bne.n	8003e14 <UART_DMAError+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8003e2e:	2a01      	cmp	r2, #1
 8003e30:	d006      	beq.n	8003e40 <UART_DMAError+0x90>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003e34:	2220      	movs	r2, #32
 8003e36:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  huart->RxISR = NULL;
 8003e3a:	6683      	str	r3, [r0, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3c:	6603      	str	r3, [r0, #96]	@ 0x60
}
 8003e3e:	e7c7      	b.n	8003dd0 <UART_DMAError+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e44:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	e843 2100 	strex	r1, r2, [r3]
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	d0f0      	beq.n	8003e32 <UART_DMAError+0x82>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	e853 2f00 	ldrex	r2, [r3]
 8003e54:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	e843 2100 	strex	r1, r2, [r3]
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d1ef      	bne.n	8003e40 <UART_DMAError+0x90>
 8003e60:	e7e7      	b.n	8003e32 <UART_DMAError+0x82>
 8003e62:	bf00      	nop

08003e64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e64:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e66:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003e6e:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e72:	f7ff ff9b 	bl	8003dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e76:	bd08      	pop	{r3, pc}

08003e78 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e78:	6803      	ldr	r3, [r0, #0]
 8003e7a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e7c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e7e:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 8003e82:	ea12 0f0c 	tst.w	r2, ip
{
 8003e86:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e88:	689d      	ldr	r5, [r3, #8]
{
 8003e8a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8003e8c:	d152      	bne.n	8003f34 <HAL_UART_IRQHandler+0xbc>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e8e:	0696      	lsls	r6, r2, #26
 8003e90:	d502      	bpl.n	8003e98 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e92:	068e      	lsls	r6, r1, #26
 8003e94:	f100 80cd 	bmi.w	8004032 <HAL_UART_IRQHandler+0x1ba>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e98:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003e9a:	2801      	cmp	r0, #1
 8003e9c:	d024      	beq.n	8003ee8 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e9e:	02d6      	lsls	r6, r2, #11
 8003ea0:	d502      	bpl.n	8003ea8 <HAL_UART_IRQHandler+0x30>
 8003ea2:	0268      	lsls	r0, r5, #9
 8003ea4:	f100 80ca 	bmi.w	800403c <HAL_UART_IRQHandler+0x1c4>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ea8:	0616      	lsls	r6, r2, #24
 8003eaa:	d414      	bmi.n	8003ed6 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003eac:	0650      	lsls	r0, r2, #25
 8003eae:	d501      	bpl.n	8003eb4 <HAL_UART_IRQHandler+0x3c>
 8003eb0:	064a      	lsls	r2, r1, #25
 8003eb2:	d400      	bmi.n	8003eb6 <HAL_UART_IRQHandler+0x3e>
}
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	e843 2100 	strex	r1, r2, [r3]
 8003ec2:	2900      	cmp	r1, #0
 8003ec4:	d1f7      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ec6:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ec8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003eca:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->TxISR = NULL;
 8003ecc:	66e3      	str	r3, [r4, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f7ff ff3c 	bl	8003d4c <HAL_UART_TxCpltCallback>
}
 8003ed4:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ed6:	060d      	lsls	r5, r1, #24
 8003ed8:	d5e8      	bpl.n	8003eac <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8003eda:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0e9      	beq.n	8003eb4 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8003ee0:	4620      	mov	r0, r4
}
 8003ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8003ee6:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ee8:	06d0      	lsls	r0, r2, #27
 8003eea:	d5d8      	bpl.n	8003e9e <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003eec:	06ce      	lsls	r6, r1, #27
 8003eee:	d5d6      	bpl.n	8003e9e <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	6899      	ldr	r1, [r3, #8]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ef6:	f8b4 2058 	ldrh.w	r2, [r4, #88]	@ 0x58
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efa:	0648      	lsls	r0, r1, #25
 8003efc:	f140 80fb 	bpl.w	80040f6 <HAL_UART_IRQHandler+0x27e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f00:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003f02:	6805      	ldr	r5, [r0, #0]
 8003f04:	6869      	ldr	r1, [r5, #4]
 8003f06:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8003f08:	2900      	cmp	r1, #0
 8003f0a:	f000 8160 	beq.w	80041ce <HAL_UART_IRQHandler+0x356>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f0e:	4291      	cmp	r1, r2
 8003f10:	f080 815d 	bcs.w	80041ce <HAL_UART_IRQHandler+0x356>
        huart->RxXferCount = nb_remaining_rx_data;
 8003f14:	f8a4 105a 	strh.w	r1, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f18:	6829      	ldr	r1, [r5, #0]
 8003f1a:	0689      	lsls	r1, r1, #26
 8003f1c:	f140 8120 	bpl.w	8004160 <HAL_UART_IRQHandler+0x2e8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f20:	2302      	movs	r3, #2
 8003f22:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f24:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
 8003f28:	1a51      	subs	r1, r2, r1
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	b289      	uxth	r1, r1
 8003f2e:	f7fd fd51 	bl	80019d4 <HAL_UARTEx_RxEventCallback>
}
 8003f32:	bd70      	pop	{r4, r5, r6, pc}
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f34:	f015 0601 	ands.w	r6, r5, #1
 8003f38:	f040 80a5 	bne.w	8004086 <HAL_UART_IRQHandler+0x20e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f3c:	48a7      	ldr	r0, [pc, #668]	@ (80041dc <HAL_UART_IRQHandler+0x364>)
 8003f3e:	4201      	tst	r1, r0
 8003f40:	d0aa      	beq.n	8003e98 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f42:	07d5      	lsls	r5, r2, #31
 8003f44:	d50f      	bpl.n	8003f66 <HAL_UART_IRQHandler+0xee>
 8003f46:	05c8      	lsls	r0, r1, #23
 8003f48:	f140 80d1 	bpl.w	80040ee <HAL_UART_IRQHandler+0x276>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f50:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003f54:	f040 0001 	orr.w	r0, r0, #1
 8003f58:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f5c:	0790      	lsls	r0, r2, #30
 8003f5e:	d57a      	bpl.n	8004056 <HAL_UART_IRQHandler+0x1de>
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	f040 8094 	bne.w	800408e <HAL_UART_IRQHandler+0x216>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f66:	0755      	lsls	r5, r2, #29
 8003f68:	f140 809b 	bpl.w	80040a2 <HAL_UART_IRQHandler+0x22a>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f6c:	0716      	lsls	r6, r2, #28
 8003f6e:	f100 80bb 	bmi.w	80040e8 <HAL_UART_IRQHandler+0x270>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f72:	0515      	lsls	r5, r2, #20
 8003f74:	d50a      	bpl.n	8003f8c <HAL_UART_IRQHandler+0x114>
 8003f76:	0148      	lsls	r0, r1, #5
 8003f78:	d508      	bpl.n	8003f8c <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003f7e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f80:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003f84:	f040 0020 	orr.w	r0, r0, #32
 8003f88:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f8c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d08f      	beq.n	8003eb4 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f94:	0692      	lsls	r2, r2, #26
 8003f96:	d506      	bpl.n	8003fa6 <HAL_UART_IRQHandler+0x12e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f98:	068e      	lsls	r6, r1, #26
 8003f9a:	d504      	bpl.n	8003fa6 <HAL_UART_IRQHandler+0x12e>
        if (huart->RxISR != NULL)
 8003f9c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8003f9e:	b112      	cbz	r2, 8003fa6 <HAL_UART_IRQHandler+0x12e>
          huart->RxISR(huart);
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fa4:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8003fa6:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003faa:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fac:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fb0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8003fb4:	ea52 0501 	orrs.w	r5, r2, r1
 8003fb8:	f000 8103 	beq.w	80041c2 <HAL_UART_IRQHandler+0x34a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	e843 2100 	strex	r1, r2, [r3]
 8003fc8:	2900      	cmp	r1, #0
 8003fca:	d1f7      	bne.n	8003fbc <HAL_UART_IRQHandler+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	f103 0208 	add.w	r2, r3, #8
 8003fd0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	f103 0008 	add.w	r0, r3, #8
 8003fdc:	e840 2100 	strex	r1, r2, [r0]
 8003fe0:	2900      	cmp	r1, #0
 8003fe2:	d1f3      	bne.n	8003fcc <HAL_UART_IRQHandler+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003fe6:	2a01      	cmp	r2, #1
 8003fe8:	d064      	beq.n	80040b4 <HAL_UART_IRQHandler+0x23c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fea:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003fec:	2120      	movs	r1, #32
 8003fee:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff2:	6622      	str	r2, [r4, #96]	@ 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8003ff6:	66a2      	str	r2, [r4, #104]	@ 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff8:	064d      	lsls	r5, r1, #25
 8003ffa:	d56c      	bpl.n	80040d6 <HAL_UART_IRQHandler+0x25e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	f103 0208 	add.w	r2, r3, #8
 8004000:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004004:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	f103 0008 	add.w	r0, r3, #8
 800400c:	e840 2100 	strex	r1, r2, [r0]
 8004010:	2900      	cmp	r1, #0
 8004012:	d1f3      	bne.n	8003ffc <HAL_UART_IRQHandler+0x184>
          if (huart->hdmarx != NULL)
 8004014:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004016:	2800      	cmp	r0, #0
 8004018:	d05d      	beq.n	80040d6 <HAL_UART_IRQHandler+0x25e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800401a:	4b71      	ldr	r3, [pc, #452]	@ (80041e0 <HAL_UART_IRQHandler+0x368>)
 800401c:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800401e:	f7fe f907 	bl	8002230 <HAL_DMA_Abort_IT>
 8004022:	2800      	cmp	r0, #0
 8004024:	f43f af46 	beq.w	8003eb4 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004028:	6f60      	ldr	r0, [r4, #116]	@ 0x74
}
 800402a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800402e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004030:	4718      	bx	r3
      if (huart->RxISR != NULL)
 8004032:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8004034:	2b00      	cmp	r3, #0
 8004036:	f47f af54 	bne.w	8003ee2 <HAL_UART_IRQHandler+0x6a>
 800403a:	e73b      	b.n	8003eb4 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800403c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8004040:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004042:	621a      	str	r2, [r3, #32]
}
 8004044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8004048:	f000 bc30 	b.w	80048ac <HAL_UARTEx_WakeupCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800404c:	05c8      	lsls	r0, r1, #23
 800404e:	f53f af7d 	bmi.w	8003f4c <HAL_UART_IRQHandler+0xd4>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004052:	0795      	lsls	r5, r2, #30
 8004054:	d41b      	bmi.n	800408e <HAL_UART_IRQHandler+0x216>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004056:	0750      	lsls	r0, r2, #29
 8004058:	d523      	bpl.n	80040a2 <HAL_UART_IRQHandler+0x22a>
 800405a:	2e00      	cmp	r6, #0
 800405c:	d086      	beq.n	8003f6c <HAL_UART_IRQHandler+0xf4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800405e:	2004      	movs	r0, #4
 8004060:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004062:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004066:	0715      	lsls	r5, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004068:	f040 0002 	orr.w	r0, r0, #2
 800406c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004070:	f57f af7f 	bpl.w	8003f72 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004074:	2008      	movs	r0, #8
 8004076:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004078:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800407c:	f040 0008 	orr.w	r0, r0, #8
 8004080:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8004084:	e775      	b.n	8003f72 <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004086:	07d0      	lsls	r0, r2, #31
 8004088:	d4e0      	bmi.n	800404c <HAL_UART_IRQHandler+0x1d4>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800408a:	0795      	lsls	r5, r2, #30
 800408c:	d527      	bpl.n	80040de <HAL_UART_IRQHandler+0x266>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800408e:	2002      	movs	r0, #2
 8004090:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004092:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004096:	f040 0004 	orr.w	r0, r0, #4
 800409a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800409e:	0750      	lsls	r0, r2, #29
 80040a0:	d4dd      	bmi.n	800405e <HAL_UART_IRQHandler+0x1e6>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040a2:	0710      	lsls	r0, r2, #28
 80040a4:	f57f af65 	bpl.w	8003f72 <HAL_UART_IRQHandler+0xfa>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040a8:	f001 0020 	and.w	r0, r1, #32
 80040ac:	4330      	orrs	r0, r6
 80040ae:	f43f af60 	beq.w	8003f72 <HAL_UART_IRQHandler+0xfa>
 80040b2:	e7df      	b.n	8004074 <HAL_UART_IRQHandler+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	e843 2100 	strex	r1, r2, [r3]
 80040c0:	2900      	cmp	r1, #0
 80040c2:	d092      	beq.n	8003fea <HAL_UART_IRQHandler+0x172>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	e853 2f00 	ldrex	r2, [r3]
 80040c8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	e843 2100 	strex	r1, r2, [r3]
 80040d0:	2900      	cmp	r1, #0
 80040d2:	d1ef      	bne.n	80040b4 <HAL_UART_IRQHandler+0x23c>
 80040d4:	e789      	b.n	8003fea <HAL_UART_IRQHandler+0x172>
            HAL_UART_ErrorCallback(huart);
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7ff fe68 	bl	8003dac <HAL_UART_ErrorCallback>
}
 80040dc:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040de:	0756      	lsls	r6, r2, #29
 80040e0:	d4bd      	bmi.n	800405e <HAL_UART_IRQHandler+0x1e6>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040e2:	0710      	lsls	r0, r2, #28
 80040e4:	d4c6      	bmi.n	8004074 <HAL_UART_IRQHandler+0x1fc>
 80040e6:	e744      	b.n	8003f72 <HAL_UART_IRQHandler+0xfa>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040e8:	068d      	lsls	r5, r1, #26
 80040ea:	d4c3      	bmi.n	8004074 <HAL_UART_IRQHandler+0x1fc>
 80040ec:	e741      	b.n	8003f72 <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040ee:	0795      	lsls	r5, r2, #30
 80040f0:	f53f af39 	bmi.w	8003f66 <HAL_UART_IRQHandler+0xee>
 80040f4:	e7af      	b.n	8004056 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040f6:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 80040fa:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
 80040fe:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004100:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8004102:	2900      	cmp	r1, #0
 8004104:	f43f aed6 	beq.w	8003eb4 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004108:	1a12      	subs	r2, r2, r0
 800410a:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 800410c:	2900      	cmp	r1, #0
 800410e:	f43f aed1 	beq.w	8003eb4 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004116:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	e843 2000 	strex	r0, r2, [r3]
 800411e:	2800      	cmp	r0, #0
 8004120:	d1f7      	bne.n	8004112 <HAL_UART_IRQHandler+0x29a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	f103 0208 	add.w	r2, r3, #8
 8004126:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	f103 0508 	add.w	r5, r3, #8
 8004132:	e845 2000 	strex	r0, r2, [r5]
 8004136:	2800      	cmp	r0, #0
 8004138:	d1f3      	bne.n	8004122 <HAL_UART_IRQHandler+0x2aa>
        huart->RxState = HAL_UART_STATE_READY;
 800413a:	2220      	movs	r2, #32
 800413c:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        huart->RxISR = NULL;
 8004140:	66a0      	str	r0, [r4, #104]	@ 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004142:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	e843 2000 	strex	r0, r2, [r3]
 8004150:	2800      	cmp	r0, #0
 8004152:	d1f7      	bne.n	8004144 <HAL_UART_IRQHandler+0x2cc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004154:	2302      	movs	r3, #2
 8004156:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004158:	4620      	mov	r0, r4
 800415a:	f7fd fc3b 	bl	80019d4 <HAL_UARTEx_RxEventCallback>
}
 800415e:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004164:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	e843 2100 	strex	r1, r2, [r3]
 800416c:	2900      	cmp	r1, #0
 800416e:	d1f7      	bne.n	8004160 <HAL_UART_IRQHandler+0x2e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	f103 0208 	add.w	r2, r3, #8
 8004174:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004178:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	f103 0508 	add.w	r5, r3, #8
 8004180:	e845 2100 	strex	r1, r2, [r5]
 8004184:	2900      	cmp	r1, #0
 8004186:	d1f3      	bne.n	8004170 <HAL_UART_IRQHandler+0x2f8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	f103 0208 	add.w	r2, r3, #8
 800418c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004190:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	f103 0508 	add.w	r5, r3, #8
 8004198:	e845 2100 	strex	r1, r2, [r5]
 800419c:	2900      	cmp	r1, #0
 800419e:	d1f3      	bne.n	8004188 <HAL_UART_IRQHandler+0x310>
          huart->RxState = HAL_UART_STATE_READY;
 80041a0:	2220      	movs	r2, #32
 80041a2:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a6:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	e843 2100 	strex	r1, r2, [r3]
 80041b4:	2900      	cmp	r1, #0
 80041b6:	d1f7      	bne.n	80041a8 <HAL_UART_IRQHandler+0x330>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041b8:	f7fe f814 	bl	80021e4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041bc:	f8b4 2058 	ldrh.w	r2, [r4, #88]	@ 0x58
 80041c0:	e6ae      	b.n	8003f20 <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7ff fdf2 	bl	8003dac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c8:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 80041cc:	bd70      	pop	{r4, r5, r6, pc}
        if (nb_remaining_rx_data == huart->RxXferSize)
 80041ce:	4291      	cmp	r1, r2
 80041d0:	f47f ae70 	bne.w	8003eb4 <HAL_UART_IRQHandler+0x3c>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	069b      	lsls	r3, r3, #26
 80041d8:	d4bc      	bmi.n	8004154 <HAL_UART_IRQHandler+0x2dc>
}
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	04000120 	.word	0x04000120
 80041e0:	08003e65 	.word	0x08003e65

080041e4 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041e4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80041e6:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80041e8:	2301      	movs	r3, #1
 80041ea:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ec:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d002      	beq.n	80041f8 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 80041f2:	f7ff fdd9 	bl	8003da8 <HAL_UART_RxHalfCpltCallback>
}
 80041f6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041f8:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 80041fc:	0849      	lsrs	r1, r1, #1
 80041fe:	f7fd fbe9 	bl	80019d4 <HAL_UARTEx_RxEventCallback>
}
 8004202:	bd08      	pop	{r3, pc}

08004204 <UART_DMAReceiveCplt>:
{
 8004204:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004206:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004208:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	f012 0220 	ands.w	r2, r2, #32
 8004210:	d128      	bne.n	8004264 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 8004212:	6803      	ldr	r3, [r0, #0]
 8004214:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800421c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	e843 2100 	strex	r1, r2, [r3]
 8004224:	2900      	cmp	r1, #0
 8004226:	d1f7      	bne.n	8004218 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	f103 0208 	add.w	r2, r3, #8
 800422c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	f103 0c08 	add.w	ip, r3, #8
 8004238:	e84c 2100 	strex	r1, r2, [ip]
 800423c:	2900      	cmp	r1, #0
 800423e:	d1f3      	bne.n	8004228 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	f103 0208 	add.w	r2, r3, #8
 8004244:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	f103 0c08 	add.w	ip, r3, #8
 8004250:	e84c 2100 	strex	r1, r2, [ip]
 8004254:	2900      	cmp	r1, #0
 8004256:	d1f3      	bne.n	8004240 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8004258:	2220      	movs	r2, #32
 800425a:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425e:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8004260:	2a01      	cmp	r2, #1
 8004262:	d007      	beq.n	8004274 <UART_DMAReceiveCplt+0x70>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004264:	2300      	movs	r3, #0
 8004266:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004268:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800426a:	2b01      	cmp	r3, #1
 800426c:	d013      	beq.n	8004296 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 800426e:	f7ff fd99 	bl	8003da4 <HAL_UART_RxCpltCallback>
}
 8004272:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004278:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	e843 2100 	strex	r1, r2, [r3]
 8004280:	2900      	cmp	r1, #0
 8004282:	d0ef      	beq.n	8004264 <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	e853 2f00 	ldrex	r2, [r3]
 8004288:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	e843 2100 	strex	r1, r2, [r3]
 8004290:	2900      	cmp	r1, #0
 8004292:	d1ef      	bne.n	8004274 <UART_DMAReceiveCplt+0x70>
 8004294:	e7e6      	b.n	8004264 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004296:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 800429a:	f7fd fb9b 	bl	80019d4 <HAL_UARTEx_RxEventCallback>
}
 800429e:	bd08      	pop	{r3, pc}

080042a0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042a0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80042a2:	071a      	lsls	r2, r3, #28
{
 80042a4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042a6:	d506      	bpl.n	80042b6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042a8:	6801      	ldr	r1, [r0, #0]
 80042aa:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80042ac:	684a      	ldr	r2, [r1, #4]
 80042ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042b2:	4322      	orrs	r2, r4
 80042b4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042b6:	07dc      	lsls	r4, r3, #31
 80042b8:	d506      	bpl.n	80042c8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ba:	6801      	ldr	r1, [r0, #0]
 80042bc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80042be:	684a      	ldr	r2, [r1, #4]
 80042c0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80042c4:	4322      	orrs	r2, r4
 80042c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042c8:	0799      	lsls	r1, r3, #30
 80042ca:	d506      	bpl.n	80042da <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042cc:	6801      	ldr	r1, [r0, #0]
 80042ce:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80042d0:	684a      	ldr	r2, [r1, #4]
 80042d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80042d6:	4322      	orrs	r2, r4
 80042d8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042da:	075a      	lsls	r2, r3, #29
 80042dc:	d506      	bpl.n	80042ec <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042de:	6801      	ldr	r1, [r0, #0]
 80042e0:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80042e2:	684a      	ldr	r2, [r1, #4]
 80042e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042e8:	4322      	orrs	r2, r4
 80042ea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042ec:	06dc      	lsls	r4, r3, #27
 80042ee:	d506      	bpl.n	80042fe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042f0:	6801      	ldr	r1, [r0, #0]
 80042f2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80042f4:	688a      	ldr	r2, [r1, #8]
 80042f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042fa:	4322      	orrs	r2, r4
 80042fc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042fe:	0699      	lsls	r1, r3, #26
 8004300:	d506      	bpl.n	8004310 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004302:	6801      	ldr	r1, [r0, #0]
 8004304:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8004306:	688a      	ldr	r2, [r1, #8]
 8004308:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800430c:	4322      	orrs	r2, r4
 800430e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004310:	065a      	lsls	r2, r3, #25
 8004312:	d509      	bpl.n	8004328 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004314:	6801      	ldr	r1, [r0, #0]
 8004316:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8004318:	684a      	ldr	r2, [r1, #4]
 800431a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800431e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004320:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004324:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004326:	d00b      	beq.n	8004340 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	d506      	bpl.n	800433a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800432c:	6802      	ldr	r2, [r0, #0]
 800432e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004330:	6853      	ldr	r3, [r2, #4]
 8004332:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004336:	430b      	orrs	r3, r1
 8004338:	6053      	str	r3, [r2, #4]
}
 800433a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800433e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004340:	684a      	ldr	r2, [r1, #4]
 8004342:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004344:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004348:	4322      	orrs	r2, r4
 800434a:	604a      	str	r2, [r1, #4]
 800434c:	e7ec      	b.n	8004328 <UART_AdvFeatureConfig+0x88>
 800434e:	bf00      	nop

08004350 <UART_CheckIdleState>:
{
 8004350:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004352:	2300      	movs	r3, #0
{
 8004354:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 800435a:	f7fd fe05 	bl	8001f68 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	6813      	ldr	r3, [r2, #0]
 8004362:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8004364:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004366:	d40e      	bmi.n	8004386 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004368:	6813      	ldr	r3, [r2, #0]
 800436a:	0759      	lsls	r1, r3, #29
 800436c:	d42f      	bmi.n	80043ce <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004370:	2220      	movs	r2, #32
 8004372:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 8004374:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8004376:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437a:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800437c:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 800437e:	2300      	movs	r3, #0
 8004380:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8004384:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004386:	69d3      	ldr	r3, [r2, #28]
 8004388:	0298      	lsls	r0, r3, #10
 800438a:	d4ed      	bmi.n	8004368 <UART_CheckIdleState+0x18>
 800438c:	e00c      	b.n	80043a8 <UART_CheckIdleState+0x58>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	0749      	lsls	r1, r1, #29
 8004392:	461a      	mov	r2, r3
 8004394:	d505      	bpl.n	80043a2 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004396:	69d9      	ldr	r1, [r3, #28]
 8004398:	0708      	lsls	r0, r1, #28
 800439a:	d449      	bmi.n	8004430 <UART_CheckIdleState+0xe0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800439c:	69d9      	ldr	r1, [r3, #28]
 800439e:	0509      	lsls	r1, r1, #20
 80043a0:	d474      	bmi.n	800448c <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	0298      	lsls	r0, r3, #10
 80043a6:	d4df      	bmi.n	8004368 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a8:	f7fd fdde 	bl	8001f68 <HAL_GetTick>
 80043ac:	1b43      	subs	r3, r0, r5
 80043ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043b2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b4:	d3eb      	bcc.n	800438e <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	e843 2100 	strex	r1, r2, [r3]
 80043c2:	2900      	cmp	r1, #0
 80043c4:	d1f7      	bne.n	80043b6 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 80043c6:	2320      	movs	r3, #32
 80043c8:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80043ca:	2003      	movs	r0, #3
 80043cc:	e7d7      	b.n	800437e <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ce:	69d3      	ldr	r3, [r2, #28]
 80043d0:	025b      	lsls	r3, r3, #9
 80043d2:	d4cc      	bmi.n	800436e <UART_CheckIdleState+0x1e>
 80043d4:	e00d      	b.n	80043f2 <UART_CheckIdleState+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	0750      	lsls	r0, r2, #29
 80043da:	d507      	bpl.n	80043ec <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	0711      	lsls	r1, r2, #28
 80043e0:	f100 8082 	bmi.w	80044e8 <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	0512      	lsls	r2, r2, #20
 80043e8:	f100 80ac 	bmi.w	8004544 <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	025b      	lsls	r3, r3, #9
 80043f0:	d4bd      	bmi.n	800436e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7fd fdb9 	bl	8001f68 <HAL_GetTick>
 80043f6:	1b43      	subs	r3, r0, r5
 80043f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	d3ea      	bcc.n	80043d6 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004404:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	e843 2100 	strex	r1, r2, [r3]
 800440c:	2900      	cmp	r1, #0
 800440e:	d1f7      	bne.n	8004400 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	f103 0208 	add.w	r2, r3, #8
 8004414:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004418:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	f103 0008 	add.w	r0, r3, #8
 8004420:	e840 2100 	strex	r1, r2, [r0]
 8004424:	2900      	cmp	r1, #0
 8004426:	d1f3      	bne.n	8004410 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8004428:	2320      	movs	r3, #32
 800442a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 800442e:	e7cc      	b.n	80043ca <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004430:	2208      	movs	r2, #8
 8004432:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004438:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	e843 2100 	strex	r1, r2, [r3]
 8004440:	2900      	cmp	r1, #0
 8004442:	d1f7      	bne.n	8004434 <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	f103 0208 	add.w	r2, r3, #8
 8004448:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	f103 0008 	add.w	r0, r3, #8
 8004454:	e840 2100 	strex	r1, r2, [r0]
 8004458:	2900      	cmp	r1, #0
 800445a:	d1f3      	bne.n	8004444 <UART_CheckIdleState+0xf4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800445c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800445e:	2a01      	cmp	r2, #1
 8004460:	d00b      	beq.n	800447a <UART_CheckIdleState+0x12a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004464:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004466:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004468:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 800446c:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446e:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004470:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004474:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8004478:	e79d      	b.n	80043b6 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800447e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	e843 2100 	strex	r1, r2, [r3]
 8004486:	2900      	cmp	r1, #0
 8004488:	d1f7      	bne.n	800447a <UART_CheckIdleState+0x12a>
 800448a:	e7ea      	b.n	8004462 <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800448c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004490:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004496:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	e843 2100 	strex	r1, r2, [r3]
 800449e:	2900      	cmp	r1, #0
 80044a0:	d1f7      	bne.n	8004492 <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	f103 0208 	add.w	r2, r3, #8
 80044a6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	f103 0008 	add.w	r0, r3, #8
 80044b2:	e840 2100 	strex	r1, r2, [r0]
 80044b6:	2900      	cmp	r1, #0
 80044b8:	d1f3      	bne.n	80044a2 <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ba:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80044bc:	2a01      	cmp	r2, #1
 80044be:	d00a      	beq.n	80044d6 <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80044c2:	2120      	movs	r1, #32
 80044c4:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80044c8:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80044cc:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044d0:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80044d4:	e76f      	b.n	80043b6 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044da:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	e843 2100 	strex	r1, r2, [r3]
 80044e2:	2900      	cmp	r1, #0
 80044e4:	d1f7      	bne.n	80044d6 <UART_CheckIdleState+0x186>
 80044e6:	e7eb      	b.n	80044c0 <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e8:	2208      	movs	r2, #8
 80044ea:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	e843 2100 	strex	r1, r2, [r3]
 80044f8:	2900      	cmp	r1, #0
 80044fa:	d1f7      	bne.n	80044ec <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	f103 0208 	add.w	r2, r3, #8
 8004500:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004504:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	f103 0008 	add.w	r0, r3, #8
 800450c:	e840 2100 	strex	r1, r2, [r0]
 8004510:	2900      	cmp	r1, #0
 8004512:	d1f3      	bne.n	80044fc <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004516:	2a01      	cmp	r2, #1
 8004518:	d00b      	beq.n	8004532 <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800451c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800451e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004520:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004524:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004526:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004528:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800452c:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8004530:	e766      	b.n	8004400 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004536:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	e843 2100 	strex	r1, r2, [r3]
 800453e:	2900      	cmp	r1, #0
 8004540:	d1f7      	bne.n	8004532 <UART_CheckIdleState+0x1e2>
 8004542:	e7ea      	b.n	800451a <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004544:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004548:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	e843 2100 	strex	r1, r2, [r3]
 8004556:	2900      	cmp	r1, #0
 8004558:	d1f7      	bne.n	800454a <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	f103 0208 	add.w	r2, r3, #8
 800455e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004562:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	f103 0008 	add.w	r0, r3, #8
 800456a:	e840 2100 	strex	r1, r2, [r0]
 800456e:	2900      	cmp	r1, #0
 8004570:	d1f3      	bne.n	800455a <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004572:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004574:	2a01      	cmp	r2, #1
 8004576:	d00a      	beq.n	800458e <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004578:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800457a:	2120      	movs	r1, #32
 800457c:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004580:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004582:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004584:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004588:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 800458c:	e738      	b.n	8004400 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004592:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	e843 2100 	strex	r1, r2, [r3]
 800459a:	2900      	cmp	r1, #0
 800459c:	d1f7      	bne.n	800458e <UART_CheckIdleState+0x23e>
 800459e:	e7eb      	b.n	8004578 <UART_CheckIdleState+0x228>

080045a0 <HAL_UART_Init>:
  if (huart == NULL)
 80045a0:	2800      	cmp	r0, #0
 80045a2:	f000 80e7 	beq.w	8004774 <HAL_UART_Init+0x1d4>
{
 80045a6:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80045a8:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80045aa:	4604      	mov	r4, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d070      	beq.n	8004692 <HAL_UART_Init+0xf2>
  __HAL_UART_DISABLE(huart);
 80045b0:	6825      	ldr	r5, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 80045b4:	2324      	movs	r3, #36	@ 0x24
 80045b6:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045c0:	2a00      	cmp	r2, #0
 80045c2:	d162      	bne.n	800468a <HAL_UART_Init+0xea>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 80045c8:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045ca:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045cc:	430b      	orrs	r3, r1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d2:	4a86      	ldr	r2, [pc, #536]	@ (80047ec <HAL_UART_Init+0x24c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045d4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d6:	4002      	ands	r2, r0
 80045d8:	4313      	orrs	r3, r2
 80045da:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045dc:	686b      	ldr	r3, [r5, #4]
 80045de:	68e2      	ldr	r2, [r4, #12]
 80045e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045e4:	4313      	orrs	r3, r2
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045e6:	4a82      	ldr	r2, [pc, #520]	@ (80047f0 <HAL_UART_Init+0x250>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e8:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045ea:	4295      	cmp	r5, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ec:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ee:	68aa      	ldr	r2, [r5, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045f0:	d035      	beq.n	800465e <HAL_UART_Init+0xbe>
    tmpreg |= huart->Init.OneBitSampling;
 80045f2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045f4:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80045f8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045fa:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045fc:	4a7d      	ldr	r2, [pc, #500]	@ (80047f4 <HAL_UART_Init+0x254>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045fe:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004600:	4295      	cmp	r5, r2
 8004602:	d118      	bne.n	8004636 <HAL_UART_Init+0x96>
 8004604:	4b7c      	ldr	r3, [pc, #496]	@ (80047f8 <HAL_UART_Init+0x258>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d06d      	beq.n	80046ee <HAL_UART_Init+0x14e>
 8004612:	2b03      	cmp	r3, #3
 8004614:	f000 80a8 	beq.w	8004768 <HAL_UART_Init+0x1c8>
 8004618:	2b01      	cmp	r3, #1
 800461a:	f000 809b 	beq.w	8004754 <HAL_UART_Init+0x1b4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461e:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004622:	f000 80b9 	beq.w	8004798 <HAL_UART_Init+0x1f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004626:	f7fe fc4b 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800462a:	2800      	cmp	r0, #0
 800462c:	d163      	bne.n	80046f6 <HAL_UART_Init+0x156>
  huart->RxISR = NULL;
 800462e:	e9c4 001a 	strd	r0, r0, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	e06f      	b.n	8004716 <HAL_UART_Init+0x176>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004636:	4b71      	ldr	r3, [pc, #452]	@ (80047fc <HAL_UART_Init+0x25c>)
 8004638:	429d      	cmp	r5, r3
 800463a:	d17d      	bne.n	8004738 <HAL_UART_Init+0x198>
 800463c:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004644:	f003 030c 	and.w	r3, r3, #12
 8004648:	2b0c      	cmp	r3, #12
 800464a:	d819      	bhi.n	8004680 <HAL_UART_Init+0xe0>
 800464c:	e8df f003 	tbb	[pc, r3]
 8004650:	1818189c 	.word	0x1818189c
 8004654:	18181882 	.word	0x18181882
 8004658:	1818184f 	.word	0x1818184f
 800465c:	8c          	.byte	0x8c
 800465d:	00          	.byte	0x00
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800465e:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8004662:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004664:	4964      	ldr	r1, [pc, #400]	@ (80047f8 <HAL_UART_Init+0x258>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004666:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004668:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800466c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004674:	f000 8086 	beq.w	8004784 <HAL_UART_Init+0x1e4>
 8004678:	d910      	bls.n	800469c <HAL_UART_Init+0xfc>
 800467a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800467e:	d017      	beq.n	80046b0 <HAL_UART_Init+0x110>
  huart->RxISR = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8004686:	2001      	movs	r0, #1
 8004688:	bd38      	pop	{r3, r4, r5, pc}
    UART_AdvFeatureConfig(huart);
 800468a:	4620      	mov	r0, r4
 800468c:	f7ff fe08 	bl	80042a0 <UART_AdvFeatureConfig>
 8004690:	e798      	b.n	80045c4 <HAL_UART_Init+0x24>
    huart->Lock = HAL_UNLOCKED;
 8004692:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8004696:	f7fd fb2d 	bl	8001cf4 <HAL_UART_MspInit>
 800469a:	e789      	b.n	80045b0 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800469c:	2b00      	cmp	r3, #0
 800469e:	d06b      	beq.n	8004778 <HAL_UART_Init+0x1d8>
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a4:	d1ec      	bne.n	8004680 <HAL_UART_Init+0xe0>
        pclk = HAL_RCC_GetSysClockFreq();
 80046a6:	f7fd ffbb 	bl	8002620 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d0bf      	beq.n	800462e <HAL_UART_Init+0x8e>
 80046ae:	e001      	b.n	80046b4 <HAL_UART_Init+0x114>
        pclk = (uint32_t) LSE_VALUE;
 80046b0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046b4:	6862      	ldr	r2, [r4, #4]
 80046b6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80046ba:	4283      	cmp	r3, r0
 80046bc:	d8e0      	bhi.n	8004680 <HAL_UART_Init+0xe0>
 80046be:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80046c2:	d8dd      	bhi.n	8004680 <HAL_UART_Init+0xe0>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046c4:	2500      	movs	r5, #0
 80046c6:	0853      	lsrs	r3, r2, #1
 80046c8:	f44f 7c80 	mov.w	ip, #256	@ 0x100
 80046cc:	4629      	mov	r1, r5
 80046ce:	fbe0 310c 	umlal	r3, r1, r0, ip
 80046d2:	4618      	mov	r0, r3
 80046d4:	462b      	mov	r3, r5
 80046d6:	f7fb fdcb 	bl	8000270 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046da:	4b49      	ldr	r3, [pc, #292]	@ (8004800 <HAL_UART_Init+0x260>)
 80046dc:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d8cd      	bhi.n	8004680 <HAL_UART_Init+0xe0>
          huart->Instance->BRR = usartdiv;
 80046e4:	6822      	ldr	r2, [r4, #0]
 80046e6:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 80046e8:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
  return ret;
 80046ec:	e013      	b.n	8004716 <HAL_UART_Init+0x176>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ee:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80046f2:	d06f      	beq.n	80047d4 <HAL_UART_Init+0x234>
        pclk = (uint32_t) HSI_VALUE;
 80046f4:	4843      	ldr	r0, [pc, #268]	@ (8004804 <HAL_UART_Init+0x264>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046f6:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046fc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004700:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004704:	f1a0 0310 	sub.w	r3, r0, #16
 8004708:	4293      	cmp	r3, r2
 800470a:	d8b9      	bhi.n	8004680 <HAL_UART_Init+0xe0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800470c:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 800470e:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004710:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 8004712:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004716:	6853      	ldr	r3, [r2, #4]
 8004718:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800471c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800471e:	6893      	ldr	r3, [r2, #8]
 8004720:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004724:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004726:	6813      	ldr	r3, [r2, #0]
 8004728:	f043 0301 	orr.w	r3, r3, #1
  return (UART_CheckIdleState(huart));
 800472c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8004734:	f7ff be0c 	b.w	8004350 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004738:	4b33      	ldr	r3, [pc, #204]	@ (8004808 <HAL_UART_Init+0x268>)
 800473a:	429d      	cmp	r5, r3
 800473c:	d1a0      	bne.n	8004680 <HAL_UART_Init+0xe0>
 800473e:	4b2e      	ldr	r3, [pc, #184]	@ (80047f8 <HAL_UART_Init+0x258>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004744:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004748:	2b20      	cmp	r3, #32
 800474a:	d0d0      	beq.n	80046ee <HAL_UART_Init+0x14e>
 800474c:	d80a      	bhi.n	8004764 <HAL_UART_Init+0x1c4>
 800474e:	b1db      	cbz	r3, 8004788 <HAL_UART_Init+0x1e8>
 8004750:	2b10      	cmp	r3, #16
 8004752:	d195      	bne.n	8004680 <HAL_UART_Init+0xe0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004754:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004758:	d044      	beq.n	80047e4 <HAL_UART_Init+0x244>
        pclk = HAL_RCC_GetSysClockFreq();
 800475a:	f7fd ff61 	bl	8002620 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800475e:	2800      	cmp	r0, #0
 8004760:	d1c9      	bne.n	80046f6 <HAL_UART_Init+0x156>
 8004762:	e764      	b.n	800462e <HAL_UART_Init+0x8e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004764:	2b30      	cmp	r3, #48	@ 0x30
 8004766:	d18b      	bne.n	8004680 <HAL_UART_Init+0xe0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004768:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800476c:	d034      	beq.n	80047d8 <HAL_UART_Init+0x238>
        pclk = (uint32_t) LSE_VALUE;
 800476e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004772:	e7c0      	b.n	80046f6 <HAL_UART_Init+0x156>
}
 8004774:	2001      	movs	r0, #1
 8004776:	4770      	bx	lr
        pclk = HAL_RCC_GetPCLK1Freq();
 8004778:	f7fe fb90 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800477c:	2800      	cmp	r0, #0
 800477e:	f43f af56 	beq.w	800462e <HAL_UART_Init+0x8e>
 8004782:	e797      	b.n	80046b4 <HAL_UART_Init+0x114>
        pclk = (uint32_t) HSI_VALUE;
 8004784:	481f      	ldr	r0, [pc, #124]	@ (8004804 <HAL_UART_Init+0x264>)
 8004786:	e795      	b.n	80046b4 <HAL_UART_Init+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004788:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800478c:	d027      	beq.n	80047de <HAL_UART_Init+0x23e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800478e:	f7fe fb85 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004792:	2800      	cmp	r0, #0
 8004794:	d1af      	bne.n	80046f6 <HAL_UART_Init+0x156>
 8004796:	e74a      	b.n	800462e <HAL_UART_Init+0x8e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004798:	f7fe fb92 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800479c:	2800      	cmp	r0, #0
 800479e:	f43f af46 	beq.w	800462e <HAL_UART_Init+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047a2:	0043      	lsls	r3, r0, #1
 80047a4:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a6:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047aa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80047ae:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b2:	f1a3 0210 	sub.w	r2, r3, #16
 80047b6:	428a      	cmp	r2, r1
 80047b8:	f63f af62 	bhi.w	8004680 <HAL_UART_Init+0xe0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047bc:	f023 010f 	bic.w	r1, r3, #15
 80047c0:	b289      	uxth	r1, r1
        huart->Instance->BRR = brrtemp;
 80047c2:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047c4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80047c8:	430b      	orrs	r3, r1
  huart->RxISR = NULL;
 80047ca:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 80047cc:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 80047ce:	e9c4 111a 	strd	r1, r1, [r4, #104]	@ 0x68
  return ret;
 80047d2:	e7a0      	b.n	8004716 <HAL_UART_Init+0x176>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047d4:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <HAL_UART_Init+0x26c>)
 80047d6:	e7e5      	b.n	80047a4 <HAL_UART_Init+0x204>
 80047d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80047dc:	e7e2      	b.n	80047a4 <HAL_UART_Init+0x204>
        pclk = HAL_RCC_GetPCLK1Freq();
 80047de:	f7fe fb5d 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
        break;
 80047e2:	e7db      	b.n	800479c <HAL_UART_Init+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 80047e4:	f7fd ff1c 	bl	8002620 <HAL_RCC_GetSysClockFreq>
        break;
 80047e8:	e7d8      	b.n	800479c <HAL_UART_Init+0x1fc>
 80047ea:	bf00      	nop
 80047ec:	efff69f3 	.word	0xefff69f3
 80047f0:	40008000 	.word	0x40008000
 80047f4:	40013800 	.word	0x40013800
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40004400 	.word	0x40004400
 8004800:	000ffcff 	.word	0x000ffcff
 8004804:	00f42400 	.word	0x00f42400
 8004808:	40004800 	.word	0x40004800
 800480c:	01e84800 	.word	0x01e84800

08004810 <UART_Start_Receive_DMA>:
{
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	4605      	mov	r5, r0
 8004814:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004816:	2022      	movs	r0, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004818:	2200      	movs	r2, #0
 800481a:	f8c5 2084 	str.w	r2, [r5, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800481e:	f8c5 0080 	str.w	r0, [r5, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 8004822:	6f68      	ldr	r0, [r5, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004824:	682c      	ldr	r4, [r5, #0]
  huart->pRxBuffPtr = pData;
 8004826:	6569      	str	r1, [r5, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004828:	f8a5 3058 	strh.w	r3, [r5, #88]	@ 0x58
  if (huart->hdmarx != NULL)
 800482c:	b168      	cbz	r0, 800484a <UART_Start_Receive_DMA+0x3a>
    huart->hdmarx->XferAbortCallback = NULL;
 800482e:	6382      	str	r2, [r0, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004830:	460a      	mov	r2, r1
 8004832:	f104 0124 	add.w	r1, r4, #36	@ 0x24
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004836:	4c1a      	ldr	r4, [pc, #104]	@ (80048a0 <UART_Start_Receive_DMA+0x90>)
 8004838:	62c4      	str	r4, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800483a:	4c1a      	ldr	r4, [pc, #104]	@ (80048a4 <UART_Start_Receive_DMA+0x94>)
 800483c:	6304      	str	r4, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800483e:	4c1a      	ldr	r4, [pc, #104]	@ (80048a8 <UART_Start_Receive_DMA+0x98>)
 8004840:	6344      	str	r4, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004842:	f7fd fc8b 	bl	800215c <HAL_DMA_Start_IT>
 8004846:	bb18      	cbnz	r0, 8004890 <UART_Start_Receive_DMA+0x80>
 8004848:	682c      	ldr	r4, [r5, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800484a:	692b      	ldr	r3, [r5, #16]
 800484c:	b13b      	cbz	r3, 800485e <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	e844 3200 	strex	r2, r3, [r4]
 800485a:	2a00      	cmp	r2, #0
 800485c:	d1f7      	bne.n	800484e <UART_Start_Receive_DMA+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	f104 0308 	add.w	r3, r4, #8
 8004862:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004866:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	f104 0108 	add.w	r1, r4, #8
 800486e:	e841 3200 	strex	r2, r3, [r1]
 8004872:	2a00      	cmp	r2, #0
 8004874:	d1f3      	bne.n	800485e <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	f104 0308 	add.w	r3, r4, #8
 800487a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800487e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	f104 0208 	add.w	r2, r4, #8
 8004886:	e842 3000 	strex	r0, r3, [r2]
 800488a:	2800      	cmp	r0, #0
 800488c:	d1f3      	bne.n	8004876 <UART_Start_Receive_DMA+0x66>
}
 800488e:	bd38      	pop	{r3, r4, r5, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004890:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8004892:	2320      	movs	r3, #32
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004894:	f8c5 2084 	str.w	r2, [r5, #132]	@ 0x84
      return HAL_ERROR;
 8004898:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800489a:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	08004205 	.word	0x08004205
 80048a4:	080041e5 	.word	0x080041e5
 80048a8:	08003db1 	.word	0x08003db1

080048ac <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop

080048b0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048b0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048b2:	f8d0 6080 	ldr.w	r6, [r0, #128]	@ 0x80
 80048b6:	2e20      	cmp	r6, #32
 80048b8:	d103      	bne.n	80048c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ba:	b101      	cbz	r1, 80048be <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
 80048bc:	b91a      	cbnz	r2, 80048c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
    {
      return HAL_ERROR;
 80048be:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80048c0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80048c2:	2002      	movs	r0, #2
}
 80048c4:	bd70      	pop	{r4, r5, r6, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80048c6:	2301      	movs	r3, #1
 80048c8:	6603      	str	r3, [r0, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ca:	2300      	movs	r3, #0
 80048cc:	6643      	str	r3, [r0, #100]	@ 0x64
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80048ce:	4604      	mov	r4, r0
 80048d0:	f7ff ff9e 	bl	8004810 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d1f3      	bne.n	80048c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d1ef      	bne.n	80048be <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048de:	6822      	ldr	r2, [r4, #0]
 80048e0:	2310      	movs	r3, #16
 80048e2:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e8:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	e842 3100 	strex	r1, r3, [r2]
 80048f0:	2900      	cmp	r1, #0
 80048f2:	d1f7      	bne.n	80048e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
}
 80048f4:	bd70      	pop	{r4, r5, r6, pc}
 80048f6:	bf00      	nop

080048f8 <siprintf>:
 80048f8:	b40e      	push	{r1, r2, r3}
 80048fa:	b500      	push	{lr}
 80048fc:	b09c      	sub	sp, #112	@ 0x70
 80048fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8004900:	9002      	str	r0, [sp, #8]
 8004902:	9006      	str	r0, [sp, #24]
 8004904:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004908:	4809      	ldr	r0, [pc, #36]	@ (8004930 <siprintf+0x38>)
 800490a:	9107      	str	r1, [sp, #28]
 800490c:	9104      	str	r1, [sp, #16]
 800490e:	4909      	ldr	r1, [pc, #36]	@ (8004934 <siprintf+0x3c>)
 8004910:	f853 2b04 	ldr.w	r2, [r3], #4
 8004914:	9105      	str	r1, [sp, #20]
 8004916:	6800      	ldr	r0, [r0, #0]
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	a902      	add	r1, sp, #8
 800491c:	f000 f9a8 	bl	8004c70 <_svfiprintf_r>
 8004920:	9b02      	ldr	r3, [sp, #8]
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	b01c      	add	sp, #112	@ 0x70
 8004928:	f85d eb04 	ldr.w	lr, [sp], #4
 800492c:	b003      	add	sp, #12
 800492e:	4770      	bx	lr
 8004930:	20000024 	.word	0x20000024
 8004934:	ffff0208 	.word	0xffff0208

08004938 <memset>:
 8004938:	4402      	add	r2, r0
 800493a:	4603      	mov	r3, r0
 800493c:	4293      	cmp	r3, r2
 800493e:	d100      	bne.n	8004942 <memset+0xa>
 8004940:	4770      	bx	lr
 8004942:	f803 1b01 	strb.w	r1, [r3], #1
 8004946:	e7f9      	b.n	800493c <memset+0x4>

08004948 <strncpy>:
 8004948:	b510      	push	{r4, lr}
 800494a:	3901      	subs	r1, #1
 800494c:	4603      	mov	r3, r0
 800494e:	b132      	cbz	r2, 800495e <strncpy+0x16>
 8004950:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004954:	f803 4b01 	strb.w	r4, [r3], #1
 8004958:	3a01      	subs	r2, #1
 800495a:	2c00      	cmp	r4, #0
 800495c:	d1f7      	bne.n	800494e <strncpy+0x6>
 800495e:	441a      	add	r2, r3
 8004960:	2100      	movs	r1, #0
 8004962:	4293      	cmp	r3, r2
 8004964:	d100      	bne.n	8004968 <strncpy+0x20>
 8004966:	bd10      	pop	{r4, pc}
 8004968:	f803 1b01 	strb.w	r1, [r3], #1
 800496c:	e7f9      	b.n	8004962 <strncpy+0x1a>
	...

08004970 <__errno>:
 8004970:	4b01      	ldr	r3, [pc, #4]	@ (8004978 <__errno+0x8>)
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000024 	.word	0x20000024

0800497c <__libc_init_array>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	4d0d      	ldr	r5, [pc, #52]	@ (80049b4 <__libc_init_array+0x38>)
 8004980:	4c0d      	ldr	r4, [pc, #52]	@ (80049b8 <__libc_init_array+0x3c>)
 8004982:	1b64      	subs	r4, r4, r5
 8004984:	10a4      	asrs	r4, r4, #2
 8004986:	2600      	movs	r6, #0
 8004988:	42a6      	cmp	r6, r4
 800498a:	d109      	bne.n	80049a0 <__libc_init_array+0x24>
 800498c:	4d0b      	ldr	r5, [pc, #44]	@ (80049bc <__libc_init_array+0x40>)
 800498e:	4c0c      	ldr	r4, [pc, #48]	@ (80049c0 <__libc_init_array+0x44>)
 8004990:	f000 fc66 	bl	8005260 <_init>
 8004994:	1b64      	subs	r4, r4, r5
 8004996:	10a4      	asrs	r4, r4, #2
 8004998:	2600      	movs	r6, #0
 800499a:	42a6      	cmp	r6, r4
 800499c:	d105      	bne.n	80049aa <__libc_init_array+0x2e>
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a4:	4798      	blx	r3
 80049a6:	3601      	adds	r6, #1
 80049a8:	e7ee      	b.n	8004988 <__libc_init_array+0xc>
 80049aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ae:	4798      	blx	r3
 80049b0:	3601      	adds	r6, #1
 80049b2:	e7f2      	b.n	800499a <__libc_init_array+0x1e>
 80049b4:	08005520 	.word	0x08005520
 80049b8:	08005520 	.word	0x08005520
 80049bc:	08005520 	.word	0x08005520
 80049c0:	08005528 	.word	0x08005528

080049c4 <__retarget_lock_acquire_recursive>:
 80049c4:	4770      	bx	lr

080049c6 <__retarget_lock_release_recursive>:
 80049c6:	4770      	bx	lr

080049c8 <_free_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4605      	mov	r5, r0
 80049cc:	2900      	cmp	r1, #0
 80049ce:	d041      	beq.n	8004a54 <_free_r+0x8c>
 80049d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049d4:	1f0c      	subs	r4, r1, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfb8      	it	lt
 80049da:	18e4      	addlt	r4, r4, r3
 80049dc:	f000 f8e0 	bl	8004ba0 <__malloc_lock>
 80049e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a58 <_free_r+0x90>)
 80049e2:	6813      	ldr	r3, [r2, #0]
 80049e4:	b933      	cbnz	r3, 80049f4 <_free_r+0x2c>
 80049e6:	6063      	str	r3, [r4, #4]
 80049e8:	6014      	str	r4, [r2, #0]
 80049ea:	4628      	mov	r0, r5
 80049ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049f0:	f000 b8dc 	b.w	8004bac <__malloc_unlock>
 80049f4:	42a3      	cmp	r3, r4
 80049f6:	d908      	bls.n	8004a0a <_free_r+0x42>
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	1821      	adds	r1, r4, r0
 80049fc:	428b      	cmp	r3, r1
 80049fe:	bf01      	itttt	eq
 8004a00:	6819      	ldreq	r1, [r3, #0]
 8004a02:	685b      	ldreq	r3, [r3, #4]
 8004a04:	1809      	addeq	r1, r1, r0
 8004a06:	6021      	streq	r1, [r4, #0]
 8004a08:	e7ed      	b.n	80049e6 <_free_r+0x1e>
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	b10b      	cbz	r3, 8004a14 <_free_r+0x4c>
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	d9fa      	bls.n	8004a0a <_free_r+0x42>
 8004a14:	6811      	ldr	r1, [r2, #0]
 8004a16:	1850      	adds	r0, r2, r1
 8004a18:	42a0      	cmp	r0, r4
 8004a1a:	d10b      	bne.n	8004a34 <_free_r+0x6c>
 8004a1c:	6820      	ldr	r0, [r4, #0]
 8004a1e:	4401      	add	r1, r0
 8004a20:	1850      	adds	r0, r2, r1
 8004a22:	4283      	cmp	r3, r0
 8004a24:	6011      	str	r1, [r2, #0]
 8004a26:	d1e0      	bne.n	80049ea <_free_r+0x22>
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	6053      	str	r3, [r2, #4]
 8004a2e:	4408      	add	r0, r1
 8004a30:	6010      	str	r0, [r2, #0]
 8004a32:	e7da      	b.n	80049ea <_free_r+0x22>
 8004a34:	d902      	bls.n	8004a3c <_free_r+0x74>
 8004a36:	230c      	movs	r3, #12
 8004a38:	602b      	str	r3, [r5, #0]
 8004a3a:	e7d6      	b.n	80049ea <_free_r+0x22>
 8004a3c:	6820      	ldr	r0, [r4, #0]
 8004a3e:	1821      	adds	r1, r4, r0
 8004a40:	428b      	cmp	r3, r1
 8004a42:	bf04      	itt	eq
 8004a44:	6819      	ldreq	r1, [r3, #0]
 8004a46:	685b      	ldreq	r3, [r3, #4]
 8004a48:	6063      	str	r3, [r4, #4]
 8004a4a:	bf04      	itt	eq
 8004a4c:	1809      	addeq	r1, r1, r0
 8004a4e:	6021      	streq	r1, [r4, #0]
 8004a50:	6054      	str	r4, [r2, #4]
 8004a52:	e7ca      	b.n	80049ea <_free_r+0x22>
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
 8004a56:	bf00      	nop
 8004a58:	20000e78 	.word	0x20000e78

08004a5c <sbrk_aligned>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8004a9c <sbrk_aligned+0x40>)
 8004a60:	460c      	mov	r4, r1
 8004a62:	6831      	ldr	r1, [r6, #0]
 8004a64:	4605      	mov	r5, r0
 8004a66:	b911      	cbnz	r1, 8004a6e <sbrk_aligned+0x12>
 8004a68:	f000 fba6 	bl	80051b8 <_sbrk_r>
 8004a6c:	6030      	str	r0, [r6, #0]
 8004a6e:	4621      	mov	r1, r4
 8004a70:	4628      	mov	r0, r5
 8004a72:	f000 fba1 	bl	80051b8 <_sbrk_r>
 8004a76:	1c43      	adds	r3, r0, #1
 8004a78:	d103      	bne.n	8004a82 <sbrk_aligned+0x26>
 8004a7a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a7e:	4620      	mov	r0, r4
 8004a80:	bd70      	pop	{r4, r5, r6, pc}
 8004a82:	1cc4      	adds	r4, r0, #3
 8004a84:	f024 0403 	bic.w	r4, r4, #3
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d0f8      	beq.n	8004a7e <sbrk_aligned+0x22>
 8004a8c:	1a21      	subs	r1, r4, r0
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f000 fb92 	bl	80051b8 <_sbrk_r>
 8004a94:	3001      	adds	r0, #1
 8004a96:	d1f2      	bne.n	8004a7e <sbrk_aligned+0x22>
 8004a98:	e7ef      	b.n	8004a7a <sbrk_aligned+0x1e>
 8004a9a:	bf00      	nop
 8004a9c:	20000e74 	.word	0x20000e74

08004aa0 <_malloc_r>:
 8004aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa4:	1ccd      	adds	r5, r1, #3
 8004aa6:	f025 0503 	bic.w	r5, r5, #3
 8004aaa:	3508      	adds	r5, #8
 8004aac:	2d0c      	cmp	r5, #12
 8004aae:	bf38      	it	cc
 8004ab0:	250c      	movcc	r5, #12
 8004ab2:	2d00      	cmp	r5, #0
 8004ab4:	4606      	mov	r6, r0
 8004ab6:	db01      	blt.n	8004abc <_malloc_r+0x1c>
 8004ab8:	42a9      	cmp	r1, r5
 8004aba:	d904      	bls.n	8004ac6 <_malloc_r+0x26>
 8004abc:	230c      	movs	r3, #12
 8004abe:	6033      	str	r3, [r6, #0]
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b9c <_malloc_r+0xfc>
 8004aca:	f000 f869 	bl	8004ba0 <__malloc_lock>
 8004ace:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad2:	461c      	mov	r4, r3
 8004ad4:	bb44      	cbnz	r4, 8004b28 <_malloc_r+0x88>
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7ff ffbf 	bl	8004a5c <sbrk_aligned>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	d158      	bne.n	8004b96 <_malloc_r+0xf6>
 8004ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ae8:	4627      	mov	r7, r4
 8004aea:	2f00      	cmp	r7, #0
 8004aec:	d143      	bne.n	8004b76 <_malloc_r+0xd6>
 8004aee:	2c00      	cmp	r4, #0
 8004af0:	d04b      	beq.n	8004b8a <_malloc_r+0xea>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	4639      	mov	r1, r7
 8004af6:	4630      	mov	r0, r6
 8004af8:	eb04 0903 	add.w	r9, r4, r3
 8004afc:	f000 fb5c 	bl	80051b8 <_sbrk_r>
 8004b00:	4581      	cmp	r9, r0
 8004b02:	d142      	bne.n	8004b8a <_malloc_r+0xea>
 8004b04:	6821      	ldr	r1, [r4, #0]
 8004b06:	1a6d      	subs	r5, r5, r1
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f7ff ffa6 	bl	8004a5c <sbrk_aligned>
 8004b10:	3001      	adds	r0, #1
 8004b12:	d03a      	beq.n	8004b8a <_malloc_r+0xea>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	442b      	add	r3, r5
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	bb62      	cbnz	r2, 8004b7c <_malloc_r+0xdc>
 8004b22:	f8c8 7000 	str.w	r7, [r8]
 8004b26:	e00f      	b.n	8004b48 <_malloc_r+0xa8>
 8004b28:	6822      	ldr	r2, [r4, #0]
 8004b2a:	1b52      	subs	r2, r2, r5
 8004b2c:	d420      	bmi.n	8004b70 <_malloc_r+0xd0>
 8004b2e:	2a0b      	cmp	r2, #11
 8004b30:	d917      	bls.n	8004b62 <_malloc_r+0xc2>
 8004b32:	1961      	adds	r1, r4, r5
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	6025      	str	r5, [r4, #0]
 8004b38:	bf18      	it	ne
 8004b3a:	6059      	strne	r1, [r3, #4]
 8004b3c:	6863      	ldr	r3, [r4, #4]
 8004b3e:	bf08      	it	eq
 8004b40:	f8c8 1000 	streq.w	r1, [r8]
 8004b44:	5162      	str	r2, [r4, r5]
 8004b46:	604b      	str	r3, [r1, #4]
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f000 f82f 	bl	8004bac <__malloc_unlock>
 8004b4e:	f104 000b 	add.w	r0, r4, #11
 8004b52:	1d23      	adds	r3, r4, #4
 8004b54:	f020 0007 	bic.w	r0, r0, #7
 8004b58:	1ac2      	subs	r2, r0, r3
 8004b5a:	bf1c      	itt	ne
 8004b5c:	1a1b      	subne	r3, r3, r0
 8004b5e:	50a3      	strne	r3, [r4, r2]
 8004b60:	e7af      	b.n	8004ac2 <_malloc_r+0x22>
 8004b62:	6862      	ldr	r2, [r4, #4]
 8004b64:	42a3      	cmp	r3, r4
 8004b66:	bf0c      	ite	eq
 8004b68:	f8c8 2000 	streq.w	r2, [r8]
 8004b6c:	605a      	strne	r2, [r3, #4]
 8004b6e:	e7eb      	b.n	8004b48 <_malloc_r+0xa8>
 8004b70:	4623      	mov	r3, r4
 8004b72:	6864      	ldr	r4, [r4, #4]
 8004b74:	e7ae      	b.n	8004ad4 <_malloc_r+0x34>
 8004b76:	463c      	mov	r4, r7
 8004b78:	687f      	ldr	r7, [r7, #4]
 8004b7a:	e7b6      	b.n	8004aea <_malloc_r+0x4a>
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	d1fb      	bne.n	8004b7c <_malloc_r+0xdc>
 8004b84:	2300      	movs	r3, #0
 8004b86:	6053      	str	r3, [r2, #4]
 8004b88:	e7de      	b.n	8004b48 <_malloc_r+0xa8>
 8004b8a:	230c      	movs	r3, #12
 8004b8c:	6033      	str	r3, [r6, #0]
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f000 f80c 	bl	8004bac <__malloc_unlock>
 8004b94:	e794      	b.n	8004ac0 <_malloc_r+0x20>
 8004b96:	6005      	str	r5, [r0, #0]
 8004b98:	e7d6      	b.n	8004b48 <_malloc_r+0xa8>
 8004b9a:	bf00      	nop
 8004b9c:	20000e78 	.word	0x20000e78

08004ba0 <__malloc_lock>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	@ (8004ba8 <__malloc_lock+0x8>)
 8004ba2:	f7ff bf0f 	b.w	80049c4 <__retarget_lock_acquire_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20000e70 	.word	0x20000e70

08004bac <__malloc_unlock>:
 8004bac:	4801      	ldr	r0, [pc, #4]	@ (8004bb4 <__malloc_unlock+0x8>)
 8004bae:	f7ff bf0a 	b.w	80049c6 <__retarget_lock_release_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	20000e70 	.word	0x20000e70

08004bb8 <__ssputs_r>:
 8004bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	688e      	ldr	r6, [r1, #8]
 8004bbe:	461f      	mov	r7, r3
 8004bc0:	42be      	cmp	r6, r7
 8004bc2:	680b      	ldr	r3, [r1, #0]
 8004bc4:	4682      	mov	sl, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	4690      	mov	r8, r2
 8004bca:	d82d      	bhi.n	8004c28 <__ssputs_r+0x70>
 8004bcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004bd4:	d026      	beq.n	8004c24 <__ssputs_r+0x6c>
 8004bd6:	6965      	ldr	r5, [r4, #20]
 8004bd8:	6909      	ldr	r1, [r1, #16]
 8004bda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bde:	eba3 0901 	sub.w	r9, r3, r1
 8004be2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004be6:	1c7b      	adds	r3, r7, #1
 8004be8:	444b      	add	r3, r9
 8004bea:	106d      	asrs	r5, r5, #1
 8004bec:	429d      	cmp	r5, r3
 8004bee:	bf38      	it	cc
 8004bf0:	461d      	movcc	r5, r3
 8004bf2:	0553      	lsls	r3, r2, #21
 8004bf4:	d527      	bpl.n	8004c46 <__ssputs_r+0x8e>
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f7ff ff52 	bl	8004aa0 <_malloc_r>
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	b360      	cbz	r0, 8004c5a <__ssputs_r+0xa2>
 8004c00:	6921      	ldr	r1, [r4, #16]
 8004c02:	464a      	mov	r2, r9
 8004c04:	f000 fae8 	bl	80051d8 <memcpy>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c12:	81a3      	strh	r3, [r4, #12]
 8004c14:	6126      	str	r6, [r4, #16]
 8004c16:	6165      	str	r5, [r4, #20]
 8004c18:	444e      	add	r6, r9
 8004c1a:	eba5 0509 	sub.w	r5, r5, r9
 8004c1e:	6026      	str	r6, [r4, #0]
 8004c20:	60a5      	str	r5, [r4, #8]
 8004c22:	463e      	mov	r6, r7
 8004c24:	42be      	cmp	r6, r7
 8004c26:	d900      	bls.n	8004c2a <__ssputs_r+0x72>
 8004c28:	463e      	mov	r6, r7
 8004c2a:	6820      	ldr	r0, [r4, #0]
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	4641      	mov	r1, r8
 8004c30:	f000 faa8 	bl	8005184 <memmove>
 8004c34:	68a3      	ldr	r3, [r4, #8]
 8004c36:	1b9b      	subs	r3, r3, r6
 8004c38:	60a3      	str	r3, [r4, #8]
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	4433      	add	r3, r6
 8004c3e:	6023      	str	r3, [r4, #0]
 8004c40:	2000      	movs	r0, #0
 8004c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c46:	462a      	mov	r2, r5
 8004c48:	f000 fad4 	bl	80051f4 <_realloc_r>
 8004c4c:	4606      	mov	r6, r0
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d1e0      	bne.n	8004c14 <__ssputs_r+0x5c>
 8004c52:	6921      	ldr	r1, [r4, #16]
 8004c54:	4650      	mov	r0, sl
 8004c56:	f7ff feb7 	bl	80049c8 <_free_r>
 8004c5a:	230c      	movs	r3, #12
 8004c5c:	f8ca 3000 	str.w	r3, [sl]
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c66:	81a3      	strh	r3, [r4, #12]
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	e7e9      	b.n	8004c42 <__ssputs_r+0x8a>
	...

08004c70 <_svfiprintf_r>:
 8004c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c74:	4698      	mov	r8, r3
 8004c76:	898b      	ldrh	r3, [r1, #12]
 8004c78:	061b      	lsls	r3, r3, #24
 8004c7a:	b09d      	sub	sp, #116	@ 0x74
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	460d      	mov	r5, r1
 8004c80:	4614      	mov	r4, r2
 8004c82:	d510      	bpl.n	8004ca6 <_svfiprintf_r+0x36>
 8004c84:	690b      	ldr	r3, [r1, #16]
 8004c86:	b973      	cbnz	r3, 8004ca6 <_svfiprintf_r+0x36>
 8004c88:	2140      	movs	r1, #64	@ 0x40
 8004c8a:	f7ff ff09 	bl	8004aa0 <_malloc_r>
 8004c8e:	6028      	str	r0, [r5, #0]
 8004c90:	6128      	str	r0, [r5, #16]
 8004c92:	b930      	cbnz	r0, 8004ca2 <_svfiprintf_r+0x32>
 8004c94:	230c      	movs	r3, #12
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	b01d      	add	sp, #116	@ 0x74
 8004c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca2:	2340      	movs	r3, #64	@ 0x40
 8004ca4:	616b      	str	r3, [r5, #20]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004caa:	2320      	movs	r3, #32
 8004cac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cb4:	2330      	movs	r3, #48	@ 0x30
 8004cb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e54 <_svfiprintf_r+0x1e4>
 8004cba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cbe:	f04f 0901 	mov.w	r9, #1
 8004cc2:	4623      	mov	r3, r4
 8004cc4:	469a      	mov	sl, r3
 8004cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cca:	b10a      	cbz	r2, 8004cd0 <_svfiprintf_r+0x60>
 8004ccc:	2a25      	cmp	r2, #37	@ 0x25
 8004cce:	d1f9      	bne.n	8004cc4 <_svfiprintf_r+0x54>
 8004cd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004cd4:	d00b      	beq.n	8004cee <_svfiprintf_r+0x7e>
 8004cd6:	465b      	mov	r3, fp
 8004cd8:	4622      	mov	r2, r4
 8004cda:	4629      	mov	r1, r5
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f7ff ff6b 	bl	8004bb8 <__ssputs_r>
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f000 80a7 	beq.w	8004e36 <_svfiprintf_r+0x1c6>
 8004ce8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cea:	445a      	add	r2, fp
 8004cec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cee:	f89a 3000 	ldrb.w	r3, [sl]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 809f 	beq.w	8004e36 <_svfiprintf_r+0x1c6>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d02:	f10a 0a01 	add.w	sl, sl, #1
 8004d06:	9304      	str	r3, [sp, #16]
 8004d08:	9307      	str	r3, [sp, #28]
 8004d0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d10:	4654      	mov	r4, sl
 8004d12:	2205      	movs	r2, #5
 8004d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d18:	484e      	ldr	r0, [pc, #312]	@ (8004e54 <_svfiprintf_r+0x1e4>)
 8004d1a:	f7fb fa59 	bl	80001d0 <memchr>
 8004d1e:	9a04      	ldr	r2, [sp, #16]
 8004d20:	b9d8      	cbnz	r0, 8004d5a <_svfiprintf_r+0xea>
 8004d22:	06d0      	lsls	r0, r2, #27
 8004d24:	bf44      	itt	mi
 8004d26:	2320      	movmi	r3, #32
 8004d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d2c:	0711      	lsls	r1, r2, #28
 8004d2e:	bf44      	itt	mi
 8004d30:	232b      	movmi	r3, #43	@ 0x2b
 8004d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d36:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d3c:	d015      	beq.n	8004d6a <_svfiprintf_r+0xfa>
 8004d3e:	9a07      	ldr	r2, [sp, #28]
 8004d40:	4654      	mov	r4, sl
 8004d42:	2000      	movs	r0, #0
 8004d44:	f04f 0c0a 	mov.w	ip, #10
 8004d48:	4621      	mov	r1, r4
 8004d4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d4e:	3b30      	subs	r3, #48	@ 0x30
 8004d50:	2b09      	cmp	r3, #9
 8004d52:	d94b      	bls.n	8004dec <_svfiprintf_r+0x17c>
 8004d54:	b1b0      	cbz	r0, 8004d84 <_svfiprintf_r+0x114>
 8004d56:	9207      	str	r2, [sp, #28]
 8004d58:	e014      	b.n	8004d84 <_svfiprintf_r+0x114>
 8004d5a:	eba0 0308 	sub.w	r3, r0, r8
 8004d5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d62:	4313      	orrs	r3, r2
 8004d64:	9304      	str	r3, [sp, #16]
 8004d66:	46a2      	mov	sl, r4
 8004d68:	e7d2      	b.n	8004d10 <_svfiprintf_r+0xa0>
 8004d6a:	9b03      	ldr	r3, [sp, #12]
 8004d6c:	1d19      	adds	r1, r3, #4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	9103      	str	r1, [sp, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bfbb      	ittet	lt
 8004d76:	425b      	neglt	r3, r3
 8004d78:	f042 0202 	orrlt.w	r2, r2, #2
 8004d7c:	9307      	strge	r3, [sp, #28]
 8004d7e:	9307      	strlt	r3, [sp, #28]
 8004d80:	bfb8      	it	lt
 8004d82:	9204      	strlt	r2, [sp, #16]
 8004d84:	7823      	ldrb	r3, [r4, #0]
 8004d86:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d88:	d10a      	bne.n	8004da0 <_svfiprintf_r+0x130>
 8004d8a:	7863      	ldrb	r3, [r4, #1]
 8004d8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d8e:	d132      	bne.n	8004df6 <_svfiprintf_r+0x186>
 8004d90:	9b03      	ldr	r3, [sp, #12]
 8004d92:	1d1a      	adds	r2, r3, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	9203      	str	r2, [sp, #12]
 8004d98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d9c:	3402      	adds	r4, #2
 8004d9e:	9305      	str	r3, [sp, #20]
 8004da0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e64 <_svfiprintf_r+0x1f4>
 8004da4:	7821      	ldrb	r1, [r4, #0]
 8004da6:	2203      	movs	r2, #3
 8004da8:	4650      	mov	r0, sl
 8004daa:	f7fb fa11 	bl	80001d0 <memchr>
 8004dae:	b138      	cbz	r0, 8004dc0 <_svfiprintf_r+0x150>
 8004db0:	9b04      	ldr	r3, [sp, #16]
 8004db2:	eba0 000a 	sub.w	r0, r0, sl
 8004db6:	2240      	movs	r2, #64	@ 0x40
 8004db8:	4082      	lsls	r2, r0
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	3401      	adds	r4, #1
 8004dbe:	9304      	str	r3, [sp, #16]
 8004dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dc4:	4824      	ldr	r0, [pc, #144]	@ (8004e58 <_svfiprintf_r+0x1e8>)
 8004dc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004dca:	2206      	movs	r2, #6
 8004dcc:	f7fb fa00 	bl	80001d0 <memchr>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d036      	beq.n	8004e42 <_svfiprintf_r+0x1d2>
 8004dd4:	4b21      	ldr	r3, [pc, #132]	@ (8004e5c <_svfiprintf_r+0x1ec>)
 8004dd6:	bb1b      	cbnz	r3, 8004e20 <_svfiprintf_r+0x1b0>
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	3307      	adds	r3, #7
 8004ddc:	f023 0307 	bic.w	r3, r3, #7
 8004de0:	3308      	adds	r3, #8
 8004de2:	9303      	str	r3, [sp, #12]
 8004de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004de6:	4433      	add	r3, r6
 8004de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dea:	e76a      	b.n	8004cc2 <_svfiprintf_r+0x52>
 8004dec:	fb0c 3202 	mla	r2, ip, r2, r3
 8004df0:	460c      	mov	r4, r1
 8004df2:	2001      	movs	r0, #1
 8004df4:	e7a8      	b.n	8004d48 <_svfiprintf_r+0xd8>
 8004df6:	2300      	movs	r3, #0
 8004df8:	3401      	adds	r4, #1
 8004dfa:	9305      	str	r3, [sp, #20]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	f04f 0c0a 	mov.w	ip, #10
 8004e02:	4620      	mov	r0, r4
 8004e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e08:	3a30      	subs	r2, #48	@ 0x30
 8004e0a:	2a09      	cmp	r2, #9
 8004e0c:	d903      	bls.n	8004e16 <_svfiprintf_r+0x1a6>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0c6      	beq.n	8004da0 <_svfiprintf_r+0x130>
 8004e12:	9105      	str	r1, [sp, #20]
 8004e14:	e7c4      	b.n	8004da0 <_svfiprintf_r+0x130>
 8004e16:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e7f0      	b.n	8004e02 <_svfiprintf_r+0x192>
 8004e20:	ab03      	add	r3, sp, #12
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	462a      	mov	r2, r5
 8004e26:	4b0e      	ldr	r3, [pc, #56]	@ (8004e60 <_svfiprintf_r+0x1f0>)
 8004e28:	a904      	add	r1, sp, #16
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f3af 8000 	nop.w
 8004e30:	1c42      	adds	r2, r0, #1
 8004e32:	4606      	mov	r6, r0
 8004e34:	d1d6      	bne.n	8004de4 <_svfiprintf_r+0x174>
 8004e36:	89ab      	ldrh	r3, [r5, #12]
 8004e38:	065b      	lsls	r3, r3, #25
 8004e3a:	f53f af2d 	bmi.w	8004c98 <_svfiprintf_r+0x28>
 8004e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e40:	e72c      	b.n	8004c9c <_svfiprintf_r+0x2c>
 8004e42:	ab03      	add	r3, sp, #12
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	462a      	mov	r2, r5
 8004e48:	4b05      	ldr	r3, [pc, #20]	@ (8004e60 <_svfiprintf_r+0x1f0>)
 8004e4a:	a904      	add	r1, sp, #16
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	f000 f879 	bl	8004f44 <_printf_i>
 8004e52:	e7ed      	b.n	8004e30 <_svfiprintf_r+0x1c0>
 8004e54:	080054e4 	.word	0x080054e4
 8004e58:	080054ee 	.word	0x080054ee
 8004e5c:	00000000 	.word	0x00000000
 8004e60:	08004bb9 	.word	0x08004bb9
 8004e64:	080054ea 	.word	0x080054ea

08004e68 <_printf_common>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	4616      	mov	r6, r2
 8004e6e:	4698      	mov	r8, r3
 8004e70:	688a      	ldr	r2, [r1, #8]
 8004e72:	690b      	ldr	r3, [r1, #16]
 8004e74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	bfb8      	it	lt
 8004e7c:	4613      	movlt	r3, r2
 8004e7e:	6033      	str	r3, [r6, #0]
 8004e80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e84:	4607      	mov	r7, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	b10a      	cbz	r2, 8004e8e <_printf_common+0x26>
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	6033      	str	r3, [r6, #0]
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	0699      	lsls	r1, r3, #26
 8004e92:	bf42      	ittt	mi
 8004e94:	6833      	ldrmi	r3, [r6, #0]
 8004e96:	3302      	addmi	r3, #2
 8004e98:	6033      	strmi	r3, [r6, #0]
 8004e9a:	6825      	ldr	r5, [r4, #0]
 8004e9c:	f015 0506 	ands.w	r5, r5, #6
 8004ea0:	d106      	bne.n	8004eb0 <_printf_common+0x48>
 8004ea2:	f104 0a19 	add.w	sl, r4, #25
 8004ea6:	68e3      	ldr	r3, [r4, #12]
 8004ea8:	6832      	ldr	r2, [r6, #0]
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	42ab      	cmp	r3, r5
 8004eae:	dc26      	bgt.n	8004efe <_printf_common+0x96>
 8004eb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004eb4:	6822      	ldr	r2, [r4, #0]
 8004eb6:	3b00      	subs	r3, #0
 8004eb8:	bf18      	it	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	0692      	lsls	r2, r2, #26
 8004ebe:	d42b      	bmi.n	8004f18 <_printf_common+0xb0>
 8004ec0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	47c8      	blx	r9
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d01e      	beq.n	8004f0c <_printf_common+0xa4>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	6922      	ldr	r2, [r4, #16]
 8004ed2:	f003 0306 	and.w	r3, r3, #6
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	bf02      	ittt	eq
 8004eda:	68e5      	ldreq	r5, [r4, #12]
 8004edc:	6833      	ldreq	r3, [r6, #0]
 8004ede:	1aed      	subeq	r5, r5, r3
 8004ee0:	68a3      	ldr	r3, [r4, #8]
 8004ee2:	bf0c      	ite	eq
 8004ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee8:	2500      	movne	r5, #0
 8004eea:	4293      	cmp	r3, r2
 8004eec:	bfc4      	itt	gt
 8004eee:	1a9b      	subgt	r3, r3, r2
 8004ef0:	18ed      	addgt	r5, r5, r3
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	341a      	adds	r4, #26
 8004ef6:	42b5      	cmp	r5, r6
 8004ef8:	d11a      	bne.n	8004f30 <_printf_common+0xc8>
 8004efa:	2000      	movs	r0, #0
 8004efc:	e008      	b.n	8004f10 <_printf_common+0xa8>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4652      	mov	r2, sl
 8004f02:	4641      	mov	r1, r8
 8004f04:	4638      	mov	r0, r7
 8004f06:	47c8      	blx	r9
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d103      	bne.n	8004f14 <_printf_common+0xac>
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f14:	3501      	adds	r5, #1
 8004f16:	e7c6      	b.n	8004ea6 <_printf_common+0x3e>
 8004f18:	18e1      	adds	r1, r4, r3
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	2030      	movs	r0, #48	@ 0x30
 8004f1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f22:	4422      	add	r2, r4
 8004f24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	e7c7      	b.n	8004ec0 <_printf_common+0x58>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4622      	mov	r2, r4
 8004f34:	4641      	mov	r1, r8
 8004f36:	4638      	mov	r0, r7
 8004f38:	47c8      	blx	r9
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d0e6      	beq.n	8004f0c <_printf_common+0xa4>
 8004f3e:	3601      	adds	r6, #1
 8004f40:	e7d9      	b.n	8004ef6 <_printf_common+0x8e>
	...

08004f44 <_printf_i>:
 8004f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f48:	7e0f      	ldrb	r7, [r1, #24]
 8004f4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f4c:	2f78      	cmp	r7, #120	@ 0x78
 8004f4e:	4691      	mov	r9, r2
 8004f50:	4680      	mov	r8, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	469a      	mov	sl, r3
 8004f56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f5a:	d807      	bhi.n	8004f6c <_printf_i+0x28>
 8004f5c:	2f62      	cmp	r7, #98	@ 0x62
 8004f5e:	d80a      	bhi.n	8004f76 <_printf_i+0x32>
 8004f60:	2f00      	cmp	r7, #0
 8004f62:	f000 80d2 	beq.w	800510a <_printf_i+0x1c6>
 8004f66:	2f58      	cmp	r7, #88	@ 0x58
 8004f68:	f000 80b9 	beq.w	80050de <_printf_i+0x19a>
 8004f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f74:	e03a      	b.n	8004fec <_printf_i+0xa8>
 8004f76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f7a:	2b15      	cmp	r3, #21
 8004f7c:	d8f6      	bhi.n	8004f6c <_printf_i+0x28>
 8004f7e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f84 <_printf_i+0x40>)
 8004f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f84:	08004fdd 	.word	0x08004fdd
 8004f88:	08004ff1 	.word	0x08004ff1
 8004f8c:	08004f6d 	.word	0x08004f6d
 8004f90:	08004f6d 	.word	0x08004f6d
 8004f94:	08004f6d 	.word	0x08004f6d
 8004f98:	08004f6d 	.word	0x08004f6d
 8004f9c:	08004ff1 	.word	0x08004ff1
 8004fa0:	08004f6d 	.word	0x08004f6d
 8004fa4:	08004f6d 	.word	0x08004f6d
 8004fa8:	08004f6d 	.word	0x08004f6d
 8004fac:	08004f6d 	.word	0x08004f6d
 8004fb0:	080050f1 	.word	0x080050f1
 8004fb4:	0800501b 	.word	0x0800501b
 8004fb8:	080050ab 	.word	0x080050ab
 8004fbc:	08004f6d 	.word	0x08004f6d
 8004fc0:	08004f6d 	.word	0x08004f6d
 8004fc4:	08005113 	.word	0x08005113
 8004fc8:	08004f6d 	.word	0x08004f6d
 8004fcc:	0800501b 	.word	0x0800501b
 8004fd0:	08004f6d 	.word	0x08004f6d
 8004fd4:	08004f6d 	.word	0x08004f6d
 8004fd8:	080050b3 	.word	0x080050b3
 8004fdc:	6833      	ldr	r3, [r6, #0]
 8004fde:	1d1a      	adds	r2, r3, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6032      	str	r2, [r6, #0]
 8004fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fe8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fec:	2301      	movs	r3, #1
 8004fee:	e09d      	b.n	800512c <_printf_i+0x1e8>
 8004ff0:	6833      	ldr	r3, [r6, #0]
 8004ff2:	6820      	ldr	r0, [r4, #0]
 8004ff4:	1d19      	adds	r1, r3, #4
 8004ff6:	6031      	str	r1, [r6, #0]
 8004ff8:	0606      	lsls	r6, r0, #24
 8004ffa:	d501      	bpl.n	8005000 <_printf_i+0xbc>
 8004ffc:	681d      	ldr	r5, [r3, #0]
 8004ffe:	e003      	b.n	8005008 <_printf_i+0xc4>
 8005000:	0645      	lsls	r5, r0, #25
 8005002:	d5fb      	bpl.n	8004ffc <_printf_i+0xb8>
 8005004:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005008:	2d00      	cmp	r5, #0
 800500a:	da03      	bge.n	8005014 <_printf_i+0xd0>
 800500c:	232d      	movs	r3, #45	@ 0x2d
 800500e:	426d      	negs	r5, r5
 8005010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005014:	4859      	ldr	r0, [pc, #356]	@ (800517c <_printf_i+0x238>)
 8005016:	230a      	movs	r3, #10
 8005018:	e011      	b.n	800503e <_printf_i+0xfa>
 800501a:	6821      	ldr	r1, [r4, #0]
 800501c:	6833      	ldr	r3, [r6, #0]
 800501e:	0608      	lsls	r0, r1, #24
 8005020:	f853 5b04 	ldr.w	r5, [r3], #4
 8005024:	d402      	bmi.n	800502c <_printf_i+0xe8>
 8005026:	0649      	lsls	r1, r1, #25
 8005028:	bf48      	it	mi
 800502a:	b2ad      	uxthmi	r5, r5
 800502c:	2f6f      	cmp	r7, #111	@ 0x6f
 800502e:	4853      	ldr	r0, [pc, #332]	@ (800517c <_printf_i+0x238>)
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	bf14      	ite	ne
 8005034:	230a      	movne	r3, #10
 8005036:	2308      	moveq	r3, #8
 8005038:	2100      	movs	r1, #0
 800503a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800503e:	6866      	ldr	r6, [r4, #4]
 8005040:	60a6      	str	r6, [r4, #8]
 8005042:	2e00      	cmp	r6, #0
 8005044:	bfa2      	ittt	ge
 8005046:	6821      	ldrge	r1, [r4, #0]
 8005048:	f021 0104 	bicge.w	r1, r1, #4
 800504c:	6021      	strge	r1, [r4, #0]
 800504e:	b90d      	cbnz	r5, 8005054 <_printf_i+0x110>
 8005050:	2e00      	cmp	r6, #0
 8005052:	d04b      	beq.n	80050ec <_printf_i+0x1a8>
 8005054:	4616      	mov	r6, r2
 8005056:	fbb5 f1f3 	udiv	r1, r5, r3
 800505a:	fb03 5711 	mls	r7, r3, r1, r5
 800505e:	5dc7      	ldrb	r7, [r0, r7]
 8005060:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005064:	462f      	mov	r7, r5
 8005066:	42bb      	cmp	r3, r7
 8005068:	460d      	mov	r5, r1
 800506a:	d9f4      	bls.n	8005056 <_printf_i+0x112>
 800506c:	2b08      	cmp	r3, #8
 800506e:	d10b      	bne.n	8005088 <_printf_i+0x144>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	07df      	lsls	r7, r3, #31
 8005074:	d508      	bpl.n	8005088 <_printf_i+0x144>
 8005076:	6923      	ldr	r3, [r4, #16]
 8005078:	6861      	ldr	r1, [r4, #4]
 800507a:	4299      	cmp	r1, r3
 800507c:	bfde      	ittt	le
 800507e:	2330      	movle	r3, #48	@ 0x30
 8005080:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005084:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005088:	1b92      	subs	r2, r2, r6
 800508a:	6122      	str	r2, [r4, #16]
 800508c:	f8cd a000 	str.w	sl, [sp]
 8005090:	464b      	mov	r3, r9
 8005092:	aa03      	add	r2, sp, #12
 8005094:	4621      	mov	r1, r4
 8005096:	4640      	mov	r0, r8
 8005098:	f7ff fee6 	bl	8004e68 <_printf_common>
 800509c:	3001      	adds	r0, #1
 800509e:	d14a      	bne.n	8005136 <_printf_i+0x1f2>
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	b004      	add	sp, #16
 80050a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	f043 0320 	orr.w	r3, r3, #32
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	4833      	ldr	r0, [pc, #204]	@ (8005180 <_printf_i+0x23c>)
 80050b4:	2778      	movs	r7, #120	@ 0x78
 80050b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	6831      	ldr	r1, [r6, #0]
 80050be:	061f      	lsls	r7, r3, #24
 80050c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80050c4:	d402      	bmi.n	80050cc <_printf_i+0x188>
 80050c6:	065f      	lsls	r7, r3, #25
 80050c8:	bf48      	it	mi
 80050ca:	b2ad      	uxthmi	r5, r5
 80050cc:	6031      	str	r1, [r6, #0]
 80050ce:	07d9      	lsls	r1, r3, #31
 80050d0:	bf44      	itt	mi
 80050d2:	f043 0320 	orrmi.w	r3, r3, #32
 80050d6:	6023      	strmi	r3, [r4, #0]
 80050d8:	b11d      	cbz	r5, 80050e2 <_printf_i+0x19e>
 80050da:	2310      	movs	r3, #16
 80050dc:	e7ac      	b.n	8005038 <_printf_i+0xf4>
 80050de:	4827      	ldr	r0, [pc, #156]	@ (800517c <_printf_i+0x238>)
 80050e0:	e7e9      	b.n	80050b6 <_printf_i+0x172>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	f023 0320 	bic.w	r3, r3, #32
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	e7f6      	b.n	80050da <_printf_i+0x196>
 80050ec:	4616      	mov	r6, r2
 80050ee:	e7bd      	b.n	800506c <_printf_i+0x128>
 80050f0:	6833      	ldr	r3, [r6, #0]
 80050f2:	6825      	ldr	r5, [r4, #0]
 80050f4:	6961      	ldr	r1, [r4, #20]
 80050f6:	1d18      	adds	r0, r3, #4
 80050f8:	6030      	str	r0, [r6, #0]
 80050fa:	062e      	lsls	r6, r5, #24
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	d501      	bpl.n	8005104 <_printf_i+0x1c0>
 8005100:	6019      	str	r1, [r3, #0]
 8005102:	e002      	b.n	800510a <_printf_i+0x1c6>
 8005104:	0668      	lsls	r0, r5, #25
 8005106:	d5fb      	bpl.n	8005100 <_printf_i+0x1bc>
 8005108:	8019      	strh	r1, [r3, #0]
 800510a:	2300      	movs	r3, #0
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	4616      	mov	r6, r2
 8005110:	e7bc      	b.n	800508c <_printf_i+0x148>
 8005112:	6833      	ldr	r3, [r6, #0]
 8005114:	1d1a      	adds	r2, r3, #4
 8005116:	6032      	str	r2, [r6, #0]
 8005118:	681e      	ldr	r6, [r3, #0]
 800511a:	6862      	ldr	r2, [r4, #4]
 800511c:	2100      	movs	r1, #0
 800511e:	4630      	mov	r0, r6
 8005120:	f7fb f856 	bl	80001d0 <memchr>
 8005124:	b108      	cbz	r0, 800512a <_printf_i+0x1e6>
 8005126:	1b80      	subs	r0, r0, r6
 8005128:	6060      	str	r0, [r4, #4]
 800512a:	6863      	ldr	r3, [r4, #4]
 800512c:	6123      	str	r3, [r4, #16]
 800512e:	2300      	movs	r3, #0
 8005130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005134:	e7aa      	b.n	800508c <_printf_i+0x148>
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	4632      	mov	r2, r6
 800513a:	4649      	mov	r1, r9
 800513c:	4640      	mov	r0, r8
 800513e:	47d0      	blx	sl
 8005140:	3001      	adds	r0, #1
 8005142:	d0ad      	beq.n	80050a0 <_printf_i+0x15c>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	079b      	lsls	r3, r3, #30
 8005148:	d413      	bmi.n	8005172 <_printf_i+0x22e>
 800514a:	68e0      	ldr	r0, [r4, #12]
 800514c:	9b03      	ldr	r3, [sp, #12]
 800514e:	4298      	cmp	r0, r3
 8005150:	bfb8      	it	lt
 8005152:	4618      	movlt	r0, r3
 8005154:	e7a6      	b.n	80050a4 <_printf_i+0x160>
 8005156:	2301      	movs	r3, #1
 8005158:	4632      	mov	r2, r6
 800515a:	4649      	mov	r1, r9
 800515c:	4640      	mov	r0, r8
 800515e:	47d0      	blx	sl
 8005160:	3001      	adds	r0, #1
 8005162:	d09d      	beq.n	80050a0 <_printf_i+0x15c>
 8005164:	3501      	adds	r5, #1
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	9903      	ldr	r1, [sp, #12]
 800516a:	1a5b      	subs	r3, r3, r1
 800516c:	42ab      	cmp	r3, r5
 800516e:	dcf2      	bgt.n	8005156 <_printf_i+0x212>
 8005170:	e7eb      	b.n	800514a <_printf_i+0x206>
 8005172:	2500      	movs	r5, #0
 8005174:	f104 0619 	add.w	r6, r4, #25
 8005178:	e7f5      	b.n	8005166 <_printf_i+0x222>
 800517a:	bf00      	nop
 800517c:	080054f5 	.word	0x080054f5
 8005180:	08005506 	.word	0x08005506

08005184 <memmove>:
 8005184:	4288      	cmp	r0, r1
 8005186:	b510      	push	{r4, lr}
 8005188:	eb01 0402 	add.w	r4, r1, r2
 800518c:	d902      	bls.n	8005194 <memmove+0x10>
 800518e:	4284      	cmp	r4, r0
 8005190:	4623      	mov	r3, r4
 8005192:	d807      	bhi.n	80051a4 <memmove+0x20>
 8005194:	1e43      	subs	r3, r0, #1
 8005196:	42a1      	cmp	r1, r4
 8005198:	d008      	beq.n	80051ac <memmove+0x28>
 800519a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800519e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051a2:	e7f8      	b.n	8005196 <memmove+0x12>
 80051a4:	4402      	add	r2, r0
 80051a6:	4601      	mov	r1, r0
 80051a8:	428a      	cmp	r2, r1
 80051aa:	d100      	bne.n	80051ae <memmove+0x2a>
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051b6:	e7f7      	b.n	80051a8 <memmove+0x24>

080051b8 <_sbrk_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	4d06      	ldr	r5, [pc, #24]	@ (80051d4 <_sbrk_r+0x1c>)
 80051bc:	2300      	movs	r3, #0
 80051be:	4604      	mov	r4, r0
 80051c0:	4608      	mov	r0, r1
 80051c2:	602b      	str	r3, [r5, #0]
 80051c4:	f7fc fce4 	bl	8001b90 <_sbrk>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d102      	bne.n	80051d2 <_sbrk_r+0x1a>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	b103      	cbz	r3, 80051d2 <_sbrk_r+0x1a>
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	20000e6c 	.word	0x20000e6c

080051d8 <memcpy>:
 80051d8:	440a      	add	r2, r1
 80051da:	4291      	cmp	r1, r2
 80051dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80051e0:	d100      	bne.n	80051e4 <memcpy+0xc>
 80051e2:	4770      	bx	lr
 80051e4:	b510      	push	{r4, lr}
 80051e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051ee:	4291      	cmp	r1, r2
 80051f0:	d1f9      	bne.n	80051e6 <memcpy+0xe>
 80051f2:	bd10      	pop	{r4, pc}

080051f4 <_realloc_r>:
 80051f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f8:	4680      	mov	r8, r0
 80051fa:	4615      	mov	r5, r2
 80051fc:	460c      	mov	r4, r1
 80051fe:	b921      	cbnz	r1, 800520a <_realloc_r+0x16>
 8005200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005204:	4611      	mov	r1, r2
 8005206:	f7ff bc4b 	b.w	8004aa0 <_malloc_r>
 800520a:	b92a      	cbnz	r2, 8005218 <_realloc_r+0x24>
 800520c:	f7ff fbdc 	bl	80049c8 <_free_r>
 8005210:	2400      	movs	r4, #0
 8005212:	4620      	mov	r0, r4
 8005214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005218:	f000 f81a 	bl	8005250 <_malloc_usable_size_r>
 800521c:	4285      	cmp	r5, r0
 800521e:	4606      	mov	r6, r0
 8005220:	d802      	bhi.n	8005228 <_realloc_r+0x34>
 8005222:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005226:	d8f4      	bhi.n	8005212 <_realloc_r+0x1e>
 8005228:	4629      	mov	r1, r5
 800522a:	4640      	mov	r0, r8
 800522c:	f7ff fc38 	bl	8004aa0 <_malloc_r>
 8005230:	4607      	mov	r7, r0
 8005232:	2800      	cmp	r0, #0
 8005234:	d0ec      	beq.n	8005210 <_realloc_r+0x1c>
 8005236:	42b5      	cmp	r5, r6
 8005238:	462a      	mov	r2, r5
 800523a:	4621      	mov	r1, r4
 800523c:	bf28      	it	cs
 800523e:	4632      	movcs	r2, r6
 8005240:	f7ff ffca 	bl	80051d8 <memcpy>
 8005244:	4621      	mov	r1, r4
 8005246:	4640      	mov	r0, r8
 8005248:	f7ff fbbe 	bl	80049c8 <_free_r>
 800524c:	463c      	mov	r4, r7
 800524e:	e7e0      	b.n	8005212 <_realloc_r+0x1e>

08005250 <_malloc_usable_size_r>:
 8005250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005254:	1f18      	subs	r0, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	bfbc      	itt	lt
 800525a:	580b      	ldrlt	r3, [r1, r0]
 800525c:	18c0      	addlt	r0, r0, r3
 800525e:	4770      	bx	lr

08005260 <_init>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr

0800526c <_fini>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr
